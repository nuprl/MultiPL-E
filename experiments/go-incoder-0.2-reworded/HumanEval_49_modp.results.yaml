language: go_test.go
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ + p - n, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpjinj4b09_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpjinj4b09_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) * p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) * p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpe4hh7rdq_test.go:54: expected '%!s(int=3)', got '%!s(int=125)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpe4hh7rdq_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=7200018645606877557)'\n    --- FAIL: TestModp/test_num__3\
    \ (0.00s)\n        tmpe4hh7rdq_test.go:54: expected '%!s(int=8)', got '%!s(int=1331)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpe4hh7rdq_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=4979617599619485809)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpe4hh7rdq_test.go:54: expected '%!s(int=4)', got '%!s(int=8985370930000934825)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpe4hh7rdq_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=8033366502585570893)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n-1, p)\n    }\n    return modp(n - 2, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjwbwbk9x_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjwbwbk9x_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpjwbwbk9x_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpjwbwbk9x_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpjwbwbk9x_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if p > n {\n       \
    \ return modp(n, p - 1)\n    }\n    if p < n {\n        return modp(n, p)\n  \
    \  }\n    if p == 1 {\n        return n\n    }\n    if n == 1 {\n        return\
    \ p\n    }\n    if n == p {\n        return modp(n-1, p)\n    }\n    if n == p+1\
    \ {\n        return modp(n-1, p-1)\n    }\n    if n == p+2 {\n        return modp(n-1,\
    \ p)\n    }\n    if n == p+3 {\n        return modp(n-1, p-1)\n    }\n    if n\
    \ == p+4 {\n        return modp(n-1, p)\n    }\n    if n == p+5 {\n        return\
    \ modp(n-1, p-1)\n    }\n    if n == p+6 {\n        return modp(n-1, p)\n    }\n\
    \    if n == p+7 {\n        return modp(n-1, p-1)\n    }\n    if n == p+8 {\n\
    \        return modp(n-1, p)\n    }\n    if n == p+9 {\n        return modp(n-1,\
    \ p-1)\n    }\n    if n == p+10 {\n        return modp(n-1, p)\n    }\n    if\
    \ n == p+11 {\n        return modp(n-1, p-1)\n    }\n    if n == p+12 {\n    \
    \    return modp(n-1, p)\n    }\n    if n == p+13 {\n        return modp(n-1,\
    \ p-1)\n    }\n    if n == p+14 {\n        return modp(n-1, p)\n    }\n    if\
    \ n == p+15 {\n        return modp(n-1, p-1)\n    }\n    if n == p+16 {\n    \
    \    return modp(n-1, p)\n    }\n    if n == p+17 {\n        return modp(n-1,\
    \ p-1)\n    }\n    if n == p+18 {\n        return modp(n-1, p)\n    }\n    if\
    \ n == p+19 {\n        return modp(n-1, p-1)\n    }\n    if n == p+20 {\n    \
    \    return modp(n-1, p)\n    }\n    if n == p+21 {\n        return modp(n-1,\
    \ p-1)\n    }\n    if n == p+22 {\n        return modp(n-1, p)\n    }\n    if\
    \ n == p+23 {\n        return modp(n-1, p-1)\n    }\n    if n == p+24 {\n    \
    \    return modp(n-1, p)\n    }\n    if n == p+25 {\n        return modp(n-1,\
    \ p-1)\n    }\n    if n == p+26 {\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2xng5466_test.go:123:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpnen1if80_test.go:19 +0x85 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 4 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p < 5 {\n        return modp(n - 1, p*p)\n    }\n    if p < 6 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 7 {\n        return modp(n -\
    \ 1, p*p)\n    }\n    if p < 8 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 1, p*p)\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 11 {\n        return modp(n - 1, p*p)\n  \
    \  }\n    if p < 12 {\n        return modp(n - 1, p)\n    }\n    if p < 13 {\n\
    \        return modp(n - 1, p*p)\n    }\n    if p < 14 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p < 15 {\n        return modp(n - 1, p*p)\n    }\n  \
    \  if p < 16 {\n        return modp(n - 1, p)\n    }\n    if p < 17 {\n      \
    \  return modp(n - 1, p*p)\n    }\n    if p < 18 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 19 {\n        return modp(n - 1, p*p)\n    }\n    if p\
    \ < 20 {\n        return modp(n - 1, p)\n    }\n    if p < 21 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 22 {\n        return modp(n - 1, p)\n  \
    \  }\n    if p < 23 {\n        return modp(n - 1, p*p)\n    }\n    if p < 24 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 25 {\n        return modp(n\
    \ - 1, p*p)\n    }\n    if p < 26 {\n        return modp(n - 1, p)\n    }\n  \
    \  if p < 27 {\n        return modp(n - 1, p*p)\n    }\n    if p < 28 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 29 {\n        return modp(n - 1,\
    \ p*p)\n    }\n    if p < 30 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 31 {\n        return modp(n - 1, p*p)\n    }\n    if p < 32 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 33 {\n        return modp(n - 1, p*p)\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5qycpqwf_test.go:124:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < n {\n        return modp(n, p % n) % p\n    }\n    return modp(n - 1, p %\
    \ n) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520350?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x44d?, 0x65)\n\
    \t/tmp/tmpzq1dzmjf_test.go:19 +0x165 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef7c5\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d2\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmpzq1dzmjf_test.go:33 +0x72 fp=0x"
  timestamp: 1660074950
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ < p {\n        return modp(n - 1, p) + p\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprtgv6o6n_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp7hp8w3mb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < p {\n        return modp(n - 1, p) % p\n    }\n    return modp(n - 2, p) %\
    \ p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkth7ffyb_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkth7ffyb_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkth7ffyb_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpkth7ffyb_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpkth7ffyb_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > p {\n        return\
    \ modp(n - 1, p)\n    }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n\
    \    }\n    return modp(n / 2, p) + modp(n / 2, p - 1)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpwn_y61eb_test.go:60: expected '%!s(int=3)', got '%!s(int=9)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpwn_y61eb_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpwn_y61eb_test.go:60: expected '%!s(int=8)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpwn_y61eb_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=701)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpwn_y61eb_test.go:60: expected '%!s(int=4)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpwn_y61eb_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=21)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz8eaau35_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz8eaau35_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz8eaau35_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpz8eaau35_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpz8eaau35_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p > n {\n       \
    \ return modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p - n)\n\
    \    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpxi3jzdz2_test.go:19 +0xb4 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef714\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6c9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33 +0x69\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6c9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxi3jzdz2_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n > p {\n        return modp(n, p - 1)\n\
    \    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpub6i_6p7_test.go:38:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ > p {\n        return modp(n - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0vlhn43_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n >> 1, p) + p\n    }\n    if p < 3 {\n        return modp(n >> 2, p) +\
    \ p\n    }\n    if p < 5 {\n        return modp(n >> 3, p) + p\n    }\n    if\
    \ p < 7 {\n        return modp(n >> 4, p) + p\n    }\n    if p < 9 {\n       \
    \ return modp(n >> 5, p) + p\n    }\n    if p < 11 {\n        return modp(n >>\
    \ 6, p) + p\n    }\n    if p < 13 {\n        return modp(n >> 7, p) + p\n    }\n\
    \    if p < 15 {\n        return modp(n >> 8, p) + p\n    }\n    if p < 17 {\n\
    \        return modp(n >> 9, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ >> 10, p) + p\n    }\n    if p < 23 {\n        return modp(n >> 11, p) + p\n\
    \    }\n    if p < 25 {\n        return modp(n >> 12, p) + p\n    }\n    if p\
    \ < 27 {\n        return modp(n >> 13, p) + p\n    }\n    if p < 29 {\n      \
    \  return modp(n >> 14, p) + p\n    }\n    if p < 31 {\n        return modp(n\
    \ >> 15, p) + p\n    }\n    if p < 33 {\n        return modp(n >> 16, p) + p\n\
    \    }\n    if p < 35 {\n        return modp(n >> 17, p) + p\n    }\n    if p\
    \ < 37 {\n        return modp(n >> 18, p) + p\n    }\n    if p < 39 {\n      \
    \  return modp(n >> 19, p) + p\n    }\n    if p < 41 {\n        return modp(n\
    \ >> 20, p) + p\n    }\n    if p < 43 {\n        return modp(n >> 21, p) + p\n\
    \    }\n    if p < 45 {\n        return modp(n >> 22, p) + p\n    }\n    if p\
    \ < 47 {\n        return modp(n >> 23, p) + p\n    }\n    if p < 49 {\n      \
    \  return modp(n >> 24, p) + p\n    }\n    if p < 51 {\n        return modp(n\
    \ >> 25, p) + p\n    }\n    if p < 53 {\n        return modp(n >> 26, p) + p\n\
    \    }\n    if p < 55 {\n        return modp(n >> 27, p) + p\n    }\n    if p\
    \ < 57 {\n        return modp(n >> 28\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0vlwgdhb_test.go:108:28: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > p {\n       \
    \ return -1\n    }\n    if p > n {\n        return -1\n    }\n    if p < n {\n\
    \        return -1\n    }\n    if p > p {\n        return -1\n    }\n    if p\
    \ < p {\n        return -1\n    }\n    if p > n {\n        return -1\n    }\n\
    \    if p < n {\n        return -1\n    }\n    if p > p {\n        return -1\n\
    \    }\n    if p < p {\n        return -1\n    }\n    if p > n {\n        return\
    \ -1\n    }\n    if p < n {\n        return -1\n    }\n    if p > p {\n      \
    \  return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p > n {\n\
    \        return -1\n    }\n    if p < n {\n        return -1\n    }\n    if p\
    \ > p {\n        return -1\n    }\n    if p < p {\n        return -1\n    }\n\
    \    if p > n {\n        return -1\n    }\n    if p < n {\n        return -1\n\
    \    }\n    if p > p {\n        return -1\n    }\n    if p < p {\n        return\
    \ -1\n    }\n    if p > n {\n        return -1\n    }\n    if p < n {\n      \
    \  return -1\n    }\n    if p > p {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p > n {\n        return -1\n    }\n    if p\
    \ < n {\n        return -1\n    }\n    if p > p {\n        return -1\n    }\n\
    \    if p < p {\n        return -1\n    }\n    if p > n {\n        return -1\n\
    \    }\n    if p < n {\n        return -1\n    }\n    if p > p {\n        return\
    \ -1\n    }\n    if p < p {\n        return -1\n    }\n    if p > n {\n      \
    \  return -1\n    }\n    if p < n {\n        return -1\n    }\n    if p > p {\n\
    \        return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p\
    \ > n {\n        return -1\n    }\n    if p < n {\n        return -1\n    }\n\
    \    if p > p {\n        return -1\n    }\n    if p < p {\n        return -1\n\
    \    }\n    if p > n {\n        return -1\n    }\n    if p < n {\n        return\
    \ -1\n    }\n    if p > p {\n        return -1\n    }\n    if p < p {\n      \
    \  return -1\n    }\n    if p > n \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp52m7yiym_test.go:168:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n == p+1 {\n    \
    \    return n\n    }\n    if n == p-1 {\n        return n\n    }\n    if n ==\
    \ p+2 {\n        return n\n    }\n    if n == p+3 {\n        return n\n    }\n\
    \    if n == p+4 {\n        return n\n    }\n    if n == p+5 {\n        return\
    \ n\n    }\n    if n == p+6 {\n        return n\n    }\n    if n == p+7 {\n  \
    \      return n\n    }\n    if n == p+8 {\n        return n\n    }\n    if n ==\
    \ p+9 {\n        return n\n    }\n    if n == p+10 {\n        return n\n    }\n\
    \    if n == p+11 {\n        return n\n    }\n    if n == p+12 {\n        return\
    \ n\n    }\n    if n == p+13 {\n        return n\n    }\n    if n == p+14 {\n\
    \        return n\n    }\n    if n == p+15 {\n        return n\n    }\n    if\
    \ n == p+16 {\n        return n\n    }\n    if n == p+17 {\n        return n\n\
    \    }\n    if n == p+18 {\n        return n\n    }\n    if n == p+19 {\n    \
    \    return n\n    }\n    if n == p+20 {\n        return n\n    }\n    if n ==\
    \ p+21 {\n        return n\n    }\n    if n == p+22 {\n        return n\n    }\n\
    \    if n == p+23 {\n        return n\n    }\n    if n == p+24 {\n        return\
    \ n\n    }\n    if n == p+25 {\n        return n\n    }\n    if n == p+26 {\n\
    \        return n\n    }\n    if n == p+27 {\n        return n\n    }\n    if\
    \ n == p+28 {\n        return n\n    }\n    if n == p+29 {\n        return n\n\
    \    }\n    if n == p+30 {\n        return n\n    }\n    if n == p+31 {\n    \
    \    return n\n    }\n    if n == p+32 {\n        return n\n    }\n    if n ==\
    \ p+33 {\n        return n\n    }\n    if n == p+34 {\n        return n\n    }\n\
    \    if n == p+35 {\n        return n\n    }\n    if n == p+36 {\n        return\
    \ n\n    }\n    if n == p+37 {\n        return n\n    }\n    if n == p+38 {\n\
    \        return n\n    }\n    if n == p+39 {\n        return n\n    }\n    if\
    \ n == \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp73xre8tw_test.go:153:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n / p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmp9tn_u3wo_test.go:19 +0xbc fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef71c\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30 +0x77\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp9tn_u3wo_test.go:30"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p == 2 {\n      \
    \  return modp(n - 1, p)\n    }\n    if p == 3 {\n        return modp(n - 2, p)\n\
    \    }\n    if p == 4 {\n        return modp(n - 3, p)\n    }\n    if p == 5 {\n\
    \        return modp(n - 4, p)\n    }\n    if p == 6 {\n        return modp(n\
    \ - 5, p)\n    }\n    if p == 7 {\n        return modp(n - 6, p)\n    }\n    if\
    \ p == 8 {\n        return modp(n - 7, p)\n    }\n    if p == 9 {\n        return\
    \ modp(n - 8, p)\n    }\n    if p == 10 {\n        return modp(n - 9, p)\n   \
    \ }\n    if p == 11 {\n        return modp(n - 10, p)\n    }\n    if p == 12 {\n\
    \        return modp(n - 11, p)\n    }\n    if p == 13 {\n        return modp(n\
    \ - 12, p)\n    }\n    if p == 14 {\n        return modp(n - 13, p)\n    }\n \
    \   if p == 15 {\n        return modp(n - 14, p)\n    }\n    if p == 16 {\n  \
    \      return modp(n - 15, p)\n    }\n    if p == 17 {\n        return modp(n\
    \ - 16, p)\n    }\n    if p == 18 {\n        return modp(n - 17, p)\n    }\n \
    \   if p == 19 {\n        return modp(n - 18, p)\n    }\n    if p == 20 {\n  \
    \      return modp(n - 19, p)\n    }\n    if p == 21 {\n        return modp(n\
    \ - 20, p)\n    }\n    if p == 22 {\n        return modp(n - 21, p)\n    }\n \
    \   if p == 23 {\n        return modp(n - 22, p)\n    }\n    if p == 24 {\n  \
    \      return modp(n - 23, p)\n    }\n    if p == 25 {\n        return modp(n\
    \ - 24, p)\n    }\n    if p == 26 {\n        return modp(n - 25, p)\n    }\n \
    \   if p == 27 {\n        return modp(n - 26, p)\n    }\n    if p == 28 {\n  \
    \      return modp(n - 27, p)\n    }\n    if p == 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p == 30 {\n        return modp(n - 29, p)\n    }\n \
    \   if p == 31 {\n        return modp(n - 30, p)\n    }\n    if p == 32 {\n  \
    \      return modp(n - 31, p)\n    }\n    if p == 33 {\n        return modp(n\
    \ - 32, p)\n    }\n    if p == 34 {\n        return modp(n - 33, p)\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfs0d9s_9_test.go:130:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyuxwpr70_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyuxwpr70_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpliuksy9t_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpliuksy9t_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpliuksy9t_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpliuksy9t_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpliuksy9t_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpliuksy9t_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p > p {\n        return modp(n / 2, p)\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n-1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmprmah4_j__test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmprmah4_j__test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmprmah4_j__test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmprmah4_j__test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmprmah4_j__test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmprmah4_j__test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, modp(p\
    \ - 1, p))\n    }\n    return modp(n - 1, modp(p - 1, p) + p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x4?, 0x5?)\n\
    \t/tmp/tmp5ioj7avm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef745\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6ae\n\
    command-line-arguments_test.modp(0x4, 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6ae\ncommand-line-arguments_test.modp(0x4,\
    \ 0x5)\n\t/tmp/tmp5ioj7avm_test.go:30 +0x4e fp=0xc0201e0528 sp=0xc0201e0508 "
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    return modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjdrzwb1s_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjdrzwb1s_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpjdrzwb1s_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpjdrzwb1s_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpjdrzwb1s_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpjdrzwb1s_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) * p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p) * p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) * p\n    }\n    return modp(n - 1, p) * p +\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074964
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ > p {\n        return modp(n - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0vlhn43_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p*p + 2)\n\
    \    }\n    if p < 5 {\n        return modp(n - 1, p*p + 4)\n    }\n    if p <\
    \ 7 {\n        return modp(n - 1, p*p + 6)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p*p + 8)\n    }\n    if p < 11 {\n        return modp(n - 1, p*p\
    \ + 10)\n    }\n    if p < 13 {\n        return modp(n - 1, p*p + 12)\n    }\n\
    \    if p < 15 {\n        return modp(n - 1, p*p + 14)\n    }\n    if p < 17 {\n\
    \        return modp(n - 1, p*p + 16)\n    }\n    if p < 19 {\n        return\
    \ modp(n - 1, p*p + 18)\n    }\n    if p < 21 {\n        return modp(n - 1, p*p\
    \ + 20)\n    }\n    if p < 23 {\n        return modp(n - 1, p*p + 22)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p*p + 24)\n    }\n    if p < 27 {\n\
    \        return modp(n - 1, p*p + 26)\n    }\n    if p < 29 {\n        return\
    \ modp(n - 1, p*p + 28)\n    }\n    if p < 31 {\n        return modp(n - 1, p*p\
    \ + 30)\n    }\n    if p < 33 {\n        return modp(n - 1, p*p + 32)\n    }\n\
    \    if p < 35 {\n        return modp(n - 1, p*p + 34)\n    }\n    if p < 37 {\n\
    \        return modp(n - 1, p*p + 36)\n    }\n    if p < 39 {\n        return\
    \ modp(n - 1, p*p + 38)\n    }\n    if p < 41 {\n        return modp(n - 1, p*p\
    \ + 40)\n    }\n    if p < 43 {\n        return modp(n - 1, p*p + 42)\n    }\n\
    \    if p < 45 {\n        return modp(n - 1, p*p + 44)\n    }\n    if p < 47 {\n\
    \        return modp(n - 1, p*p + 46)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 1, p*p + 48)\n    }\n    if p < 51 {\n        return modp(n - 1, p*p\
    \ + 50)\n    }\n    if p < 53 {\n        return modp(n - 1, p*p + 52)\n    }\n\
    \    if p < \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp19ys9cu1_test.go:108:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 2, p) + modp(n - 1, p)\n    }\n    if p < 7 {\n        return modp(n - 3,\
    \ p) + modp(n - 2, p)\n    }\n    if p < 9 {\n        return modp(n - 4, p) +\
    \ modp(n - 3, p)\n    }\n    if p < 11 {\n        return modp(n - 5, p) + modp(n\
    \ - 4, p)\n    }\n    if p < 13 {\n        return modp(n - 6, p) + modp(n - 5,\
    \ p)\n    }\n    if p < 15 {\n        return modp(n - 7, p) + modp(n - 6, p)\n\
    \    }\n    if p < 17 {\n        return modp(n - 8, p) + modp(n - 7, p)\n    }\n\
    \    if p < 19 {\n        return modp(n - 9, p) + modp(n - 8, p)\n    }\n    if\
    \ p < 23 {\n        return modp(n - 10, p) + modp(n - 9, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n - 11, p) + modp(n - 10, p)\n    }\n    if p < 27\
    \ {\n        return modp(n - 12, p) + modp(n - 11, p)\n    }\n    if p < 29 {\n\
    \        return modp(n - 13, p) + modp(n - 12, p)\n    }\n    if p < 31 {\n  \
    \      return modp(n - 14, p) + modp(n - 13, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 15, p) + modp(n - 14, p)\n    }\n    if p < 35 {\n      \
    \  return modp(n - 16, p) + modp(n - 15, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n - 17, p) + modp(n - 16, p)\n    }\n    if p < 39 {\n        return modp(n\
    \ - 18, p) + modp(n - 17, p)\n    }\n    if p < 41 {\n        return modp(n -\
    \ 19, p) + modp(n - 18, p)\n    }\n    if p < 43 {\n        return modp(n - 20,\
    \ p) + modp(n - 19, p)\n    }\n    if p < 45 {\n        return modp(n - 21, p)\
    \ + modp(n - 20, p)\n    }\n    if p < 47 {\n        return modp(n - 22, p) +\
    \ modp(n - 21, p)\n    }\n    if p < 49 {\n        return modp(n - 23, p) + modp(n\
    \ - \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgnahxqcj_test.go:100:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 1, p) * modp(n - 1, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p < 7\
    \ {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 8 {\n \
    \       return modp(n - 1, p) * modp(n - 1, p)\n    }\n    if p < 9 {\n      \
    \  return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p) * modp(n - 1, p)\n    }\n    if p < 12 {\n        return modp(n - 1,\
    \ p) / modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1, p) %\
    \ modp(n - 1, p)\n    }\n    if p < 14 {\n        return modp(n - 1, p) * modp(n\
    \ - 1, p)\n    }\n    if p < 15 {\n        return modp(n - 1, p) / modp(n - 1,\
    \ p)\n    }\n    if p < 16 {\n        return modp(n - 1, p) % modp(n - 1, p)\n\
    \    }\n    if p < 17 {\n        return modp(n - 1, p) * modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p <\
    \ 20 {\n        return modp(n - 1, p) * modp(n - 1, p)\n    }\n    if p < 21 {\n\
    \        return modp(n - 1, p) / modp(n - 1, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n - 1, p) % modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) * modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n\
    \ - 1, p) / modp(n - 1, p)\n    }\n    if p < 25 {\n        return modp(n - 1,\
    \ p) % modp(n - 1, p)\n    }\n    if p < 26 {\n        return modp(n - 1, p) *\
    \ modp(n - 1, p)\n    }\n    if p < 27 {\n        return mod\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfowcuddf_test.go:103:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp7hp8w3mb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpnen1if80_test.go:19 +0x85 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 3, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmph0xktblk_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmph0xktblk_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p > n {\n       \
    \ return modp(n - p, p)\n    }\n    if p < n {\n        return modp(n, p - n)\n\
    \    }\n    if p == 2 {\n        return modp(n / 2, p)\n    }\n    if p == 3 {\n\
    \        return modp(n / 3, p)\n    }\n    if p == 4 {\n        return modp(n\
    \ / 4, p)\n    }\n    if p == 5 {\n        return modp(n / 5, p)\n    }\n    if\
    \ p == 6 {\n        return modp(n / 6, p)\n    }\n    if p == 7 {\n        return\
    \ modp(n / 7, p)\n    }\n    if p == 8 {\n        return modp(n / 8, p)\n    }\n\
    \    if p == 9 {\n        return modp(n / 9, p)\n    }\n    if p == 10 {\n   \
    \     return modp(n / 10, p)\n    }\n    if p == 11 {\n        return modp(n /\
    \ 11, p)\n    }\n    if p == 12 {\n        return modp(n / 12, p)\n    }\n   \
    \ if p == 13 {\n        return modp(n / 13, p)\n    }\n    if p == 14 {\n    \
    \    return modp(n / 14, p)\n    }\n    if p == 15 {\n        return modp(n /\
    \ 15, p)\n    }\n    if p == 16 {\n        return modp(n / 16, p)\n    }\n   \
    \ if p == 17 {\n        return modp(n / 17, p)\n    }\n    if p == 18 {\n    \
    \    return modp(n / 18, p)\n    }\n    if p == 19 {\n        return modp(n /\
    \ 19, p)\n    }\n    if p == 20 {\n        return modp(n / 20, p)\n    }\n   \
    \ if p == 21 {\n        return modp(n / 21, p)\n    }\n    if p == 22 {\n    \
    \    return modp(n / 22, p)\n    }\n    if p == 100 {\n        return modp(n /\
    \ 100, p)\n    }\n    if p == 101 {\n        return modp(n / 101, p)\n    }\n\
    \    if p == 102 {\n        return modp(n / 102, p)\n    }\n    if p == 103 {\n\
    \        return modp(n / 103, p)\n    }\n    if p == 104 {\n        return modp(n\
    \ / 104, p)\n    }\n    if p == 105 {\n        return modp(n / 105, p)\n    }\n\
    \    if p == 106 {\n        return modp(n / 106, p)\n    }\n    if p == 107 {\n\
    \        return mod\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptk92iuwr_test.go:124:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p > n {\n       \
    \ return modp(n, p)\n    }\n    if p < n {\n        return modp(n - p, p)\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == p+1 {\n        return\
    \ n\n    }\n    if n == p-1 {\n        return n\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x3?, 0x5?)\n\
    \t/tmp/tmpb_2zrq16_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d7\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d7\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpb_2zrq16_test.go:33 +0x77 fp=0xc02"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > 100 {\n     \
    \   return -1\n    }\n    if p > n {\n        return -1\n    }\n    if p < p {\n\
    \        return modp(n - p, p)\n    }\n    if p < p {\n        return modp(n -\
    \ p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpjmcrrrfg_test.go:66: expected '%!s(int=3)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpjmcrrrfg_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpjmcrrrfg_test.go:66: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpjmcrrrfg_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpjmcrrrfg_test.go:66: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpjmcrrrfg_test.go:66: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpa1s5ib_8_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpa1s5ib_8_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 7 {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 11 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) % p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p < 16 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) % p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < 20 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) % p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 24 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) % p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p < 29 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) % p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr97i6u7q_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n == p {\n        return 1\n    }\n   \
    \ return modp(n - p, p) + modp(n, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x5b?, 0x65?)\n\
    \t/tmp/tmp9gntj34a_test.go:19 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x52\
    \ fp=0xc0201e03d8 sp=0xc0201e03a8 pc=0x4ef6b2\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc0201e0408 sp=0xc0201e03d8 pc=0x4ef6c6\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66\
    \ fp=0xc0201e0438 sp=0xc0201e0408 pc=0x4ef6c6\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc0201e0468 sp=0xc0201e0438 pc=0x4ef6c6\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66\
    \ fp=0xc0201e0498 sp=0xc0201e0468 pc=0x4ef6c6\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc0201e04c8 sp=0xc0201e0498 pc=0x4ef6c6\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66\
    \ fp=0xc0201e04f8 sp=0xc0201e04c8 pc=0x4ef6c6\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc0201e0528 sp=0xc0201e04f8 pc=0x4ef6c6\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66\
    \ fp=0xc0201e0558 sp=0xc0201e0528 pc=0x4ef6c6\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc0201e0588 sp=0xc0201e0558 pc=0x4ef6c6\n\
    command-line-arguments_test.modp(0x0?, 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66\
    \ fp=0xc0201e05b8 sp=0xc0201e0588 pc=0x4ef6c6\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x65)\n\t/tmp/tmp9gntj34a_test.go:38 +0x66 fp=0xc"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n\
    \ - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 1, p) + modp(n - 1,\
    \ p)\n    }\n    if p < 5 {\n        return modp(n - 1, p) + modp(n - 1, p)\n\
    \    }\n    if p < 6 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    \    if p < 7 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if\
    \ p < 8 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 10 {\n\
    \        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 11 {\n    \
    \    return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n\
    \ - 1, p) + modp(n - 1, p)\n    }\n    if p < 14 {\n        return modp(n - 1,\
    \ p) + modp(n - 1, p)\n    }\n    if p < 15 {\n        return modp(n - 1, p) +\
    \ modp(n - 1, p)\n    }\n    if p < 16 {\n        return modp(n - 1, p) + modp(n\
    \ - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p) + modp(n - 1,\
    \ p)\n    }\n    if p < 18 {\n        return modp(n - 1, p) + modp(n - 1, p)\n\
    \    }\n    if p < 19 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n\
    \    if p < 20 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if\
    \ p < 21 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 23 {\n\
    \        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 24 {\n    \
    \    return modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 1, p) + modp(n - 1, p)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p) + modp(n - 1, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe8wcrzmv_test.go:102:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p < n {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n, p)\n}\n\n\
    func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
    \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
    \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
    \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
    \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpmcy549ee_test.go:19 +0xd1 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef731\n\
    command-line-arguments_test.modp(0xfffffffffc0000c0, 0x5)\n\t/tmp/tmpmcy549ee_test.go:35\
    \ +0x65 fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0xfffffffffc0000c5,\
    \ 0x5)\n\t/tmp/tmpmcy549ee_test.go:35 +0x65 fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0xfffffffffc0000ca, 0x5)\n\t/tmp/tmpmcy549ee_test.go:35\
    \ +0x65 fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0xfffffffffc0000cf,\
    \ 0x5)\n\t/tmp/tmpmcy549ee_test.go:35 +0x65 fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0xfffffffffc0000d4, 0x5)\n\t/tmp/tmpmcy549ee_test.go:35\
    \ +0x65 fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0xfffffffffc0000d9,\
    \ 0x5)\n\t/tmp/tmpmcy549ee_test.go:35 +0x65 fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0xfffffffffc0000de, 0x5)\n\t/tmp/tmpmcy549ee_test.go:35\
    \ +0x65 fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0xfffffffffc0000e3,\
    \ 0x5)\n\t/tmp/tmpmcy549ee_test.go:35 +0x65 fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0xfffffffffc0000e8, 0x5)\n\t/tmp/tmpmcy549ee_test.go:35\
    \ +0x65 fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0xfffffffffc0000ed,\
    \ 0x5)\n\t/tmp/tmpmcy549ee_test.go:35 +0x65 fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0xfffffffffc0000f2, 0x5)\n\t/tmp/tmp"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n+p, p)\n    }\n    if n < p {\n\
    \        return modp(n, p-n)\n    }\n    return modp(n-p, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp6w497b6j_test.go:57: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp6w497b6j_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp6w497b6j_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp6w497b6j_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp6w497b6j_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp6w497b6j_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < n {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1, p) + modp(n-1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmptqlti4ut_test.go:57: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmptqlti4ut_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=20200)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptqlti4ut_test.go:57: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptqlti4ut_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptqlti4ut_test.go:57: expected '%!s(int=4)', got '%!s(int=40)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptqlti4ut_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=40)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > 100 {\n     \
    \   return -1\n    }\n    if p > n {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p < n {\n        return -1\n    }\n    if p\
    \ < p {\n        return -1\n    }\n    if p < p {\n        return -1\n    }\n\
    \    if p < p {\n        return -1\n    }\n    if p < p {\n        return -1\n\
    \    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n        return\
    \ -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n      \
    \  return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p\
    \ < p {\n        return -1\n    }\n    if p < p {\n        return -1\n    }\n\
    \    if p < p {\n        return -1\n    }\n    if p < p {\n        return -1\n\
    \    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n        return\
    \ -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n      \
    \  return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p\
    \ < p {\n        return -1\n    }\n    if p < p {\n        return -1\n    }\n\
    \    if p < p {\n        return -1\n    }\n    if p < p {\n        return -1\n\
    \    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n        return\
    \ -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n      \
    \  return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p\
    \ < p {\n        return -1\n    }\n    if p < p {\n        return -1\n    }\n\
    \    if p < p {\n        return -1\n    }\n    if p < p {\n        return -1\n\
    \    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n        return\
    \ -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n      \
    \  return -1\n    }\n    if p < p {\n        return -1\n    }\n    if p < p {\n\
    \        return -1\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp24lr__kz_test.go:174:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p*2 + 1)\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p*2 + 2)\n    }\n    if p <\
    \ 5 {\n        return modp(n - 1, p*2 + 3)\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p*2 + 4)\n    }\n    if p < 7 {\n        return modp(n - 1, p*2\
    \ + 5)\n    }\n    if p < 8 {\n        return modp(n - 1, p*2 + 6)\n    }\n  \
    \  if p < 9 {\n        return modp(n - 1, p*2 + 7)\n    }\n    if p < 10 {\n \
    \       return modp(n - 1, p*2 + 8)\n    }\n    if p < 11 {\n        return modp(n\
    \ - 1, p*2 + 9)\n    }\n    if p < 12 {\n        return modp(n - 1, p*2 + 10)\n\
    \    }\n    if p < 13 {\n        return modp(n - 1, p*2 + 11)\n    }\n    if p\
    \ < 14 {\n        return modp(n - 1, p*2 + 12)\n    }\n    if p < 15 {\n     \
    \   return modp(n - 1, p*2 + 13)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 1, p*2 + 14)\n    }\n    if p < 17 {\n        return modp(n - 1, p*2 + 15)\n\
    \    }\n    if p < 18 {\n        return modp(n - 1, p*2 + 16)\n    }\n    if p\
    \ < 19 {\n        return modp(n - 1, p*2 + 17)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 1, p*2 + 18)\n    }\n    if p < 21 {\n        return modp(n\
    \ - 1, p*2 + 19)\n    }\n    if p < 22 {\n        return modp(n - 1, p*2 + 20)\n\
    \    }\n    if p < 23 {\n        return modp(n - 1, p*2 + 21)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 1, p*2 + 22)\n    }\n    if p < 25 {\n     \
    \   return modp(n - 1, p*2 + 23)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 1, p*2 + 24)\n    }\n    if p < 27 {\n        return modp(n - 1, p*2 + 25)\n\
    \    }\n    if p < 28 {\n        return modp(n - 1, p*2 + 26)\n    }\n    if p\
    \ < 29 {\n        return modp(n - 1, p*2 + 27)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 1, p*2 + 28)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl3u7mo3s_test.go:114:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p - 1)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpffs1nvt4_test.go:54: expected '%!s(int=3)', got '%!s(int=869)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpffs1nvt4_test.go:54: expected '%!s(int=8)', got '%!s(int=17291)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=1589559562229252097)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpffs1nvt4_test.go:54: expected '%!s(int=4)', got '%!s(int=9010283668692914177)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=-2174763289365090303)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=2)', got '%!s(int=1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n == p+1 {\n    \
    \    return n\n    }\n    if n == p-1 {\n        return n\n    }\n    if n ==\
    \ p+2 {\n        return n\n    }\n    if n == p-2 {\n        return n\n    }\n\
    \    if n == p+3 {\n        return n\n    }\n    if n == p-3 {\n        return\
    \ n\n    }\n    if n == p+4 {\n        return n\n    }\n    if n == p-4 {\n  \
    \      return n\n    }\n    if n == p+5 {\n        return n\n    }\n    if n ==\
    \ p-5 {\n        return n\n    }\n    if n == p+6 {\n        return n\n    }\n\
    \    if n == p-6 {\n        return n\n    }\n    if n == p+7 {\n        return\
    \ n\n    }\n    if n == p-7 {\n        return n\n    }\n    if n == p+8 {\n  \
    \      return n\n    }\n    if n == p-8 {\n        return n\n    }\n    if n ==\
    \ p+9 {\n        return n\n    }\n    if n == p-9 {\n        return n\n    }\n\
    \    if n == p+10 {\n        return n\n    }\n    if n == p-10 {\n        return\
    \ n\n    }\n    if n == p+11 {\n        return n\n    }\n    if n == p-11 {\n\
    \        return n\n    }\n    if n == p+12 {\n        return n\n    }\n    if\
    \ n == p-12 {\n        return n\n    }\n    if n == p+13 {\n        return n\n\
    \    }\n    if n == p-13 {\n        return n\n    }\n    if n == p+14 {\n    \
    \    return n\n    }\n    if n == p-14 {\n        return n\n    }\n    if n ==\
    \ p+15 {\n        return n\n    }\n    if n == p-15 {\n        return n\n    }\n\
    \    if n == p+16 {\n        return n\n    }\n    if n == p-16 {\n        return\
    \ n\n    }\n    if n == p+17 {\n        return n\n    }\n    if n == p-17 {\n\
    \        return n\n    }\n    if n == p+18 {\n        return n\n    }\n    if\
    \ n == p-18 {\n        return n\n    }\n    if n == p+19 {\n        return n\n\
    \    }\n    if n == p-19 {\n        return n\n    }\n    if n == p+20 {\n    \
    \    return n\n    }\n    if n == p-20 {\n        return n\n    }\n    if n ==\
    \ p+21 {\n        return n\n    }\n    if n == p-21 {\n        return n\n    }\n\
    \    if \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkyjkv9y9_test.go:159:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptd2pa534_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpx801yptv_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpx801yptv_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpx801yptv_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpx801yptv_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpx801yptv_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpx801yptv_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 7 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 10, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 14 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 15 {\n        return modp(n - 13, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 17 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 18 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 17, p)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 21 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 22 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 21, p)\n    }\n    if p < 24 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 25 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 26 {\n        return modp(n - 24, p)\n    }\n    if p < 27 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 29 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 30 {\n        return modp(n - 28, p)\n    }\n    if p < 31 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 32 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 34 {\n        return modp(n - 32, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp495f1ihm_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n <= p {\n        return modp(n - p, p)\n    }\n  \
    \  if n >= p {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp_8tiaudc_test.go:19 +0xae fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70e\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:36 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp_8tiaudc_test.go:3"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p + p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpytsfim5q_test.go:54: expected '%!s(int=3)', got '%!s(int=1295)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpytsfim5q_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpytsfim5q_test.go:54: expected '%!s(int=8)', got '%!s(int=20735)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpytsfim5q_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5757275536129349623)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmpytsfim5q_test.go:54: expected '%!s(int=3)', got '%!s(int=2424274745770365009)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p - 1)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpffs1nvt4_test.go:54: expected '%!s(int=3)', got '%!s(int=869)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpffs1nvt4_test.go:54: expected '%!s(int=8)', got '%!s(int=17291)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=1589559562229252097)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpffs1nvt4_test.go:54: expected '%!s(int=4)', got '%!s(int=9010283668692914177)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpffs1nvt4_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=-2174763289365090303)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return -1\n    }\n    if p > n {\n       \
    \ return -1\n    }\n    if p < p {\n        return modp(n - p, p)\n    }\n   \
    \ if p > p {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmptcki17ar_test.go:63: expected '%!s(int=3)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmptcki17ar_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptcki17ar_test.go:63: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptcki17ar_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptcki17ar_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptcki17ar_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 29 {\n        return modp(n - 1, p)\n    }\n    if p < 30 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7fcxoq_g_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p*p + 2)\n    }\n    if p < p {\n        return modp(n - 1, p*p\
    \ + 3)\n    }\n    return modp(n - 1, p*p + 4)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpeg4yk0za_test.go:60: expected '%!s(int=3)', got '%!s(int=845)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpeg4yk0za_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=1097)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpeg4yk0za_test.go:60: expected '%!s(int=8)', got '%!s(int=15629)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpeg4yk0za_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=96)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpeg4yk0za_test.go:60: expected '%!s(int=4)', got '%!s(int=29)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpeg4yk0za_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) * p\n    }\n    if p < 3 {\n        return modp(n - 2, p) * (p\
    \ - 1)\n    }\n    if p < 5 {\n        return modp(n - 3, p) * (p - 2)\n    }\n\
    \    return modp(n - 4, p) * (p - 3)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmphlynv1kg_test.go:19 +0xf1 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef751\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmphlynv1kg_test.go:35 +0x75 fp=0x"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(n - p, p) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpgnwew1zn_test.go:57: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpgnwew1zn_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpgnwew1zn_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpgnwew1zn_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpgnwew1zn_test.go:57: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpgnwew1zn_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n > p {\n        return modp(n - p, p)\n\
    \    }\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8ro9wve_test.go:38:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpsenbkcxc_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpsenbkcxc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpai_k_wcr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpai_k_wcr_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpai_k_wcr_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpai_k_wcr_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpai_k_wcr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n - 3, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 5, p)\n    }\n    if p < 7 {\n        return modp(n - 6, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 8, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10, p)\n    }\n   \
    \ if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p < 13 {\n      \
    \  return modp(n - 12, p)\n    }\n    if p < 14 {\n        return modp(n - 13,\
    \ p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n    }\n    if p\
    \ < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n        return\
    \ modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n - 17, p)\n  \
    \  }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n    if p < 20 {\n\
    \        return modp(n - 19, p)\n    }\n    if p < 21 {\n        return modp(n\
    \ - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21, p)\n    }\n  \
    \  if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p < 24 {\n     \
    \   return modp(n - 23, p)\n    }\n    if p < 25 {\n        return modp(n - 24,\
    \ p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n    }\n    if p\
    \ < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n - 28, p)\n  \
    \  }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n    if p < 31 {\n\
    \        return modp(n - 30, p)\n    }\n    if p < 32 {\n        return modp(n\
    \ - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32, p)\n    }\n  \
    \  if p < 34 {\n        return modp(n - 33, p)\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2l47q6bh_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return p\n    }\n    if n == p {\n       \
    \ return p\n    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpcrnx_vgo_test.go:57: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpcrnx_vgo_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpcrnx_vgo_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpcrnx_vgo_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpcrnx_vgo_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpcrnx_vgo_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptd2pa534_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p < 4 {\n        return modp(n - 1, p*p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p*p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p < 8 {\n        return modp(n - 1, p*p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p*p)\n  \
    \  }\n    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n\
    \        return modp(n - 1, p*p)\n    }\n    if p < 13 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p < 14 {\n        return modp(n - 1, p*p)\n    }\n  \
    \  if p < 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n      \
    \  return modp(n - 1, p*p)\n    }\n    if p < 17 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 18 {\n        return modp(n - 1, p*p)\n    }\n    if p\
    \ < 19 {\n        return modp(n - 1, p)\n    }\n    if p < 20 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n  \
    \  }\n    if p < 22 {\n        return modp(n - 1, p*p)\n    }\n    if p < 23 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n\
    \ - 1, p*p)\n    }\n    if p < 25 {\n        return modp(n - 1, p)\n    }\n  \
    \  if p < 26 {\n        return modp(n - 1, p*p)\n    }\n    if p < 27 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 28 {\n        return modp(n - 1,\
    \ p*p)\n    }\n    if p < 29 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 30 {\n        return modp(n - 1, p*p)\n    }\n    if p < 31 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 32 {\n        return modp(n - 1, p*p)\n  \
    \  }\n    if p < 33 {\n        return modp(n - 1, p)\n    }\n    if p \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy1r838um_test.go:123:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return p\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp59odo1ah_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp59odo1ah_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp59odo1ah_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp59odo1ah_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp59odo1ah_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp59odo1ah_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 4 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 3 {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n      \
    \  return modp(n - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n\
    \    }\n    if p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n\
    \        return modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n -\
    \ 7, p)\n    }\n    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p\
    \ < 10 {\n        return modp(n - 9, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 10, p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n  \
    \  }\n    if p < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n\
    \        return modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p)\n    }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n  \
    \  if p < 17 {\n        return modp(n - 16, p)\n    }\n    if p < 18 {\n     \
    \   return modp(n - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18,\
    \ p)\n    }\n    if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p\
    \ < 21 {\n        return modp(n - 20, p)\n    }\n    if p < 22 {\n        return\
    \ modp(n - 21, p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n  \
    \  }\n    if p < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n\
    \        return modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n\
    \ - 25, p)\n    }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n  \
    \  if p < 28 {\n        return modp(n - 27, p)\n    }\n    if p < 29 {\n     \
    \   return modp(n - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p\
    \ < 32 {\n        return modp(n - 31, p)\n    }\n    if p < 33 {\n        return\
    \ modp(n - 32, p)\n    }\n    if p < 34\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiavz4mlh_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 5 {\n        return modp(n - 3, p) % p\n    }\n    if p < 7\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 9 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 11 {\n        return modp(n - 6, p) %\
    \ p\n    }\n    if p < 13 {\n        return modp(n - 7, p) % p\n    }\n    if\
    \ p < 15 {\n        return modp(n - 8, p) % p\n    }\n    if p < 17 {\n      \
    \  return modp(n - 9, p) % p\n    }\n    if p < 19 {\n        return modp(n -\
    \ 10, p) % p\n    }\n    if p < 23 {\n        return modp(n - 11, p) % p\n   \
    \ }\n    if p < 25 {\n        return modp(n - 12, p) % p\n    }\n    if p < 27\
    \ {\n        return modp(n - 13, p) % p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 14, p) % p\n    }\n    if p < 31 {\n        return modp(n - 15, p)\
    \ % p\n    }\n    if p < 33 {\n        return modp(n - 16, p) % p\n    }\n   \
    \ if p < 35 {\n        return modp(n - 17, p) % p\n    }\n    if p < 37 {\n  \
    \      return modp(n - 18, p) % p\n    }\n    if p < 39 {\n        return modp(n\
    \ - 19, p) % p\n    }\n    if p < 41 {\n        return modp(n - 20, p) % p\n \
    \   }\n    if p < 43 {\n        return modp(n - 21, p) % p\n    }\n    if p <\
    \ 45 {\n        return modp(n - 22, p) % p\n    }\n    if p < 47 {\n        return\
    \ modp(n - 23, p) % p\n    }\n    if p < 49 {\n        return modp(n - 24, p)\
    \ % p\n    }\n    if p < 51 {\n        return modp(n - 25, p) % p\n    }\n   \
    \ if p < 53 {\n        return modp(n - 26, p) % p\n    }\n    if p < 55 {\n  \
    \      return modp(n - 27, p) % p\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p) % p\n    }\n    if p < 59 {\n        return modp(n - 29, p) % p\n \
    \   }\n    if p < 61 {\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxohfq06w_test.go:114:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p + modp(n - 2, p))\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074968
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p < 3 {\n        return modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 2, p)\n    }\n    if p < 4 {\n        return modp(n - 3, p) + modp(n - 2,\
    \ p) + modp(n - 1, p) + modp(n - 3, p)\n    }\n    if p < 5 {\n        return\
    \ modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n -\
    \ 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p) + modp(n - 4, p)\
    \ + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 5, p)\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) + modp(n - 5, p) + modp(n - 4,\
    \ p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 6, p)\n   \
    \ }\n    if p < 8 {\n        return modp(n - 7, p) + modp(n - 6, p) + modp(n -\
    \ 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) +\
    \ modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n - 8, p) + modp(n\
    \ - 7, p) + modp(n - 6, p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p)\
    \ + modp(n - 2, p) + modp(n - 1, p) + modp(n - 8, p)\n    }\n    if p < 10 {\n\
    \        return modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6,\
    \ p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n\
    \ - 1, p) + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p) + modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6, p) + modp(n\
    \ - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p)\
    \ + modp(n - 10, p)\n    }\n    if p < 12 {\n        return modp(n - 11, p) +\
    \ modp(n - 10, p) + \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62s7xyt1_test.go:61:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p) + modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074969
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > n {\n        return\
    \ p\n    }\n    if p%2 == 0 {\n        return modp(n - 1, p)\n    }\n    return\
    \ modp(n-1, p) + modp(n-1, p+1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpq3z_zccc_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpq3z_zccc_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=102101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpq3z_zccc_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpq3z_zccc_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpq3z_zccc_test.go:60: expected '%!s(int=4)', got '%!s(int=155)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpq3z_zccc_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=161)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptd2pa534_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p < 3 {\n        return modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 2, p)\n    }\n    if p < 4 {\n        return modp(n - 3, p) + modp(n - 2,\
    \ p) + modp(n - 1, p) + modp(n - 3, p)\n    }\n    if p < 5 {\n        return\
    \ modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n -\
    \ 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p) + modp(n - 4, p)\
    \ + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 5, p)\n    }\n\
    \    if p < 7 {\n        return modp(n - 6, p) + modp(n - 5, p) + modp(n - 4,\
    \ p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 6, p)\n   \
    \ }\n    if p < 8 {\n        return modp(n - 7, p) + modp(n - 6, p) + modp(n -\
    \ 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) +\
    \ modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n - 8, p) + modp(n\
    \ - 7, p) + modp(n - 6, p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p)\
    \ + modp(n - 2, p) + modp(n - 1, p) + modp(n - 8, p)\n    }\n    if p < 10 {\n\
    \        return modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6,\
    \ p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n\
    \ - 1, p) + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p) + modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6, p) + modp(n\
    \ - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p)\
    \ + modp(n - 10, p)\n    }\n    if p < 12 {\n        return modp(n - 11, p) +\
    \ modp(n - 10, p) + \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62s7xyt1_test.go:61:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > 100 {\n      \
    \  return n\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n   \
    \ if p > p {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp6y2y2hzq_test.go:63: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp6y2y2hzq_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp6y2y2hzq_test.go:63: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp6y2y2hzq_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp6y2y2hzq_test.go:63: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp6y2y2hzq_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p + 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=104229)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=3995)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpe8osgk45_test.go:54: expected '%!s(int=4)', got '%!s(int=96)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpe8osgk45_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=110)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpnen1if80_test.go:19 +0x85 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpdsstydhz_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpdsstydhz_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpdsstydhz_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpdsstydhz_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpdsstydhz_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpdsstydhz_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 7 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 10, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 14 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 15 {\n        return modp(n - 13, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 17 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 18 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 17, p)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 21 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 22 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 21, p)\n    }\n    if p < 24 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 25 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 26 {\n        return modp(n - 24, p)\n    }\n    if p < 27 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 29 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 30 {\n        return modp(n - 28, p)\n    }\n    if p < 31 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 32 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 34 {\n        return modp(n - 32, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp495f1ihm_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpo85f92em_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32"
  timestamp: 1660074957
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n,\
    \ p - n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz5pmfd4n_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpz5pmfd4n_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 11 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n    if p < 17 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 29 {\n        return modp(n / 2, p)\n    }\n    if p < 31 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 37 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 43 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 63 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 69 {\n        return modp(n / 2, p)\n    }\n    if p < 73 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 79 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 83 {\n        return modp(n / 2, p)\n    }\n    if p < 89 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 93 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 99 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 103 {\n        return modp(n / 2, p)\n    }\n    if p < 109 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 113 {\n        return modp(n / 2, p)\n   \
    \ }\n    if p < 119 {\n        return modp(n / 2, p)\n    }\n    if p < 123 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 129 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 131 {\n        return modp(n / 2, p)\n    }\n   \
    \ if p < 137 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpagh4jbd5_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + 1\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p == 1 {\n      \
    \  return n + 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n ==\
    \ p {\n        return modp(n - 1, p)\n    }\n    if n == p+1 {\n        return\
    \ modp(n - 2, p)\n    }\n    if n == p+2 {\n        return modp(n - 3, p)\n  \
    \  }\n    if n == p+3 {\n        return modp(n - 4, p)\n    }\n    if n == p+4\
    \ {\n        return modp(n - 5, p)\n    }\n    if n == p+5 {\n        return modp(n\
    \ - 6, p)\n    }\n    if n == p+6 {\n        return modp(n - 7, p)\n    }\n  \
    \  if n == p+7 {\n        return modp(n - 8, p)\n    }\n    if n == p+8 {\n  \
    \      return modp(n - 9, p)\n    }\n    if n == p+9 {\n        return modp(n\
    \ - 10, p)\n    }\n    if n == p+10 {\n        return modp(n - 11, p)\n    }\n\
    \    if n == p+11 {\n        return modp(n - 12, p)\n    }\n    if n == p+12 {\n\
    \        return modp(n - 13, p)\n    }\n    if n == p+13 {\n        return modp(n\
    \ - 14, p)\n    }\n    if n == p+14 {\n        return modp(n - 15, p)\n    }\n\
    \    if n == p+15 {\n        return modp(n - 16, p)\n    }\n    if n == p+16 {\n\
    \        return modp(n - 17, p)\n    }\n    if n == p+17 {\n        return modp(n\
    \ - 18, p)\n    }\n    if n == p+18 {\n        return modp(n - 19, p)\n    }\n\
    \    if n == p+19 {\n        return modp(n - 20, p)\n    }\n    if n == p+20 {\n\
    \        return modp(n - 21, p)\n    }\n    if n == p+21 {\n        return modp(n\
    \ - 22, p)\n    }\n    if n == p+22 {\n        return modp(n - 23, p)\n    }\n\
    \    if n == p+23 {\n        return modp(n - 24, p)\n    }\n    if n == p+24 {\n\
    \        return modp(n - 25, p)\n    }\n    if n == p+25 {\n        return modp(n\
    \ - 26, p)\n    }\n    if n == p+26 {\n        return modp(n - 27, p)\n    }\n\
    \    if n == p+27 {\n        return modp(n - 28, p)\n    }\n    if n == p+28 {\n\
    \        return modp(n - 29, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe877ilz1_test.go:125:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p > p {\n        return modp(n / 2, p)\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    return modp(n\
    \ / 2, p) + modp((n / 2)%p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1khofkz3_test.go:57: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1khofkz3_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1414)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1khofkz3_test.go:57: expected '%!s(int=8)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp1khofkz3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=404)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp1khofkz3_test.go:57: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp1khofkz3_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp50f3gwu4_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp50f3gwu4_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp50f3gwu4_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp50f3gwu4_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp50f3gwu4_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp50f3gwu4_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - p, p)\n    }\n   \
    \ if p < p {\n        return modp(n, p - p)\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n > p {\n       \
    \ return modp(n - p, p)\n    }\n    if n < p {\n        return modp(n, p - p)\n\
    \    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0x3?, 0x0?)\n\
    \t/tmp/tmp01cmtebb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp01cmtebb_test.go:48 +0x55 fp=0xc0"
  timestamp: 1660074957
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 3, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 3 {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 7 {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 11 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) % p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p < 16 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) % p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < 20 {\n        return modp(n - 1, p) % p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) % p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) % p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 24 {\n        return modp(n - 1, p) %\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) % p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) % p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) % p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) % p\n    }\n    if p < 29 {\n        return modp(n - 1, p) % p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) % p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) % p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) % p\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr97i6u7q_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return p\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp3y5yt5t8_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp3y5yt5t8_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp3y5yt5t8_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp3y5yt5t8_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp3y5yt5t8_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp3y5yt5t8_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 5 {\n        return modp(n - 1, p - 3)\n    }\n    if p < 7\
    \ {\n        return modp(n - 1, p - 5)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 1, p - 7)\n    }\n    if p < 13 {\n        return modp(n - 1, p - 11)\n\
    \    }\n    if p < 17 {\n        return modp(n - 1, p - 13)\n    }\n    if p <\
    \ 19 {\n        return modp(n - 1, p - 17)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p - 19)\n    }\n    if p < 29 {\n        return modp(n - 1, p -\
    \ 23)\n    }\n    if p < 31 {\n        return modp(n - 1, p - 29)\n    }\n   \
    \ if p < 37 {\n        return modp(n - 1, p - 31)\n    }\n    if p < 41 {\n  \
    \      return modp(n - 1, p - 37)\n    }\n    if p < 43 {\n        return modp(n\
    \ - 1, p - 41)\n    }\n    if p < 47 {\n        return modp(n - 1, p - 43)\n \
    \   }\n    if p < 53 {\n        return modp(n - 1, p - 47)\n    }\n    if p <\
    \ 59 {\n        return modp(n - 1, p - 53)\n    }\n    if p < 63 {\n        return\
    \ modp(n - 1, p - 59)\n    }\n    if p < 69 {\n        return modp(n - 1, p -\
    \ 63)\n    }\n    if p < 73 {\n        return modp(n - 1, p - 69)\n    }\n   \
    \ if p < 79 {\n        return modp(n - 1, p - 73)\n    }\n    if p < 83 {\n  \
    \      return modp(n - 1, p - 79)\n    }\n    if p < 89 {\n        return modp(n\
    \ - 1, p - 83)\n    }\n    if p < 97 {\n        return modp(n - 1, p - 89)\n \
    \   }\n    if p < 101 {\n        return modp(n - 1, p - 97)\n    }\n    if p <\
    \ 107 {\n        return modp(n - 1, p - 101)\n    }\n    if p < 113 {\n      \
    \  return modp(n - 1, p - 107)\n    }\n    if p < 119 {\n        return modp(n\
    \ - 1, p - 113)\n    }\n    if p < 127 {\n        return modp(n - 1, p - 119)\n\
    \    }\n    if p < 131 {\n        return modp(n - 1, p - 127)\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphsh7tam7_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpvr_xwch__test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpvr_xwch__test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp3mdpyp2y_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp3mdpyp2y_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p*2 + 1)\n\
    \    }\n    return modp(n - 1, p*2 + 2)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp91yeenn3_test.go:54: expected '%!s(int=3)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=-55297703936)'\n    --- FAIL: TestModp/test_num__3\
    \ (0.00s)\n        tmp91yeenn3_test.go:54: expected '%!s(int=8)', got '%!s(int=50)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=-7078106103808)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmp91yeenn3_test.go:54: expected '%!s(int=4)', got '%!s(int=3758096382)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=7516192766)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == p {\n        return n\n    }\n    if p < p {\n\
    \        return modp(n - 1, p)\n    }\n    if p > p {\n        return modp(n,\
    \ p - 1)\n    }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n    }\n \
    \   return modp(n / 2, p / 2)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp3529vzf2_test.go:69: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp3529vzf2_test.go:69: expected\
    \ '%!s(int=2)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp3529vzf2_test.go:69: expected '%!s(int=8)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp3529vzf2_test.go:69: expected\
    \ '%!s(int=1)', got '%!s(int=50)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp3529vzf2_test.go:69: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp3529vzf2_test.go:69: expected\
    \ '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
