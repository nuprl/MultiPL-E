name: HumanEval_158_find_max
language: go_test.go
prompt: "package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Write a function that accepts a list of strings.\n// The list contains different\
  \ words. Return the word with maximum number\n// of unique characters. If multiple\
  \ strings have maximum number of unique\n// characters, return the one which comes\
  \ first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"\
  string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"\
  })\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\
  \nfunc find_max(words []string) string {\n"
tests: "func TestFind_Max(t *testing.T) {\n  candidate := find_max\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]string{\"name\", \"of\", \"string\"}), expected: \"\
  string\" },\n     { actual: candidate([]string{\"name\", \"enam\", \"game\"}), expected:\
  \ \"enam\" },\n     { actual: candidate([]string{\"aaaaaaa\", \"bb\", \"cc\"}),\
  \ expected: \"aaaaaaa\" },\n     { actual: candidate([]string{\"abc\", \"cba\"}),\
  \ expected: \"abc\" },\n     { actual: candidate([]string{\"play\", \"this\", \"\
  game\", \"of\", \"footbott\"}), expected: \"footbott\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"gonna\", \"rock\"}), expected: \"gonna\" },\n     { actual: candidate([]string{\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"}), expected: \"nation\" },\n     { actual:\
  \ candidate([]string{\"this\", \"is\", \"a\", \"prrk\"}), expected: \"this\" },\n\
  \     { actual: candidate([]string{\"b\"}), expected: \"b\" },\n     { actual: candidate([]string{\"\
  play\", \"play\", \"play\"}), expected: \"play\" },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    result := \"\"\n    max := 0\n    for _, word := range words {\n\
    \        count := 0\n        for _, c := range word {\n            count += unicode.IsLetter(c)\n\
    \        }\n        if count > max {\n            result = word\n            max\
    \ = count\n        }\n    }\n    return result\n}\n", "    // Write code here\n\
    \    \n    return \"\"\n}\n", "    max := 0\n    word := \"\"\n    for _, w :=\
    \ range words {\n        count := 0\n        for _, c := range w {\n         \
    \   if c != ' ' {\n                count++\n            }\n        }\n       \
    \ if count > max {\n            max = count\n            word = w\n        }\n\
    \    }\n    return word\n}\n", "    max := 0\n    word := \"\"\n    for _, w :=\
    \ range words {\n        c := len(w)\n        if c > max {\n            max =\
    \ c\n            word = w\n        }\n    }\n    return word\n}\n", "    max :=\
    \ 0\n    word := \"\"\n    for _, word := range words {\n        count := 0\n\
    \        for _, letter := range word {\n            count += letterCount[letter]\n\
    \        }\n        if count > max {\n            max = count\n            word\
    \ = word\n        }\n    }\n    return word\n}\n", "    result := \"\"\n    count\
    \ := 0\n    for _, word := range words {\n        count += len(word)\n       \
    \ if count > len(result) {\n            result = word\n        }\n    }\n    return\
    \ result\n}\n", "    count := make(map[string]int)\n    for _, word := range words\
    \ {\n        count[word]++\n    }\n    max := 0\n    word := \"\"\n    for word,\
    \ count := range count {\n        if count > max {\n            max = count\n\
    \        }\n    }\n    if max == 0 {\n        return \"\"\n    }\n    for word,\
    \ count := range count {\n        if count == max {\n            return word\n\
    \        }\n    }\n    return \"\"\n}\n", "    max := 0\n    word := \"\"\n  \
    \  for _, w := range words {\n        c := len(w)\n        if c > max {\n    \
    \        max = c\n            word = w\n        }\n    }\n    return word\n}\n",
  "    result := \"\"\n    max := 0\n    for _, word := range words {\n        count\
    \ := 0\n        for _, letter := range word {\n            if letter == 'a' ||\
    \ letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n       \
    \         count++\n            }\n        }\n        if count > max {\n      \
    \      result = word\n            max = count\n        }\n    }\n    return result\n\
    }\n", "    count := make(map[string]int)\n    for _, word := range words {\n \
    \       count[word]++\n    }\n    max := 0\n    word := \"\"\n    for word, count\
    \ := range count {\n        if count > max {\n            max = count\n      \
    \  }\n    }\n    if max > 0 {\n        return word\n    }\n    for _, word :=\
    \ range words {\n        if count[word] == max {\n            return word\n  \
    \      }\n    }\n    return \"\"\n}\n", "    max := 0\n    i := 0\n    for _,\
    \ word := range words {\n        count := 0\n        for _, letter := range word\
    \ {\n            if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n                count++\n            }\n        }\n\
    \        if count > max {\n            max = count\n            i = word\n   \
    \     }\n    }\n    return i\n}\n", "    sort.Strings(words)\n    max := words[0]\n\
    \    for _, w := range words {\n        count := strings.Count(w, max)\n     \
    \   if count > 1 {\n            return w\n        }\n        if count > len(max)\
    \ {\n            max = w\n        }\n    }\n    return max\n}\n", "    max :=\
    \ 0\n    word := \"\"\n    for _, word := range words {\n        count := 0\n\
    \        for _, letter := range word {\n            if letter == word[count] {\n\
    \                count++\n            } else {\n                break\n      \
    \      }\n        }\n        if count > max {\n            max = count\n     \
    \       word = word\n        }\n    }\n    return word\n}\n", "    max := 0\n\
    \    index := -1\n    for i, word := range words {\n        count := 0\n     \
    \   for _, letter := range word {\n            count += letterCount[letter]\n\
    \        }\n        if count > max {\n            max = count\n            index\
    \ = i\n        }\n    }\n    return words[index]\n}\n", "    sort.Strings(words)\n\
    \    max := words[0]\n    for _, word := range words {\n        count := 0\n \
    \       for _, c := range word {\n            count += unicode.IsLetter(c)\n \
    \       }\n        if count > len(max) {\n            max = word\n        }\n\
    \    }\n    return max\n}\n", "    sort.Strings(words)\n    var maxCount int\n\
    \    var maxWord string\n    for _, word := range words {\n        count := strings.Count(word,\
    \ \"\")\n        if count > maxCount {\n            maxCount = count\n       \
    \     maxWord = word\n        }\n    }\n    return maxWord\n}\n", "    max :=\
    \ 0\n    index := 0\n    for _, word := range words {\n        count := 0\n  \
    \      for _, letter := range word {\n            if letter == 'a' {\n       \
    \         count++\n            }\n        }\n        if count > max {\n      \
    \      max = count\n            index = word\n        }\n    }\n    return words[index]\n\
    }\n", "    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    count := make(map[string]int)\n    for _, word := range words {\n        count[word]++\n\
    \    }\n    max := 0\n    min := len(words[0])\n    for _, word := range words\
    \ {\n        if count[word] > max {\n            max = count[word]\n        }\n\
    \        if count[word] < min {\n            min = count[word]\n        }\n  \
    \  }\n    for _, word := range words {\n        if count[word] == max {\n    \
    \        return word\n        }\n    }\n    return words[0]\n}\n", "    max :=\
    \ 0\n    word := \"\"\n    for _, word := range words {\n        count := 0\n\
    \        for _, c := range word {\n            if c != word[len(word)-1] {\n \
    \               count++\n            }\n        }\n        if count > max {\n\
    \            max = count\n            word = word\n        }\n    }\n    return\
    \ word\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
