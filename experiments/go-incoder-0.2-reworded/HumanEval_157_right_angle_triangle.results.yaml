language: go_test.go
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return b ==\
    \ c+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return b == c+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return b ==\
    \ c+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return b == c+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return b ==\
    \ c+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return b == c+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return b\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpte0rs084_test.go:131:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The sides a, b, and c form a right-angled triangle\
    \ if and only if\n    // the sum of the angles of the three sides is 180 degrees\
    \ or less.\n    // The angles are given by acos(a / sqrt(a^2 + b^2 + c^2)).\n\
    \    // The angles are measured in radians.\n    // The formula for the angles\
    \ is as follows:\n    // acos(a / sqrt(a^2 + b^2 + c^2)) = arccos((a * b + c *\
    \ c) / (sqrt(a^2 + b^2)))\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2)))\
    \ = arccos((a * b + c * c) / (sqrt(a^2 + b^2 + c^2)))\n    // arccos((a * b +\
    \ c * c) / (sqrt(a^2 + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c\
    \ * c) / (sqrt(a^2 + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c *\
    \ c) / (sqrt(a^2 + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c)\
    \ / (sqrt(a^2 + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) /\
    \ (sqrt(a^2 + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2\
    \ + b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 +\
    \ b^2 + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2\
    \ + c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2 +\
    \ c^2))) * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2 + c^2)))\
    \ * 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2 + c^2))) *\
    \ 180 / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2 + c^2))) * 180\
    \ / pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^2 + c^2))) * 180 /\
    \ pi = 180\n    // arccos((a * b + c * c) / (sqrt(a^2 + b^\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxpw7mke6_test.go:39:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The triangle is right if all three sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    // The triangle is right if\
    \ all three sides are equal\n    if a == c {\n        return b == c\n    }\n \
    \   // The triangle is right if all three sides are equal\n    if b == c {\n \
    \       return a == b\n    }\n    // The triangle is right if all three sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    // The triangle\
    \ is right if all three sides are equal\n    if a == c {\n        return b ==\
    \ c\n    }\n    // The triangle is right if all three sides are equal\n    if\
    \ b == c {\n        return a == b\n    }\n    // The triangle is right if all\
    \ three sides are equal\n    if a == b {\n        return a == c\n    }\n    //\
    \ The triangle is right if all three sides are equal\n    if a == c {\n      \
    \  return b == c\n    }\n    // The triangle is right if all three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    // The triangle is right if\
    \ all three sides are equal\n    if a == b {\n        return a == c\n    }\n \
    \   // The triangle is right if all three sides are equal\n    if a == c {\n \
    \       return b == c\n    }\n    // The triangle is right if all three sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n    // The triangle\
    \ is right if all three sides are equal\n    if a == b {\n        return a ==\
    \ c\n    }\n    // The triangle is right if all three sides are equal\n    if\
    \ a == c {\n        return b == c\n    }\n    // The triangle is right if all\
    \ three sides are equal\n    if b == c {\n        return a == b\n    }\n    //\
    \ The triangle is right if all three sides are equal\n    if a == b {\n      \
    \  return a == c\n    }\n    // The triangle is right if all three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n    // The triangle is right if\
    \ all three sides are equal\n    if b == c {\n        return a == b\n    }\n \
    \   // The triangle is right if all three sides are equal\n    if a == b {\n \
    \       return a == c\n    }\n    // The triangle is right if all three sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n    // The triangle\
    \ is right if all three sides are equal\n    if b == c {\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgbecewgt_test.go:101:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9iyv2zig_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9iyv2zig_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp9iyv2zig_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp9iyv2zig_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp9iyv2zig_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp9iyv2zig_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp9iyv2zig_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp9iyv2zig_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp9iyv2zig_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > b &&\
    \ a > c:\n        return true\n    case b > c && b > a:\n        return true\n\
    \    case c > a && c > b:\n        return true\n    default:\n        return false\n\
    \    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp7i_labd1_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp7i_labd1_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp7i_labd1_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n    if a == b {\n        return c\
    \ == a\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n\
    \        return a == b\n    }\n    if a == b+c {\n        return a == c\n    }\n\
    \    if a == c+b {\n        return b == c\n    }\n    if b == c+a {\n        return\
    \ a == b\n    }\n    if a == b+c && b == c+a {\n        return a == b\n    }\n\
    \    if a == c+b && a == c+a {\n        return b == c\n    }\n    if b == c+a\
    \ && b == c+b {\n        return a == c\n    }\n    if a == b+c && a == c+b {\n\
    \        return a == c\n    }\n    if a == c+b && a == c+a {\n        return b\
    \ == c\n    }\n    if b == c+a && b == c+b {\n        return a == c\n    }\n \
    \   return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpeeshbdvc_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpeeshbdvc_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpeeshbdvc_test.go:84: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpeeshbdvc_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpeeshbdvc_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpeeshbdvc_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpeeshbdvc_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpeeshbdvc_test.go:84:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpg490t9d1_test.go:83: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpg490t9d1_test.go:83:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpg490t9d1_test.go:83: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpg490t9d1_test.go:83:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpg490t9d1_test.go:83: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpg490t9d1_test.go:83:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpg490t9d1_test.go:83: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpg490t9d1_test.go:83:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpg490t9d1_test.go:83: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx7e2rpe1_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx7e2rpe1_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpx7e2rpe1_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpx7e2rpe1_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpx7e2rpe1_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpx7e2rpe1_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return false\n     \
    \   } else {\n            return true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpu_3vmfx8_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpu_3vmfx8_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpu_3vmfx8_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpu_3vmfx8_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpu_3vmfx8_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpu_3vmfx8_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpu_3vmfx8_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpu_3vmfx8_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    if a > b {\n        if a > c {\n            return false\n \
    \       }\n        return true\n    }\n    \n    if b > c {\n        return true\n\
    \    }\n    \n    if a > c {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpcpe96u2e_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpcpe96u2e_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpcpe96u2e_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpcpe96u2e_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpcpe96u2e_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return c == a\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == a\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == a\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == a\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == a\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ b == a\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return a == a\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == a\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return b == a\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return a == a\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == a\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return b == a\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return a == a\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == a\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return b == a\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ a == a\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == a\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return b == a\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == a\n    }\n\n    // \n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq8bg9wul_test.go:149:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a >\
    \ b+c {\n        return false\n    }\n    if b > c+a {\n        return false\n\
    \    }\n    if c > a+b {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpztqhzssq_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpztqhzssq_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpztqhzssq_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpztqhzssq_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-zero length\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return a == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return a == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return a == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == c\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcc71f_px_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return\
    \ a == b || a == c || b == c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpixjco42t_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpixjco42t_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpixjco42t_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpixjco42t_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpixjco42t_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == b {\n        return c == b\n    }\n\n    // Check that the three sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c-a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == a-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return c == b-a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return c == b-a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == a-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return c == b-a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return c == b-a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == a-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return c == b-a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return c == b-a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == a-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return c == b-a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return c == b-a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == a-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return c == b-a\n    }\n\n    // Check that the three sides are\
    \ equal\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvy1q0to__test.go:134:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-zero\n    if\
    \ a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b {\n        return c == b\n    }\n\n\
    \    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_43_b1ji_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a == b {\n        return\
    \ c == a\n    }\n    \n    if a == c {\n        return b == c\n    }\n    \n \
    \   if b == c {\n        return a == b\n    }\n    \n    if a == b {\n       \
    \ return c == a\n    }\n    \n    if a == c {\n        return b == c\n    }\n\
    \    \n    if b == c {\n        return a == b\n    }\n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_y5445_i_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_y5445_i_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp_y5445_i_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp_y5445_i_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp_y5445_i_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp_y5445_i_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp_y5445_i_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp_y5445_i_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b && b == c {\n        return true\n    }\n    if a == c &&\
    \ c == b {\n        return true\n    }\n    if a > b {\n        if a > c {\n \
    \           return false\n        }\n        return true\n    }\n    if b > c\
    \ {\n        if b > a {\n            return false\n        }\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpg1h3ukbc_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpg1h3ukbc_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpg1h3ukbc_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpg1h3ukbc_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpg1h3ukbc_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpg1h3ukbc_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpg1h3ukbc_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return c == a\n    }\n    if a == c {\n     \
    \   return b == a\n    }\n    if b == c {\n        return a == b\n    }\n    if\
    \ a == b+c {\n        return a == c\n    }\n    if a == c-b {\n        return\
    \ a == b\n    }\n    if b == c-a {\n        return a == b\n    }\n    if c ==\
    \ a-b {\n        return a == b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpztidrlyw_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpztidrlyw_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpztidrlyw_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpztidrlyw_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpztidrlyw_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpztidrlyw_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpztidrlyw_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpztidrlyw_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b || a == c || b == c {\n        return true\n    }\n    if\
    \ a > b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp_v8h4vcq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp_v8h4vcq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp_v8h4vcq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp_v8h4vcq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp_v8h4vcq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp_v8h4vcq_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp_v8h4vcq_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp_v8h4vcq_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp_v8h4vcq_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a > c {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n \
    \ candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpyyppvviv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpyyppvviv_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpyyppvviv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpyyppvviv_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpyyppvviv_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpyyppvviv_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    return a ==\
    \ b == c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkkx9_n7_test.go:30:22: invalid operation: a == b == c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a > c {\n        return false\n \
    \   }\n    if b == c {\n        return true\n    }\n    if a == c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if b == a {\n\
    \        return false\n    }\n    if c == a {\n        return false\n    }\n \
    \   return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp_7l8ynsy_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp_7l8ynsy_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp_7l8ynsy_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp_7l8ynsy_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp_7l8ynsy_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp_7l8ynsy_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // The hypotenuse of a right angle triangle is equal to the\
    \ sum of the\n    // lengths of the three sides.\n    hypotenuse := a + b + c\n\
    \    \n    // The area of a right angle triangle is equal to the hypotenuse divided\n\
    \    // by two.\n    area := hypotenuse / 2\n    \n    // If the area is greater\
    \ than 90 degree, return false.\n    if area > 90 {\n        return false\n  \
    \  }\n    \n    // If the area is less than 90 degree, return true.\n    if area\
    \ < 90 {\n        return true\n    }\n    \n    // If the area is equal to 90\
    \ degree, return true.\n    if area == 90 {\n        return true\n    }\n    \n\
    \    // If the area is greater than 180 degree, return false.\n    if area > 180\
    \ {\n        return false\n    }\n    \n    // If the area is less than 180 degree,\
    \ return true.\n    if area < 180 {\n        return true\n    }\n    \n    //\
    \ If the area is equal to 180 degree, return true.\n    if area == 180 {\n   \
    \     return true\n    }\n    \n    // If the area is greater than 270 degree,\
    \ return false.\n    if area > 270 {\n        return false\n    }\n    \n    //\
    \ If the area is less than 270 degree, return true.\n    if area < 270 {\n   \
    \     return true\n    }\n    \n    // If the area is equal to 270 degree, return\
    \ true.\n    if area == 270 {\n        return true\n    }\n    \n    // If the\
    \ area is greater than 360 degree, return false.\n    if area > 360 {\n      \
    \  return false\n    }\n    \n    // If the area is less than 360 degree, return\
    \ true.\n    if area < 360 {\n        return true\n    }\n    \n    // If the\
    \ area is equal to 360 degree, return true.\n    if area == 360 {\n        return\
    \ true\n    }\n    \n    // If the area is greater than 45 degree, return false.\n\
    \    if area > 45 {\n        return false\n    }\n    \n    // If the area is\
    \ less than 45 degree, return true.\n    if area < 45 {\n        return true\n\
    \    }\n    \n    // If the area is equal to 45 degree, return true.\n    if area\
    \ == 45 {\n        return true\n    }\n    \n    // If the area is greater than\
    \ 135 degree, return false.\n    if area > 135 {\n        return false\n    }\n\
    \    \n    // If the area is less than 135 degree, return true.\n    if area <\
    \ 135 {\n        return true\n    }\n    \n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgtx797jr_test.go:116:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a == b {\n        return\
    \ a == c\n    }\n    \n    if a == c {\n        return b == c\n    }\n    \n \
    \   if b == c {\n        return a == b\n    }\n    \n    if a > b {\n        if\
    \ a > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if b > c {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0xt3s07n_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp0xt3s07n_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp0xt3s07n_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp0xt3s07n_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp0xt3s07n_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp0xt3s07n_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp0xt3s07n_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp0xt3s07n_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073592
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_smwdvt_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return c == b\n    }\n    if a ==\
    \ c {\n        return b == c\n    }\n    if b == c {\n        return a == c\n\
    \    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpp0s0cx0c_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpp0s0cx0c_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpp0s0cx0c_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpp0s0cx0c_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpp0s0cx0c_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpp0s0cx0c_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpp0s0cx0c_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpp0s0cx0c_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return false\n       \
    \ }\n        return true\n    }\n    if b > c {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppufhkx93_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmppufhkx93_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a + b > c {\n        return false\n    }\n    if a + c > b {\n       \
    \ return false\n    }\n    if b + c > a {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp5l3erjnw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp5l3erjnw_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp5l3erjnw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp5l3erjnw_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp5l3erjnw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp5l3erjnw_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return false\n       \
    \ }\n        return true\n    }\n    if b > c {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppufhkx93_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmppufhkx93_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmppufhkx93_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpq9oxyfs9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq9oxyfs9_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpq9oxyfs9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpq9oxyfs9_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpq9oxyfs9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpq9oxyfs9_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpoqnxzz0j_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpoqnxzz0j_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpoqnxzz0j_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case c > a + b:\n        return false\n\
    \    default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpv7xkqxyc_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpv7xkqxyc_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpv7xkqxyc_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpv7xkqxyc_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a >\
    \ b+c {\n        return false\n    }\n    if b > c+a {\n        return false\n\
    \    }\n    if c > a+b {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpryflm_pb_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpryflm_pb_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpryflm_pb_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpryflm_pb_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpryflm_pb_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return c == b\n    }\n    if a == c {\n     \
    \   return b == c\n    }\n    if b == c {\n        return a == b\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpo880hl0z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpo880hl0z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpo880hl0z_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpo880hl0z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpo880hl0z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpo880hl0z_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpo880hl0z_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpo880hl0z_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeucj_l31_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The formula to calculate the area of a triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle is (a + b + c) / 2\n    // The\
    \ formula to calculate the area of a right angle triangle is (a + b + c) / 2\n\
    \    // The formula to calculate the area of a right angle triangle is (a + b\
    \ + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle is (a + b + c) / 2\n    // The\
    \ formula to calculate the area of a right angle triangle is (a + b + c) / 2\n\
    \    // The formula to calculate the area of a right angle triangle is (a + b\
    \ + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle is (a + b + c) / 2\n    // The\
    \ formula to calculate the area of a right angle triangle is (a + b + c) / 2\n\
    \    // The formula to calculate the area of a right angle triangle is (a + b\
    \ + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfwo_keot_test.go:46:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if any of a, b or c is zero\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // Check if any\
    \ of a, b or c is negative\n    if a < 0 || b < 0 || c < 0 {\n        return false\n\
    \    }\n\n    // Check if any of a, b or c is greater than the sum of all sides\n\
    \    if a + b > c || a + c > b || b + c > a {\n        return false\n    }\n\n\
    \    // Check if any of a, b or c is greater than the product of all sides\n \
    \   if a * b > c || a * c > b || b * c > a {\n        return false\n    }\n\n\
    \    // If all checks passed, return true\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpu1b4sec8_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpu1b4sec8_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpu1b4sec8_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpu1b4sec8_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpu1b4sec8_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpu1b4sec8_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The formula to calculate the area of a triangle\
    \ is given by \n    // A = 4 * (a + b + c) / 2.\n    // The formula to calculate\
    \ the area of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 +\
    \ C^2)\n    // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^2)\n    // where A, B and C are the lengths\
    \ of the three sides of the triangle.\n    // The formula to calculate the area\
    \ of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 + C^2)\n \
    \   // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^2)\n    // where A, B and C are the lengths\
    \ of the three sides of the triangle.\n    // The formula to calculate the area\
    \ of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 + C^2)\n \
    \   // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^2)\n    // where A, B and C are the lengths\
    \ of the three sides of the triangle.\n    // The formula to calculate the area\
    \ of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 + C^2)\n \
    \   // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^2)\n    // where A, B and C are the lengths\
    \ of the three sides of the triangle.\n    // The formula to calculate the area\
    \ of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 + C^2)\n \
    \   // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^2)\n    // where A, B and C are the lengths\
    \ of the three sides of the triangle.\n    // The formula to calculate the area\
    \ of a right angle triangle is given by \n    // A = sqrt(A^2 + B^2 + C^2)\n \
    \   // where A, B and C are the lengths of the three sides of the triangle.\n\
    \    // The formula to calculate the area of a right angle triangle is given by\
    \ \n    // A = sqrt(A^2 + B^2 + C^\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3jtxqfzm_test.go:55:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    \n    // Check if all sides are equal\n    if a ==\
    \ b {\n        return a == c\n    }\n    if a == c {\n        return b == c\n\
    \    }\n    if b == c {\n        return a == b\n    }\n    \n    // Check if any\
    \ two sides are equal\n    if a == b {\n        return a == c\n    }\n    if a\
    \ == c {\n        return b == c\n    }\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // Check if any two sides are equal\n    if a == b {\n     \
    \   return a == c\n    }\n    if a == c {\n        return b == c\n    }\n    if\
    \ b == c {\n        return a == b\n    }\n    \n    // Check if any two sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n\
    \        return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\
    \    \n    // Check if any two sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c\
    \ {\n        return a == b\n    }\n    \n    // Check if any two sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    if a == c {\n        return\
    \ b == c\n    }\n    if b == c {\n        return a == b\n    }\n    \n    // Check\
    \ if any two sides are equal\n    if a == b {\n        return a == c\n    }\n\
    \    if a == c {\n        return b == c\n    }\n    if b == c {\n        return\
    \ a == b\n    }\n    \n    // Check if any two sides are equal\n    if a == b\
    \ {\n        return a == c\n    }\n    if a == c {\n        return b == c\n  \
    \  }\n    if b == c {\n        return a == b\n    }\n    \n    // Check if any\
    \ two sides are equal\n    if a == b {\n        return a == c\n    }\n    if a\
    \ == c {\n        return b == c\n    }\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // Check if any two sides are equal\n    if a == b {\n     \
    \   return a == c\n    }\n    if a == c {\n        return b == c\n    }\n    if\
    \ b == c {\n        return a == b\n    }\n    \n    // Check if any two sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n\
    \        return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\
    \    \n    // Check if any two sides are equal\n    if a == b {\n        return\
    \ a == c\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9zn80k0u_test.go:143:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are positive\n    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the side\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfm4e3b8f_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b+c:\n        return false\n    case\
    \ b > a+c:\n        return false\n    case c > a+b:\n        return false\n  \
    \  default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmplbyp7i8k_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmplbyp7i8k_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmplbyp7i8k_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmplbyp7i8k_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > c &&\
    \ b > c:\n        return true\n    case a > c && b < c:\n        return false\n\
    \    case a < c && b > c:\n        return false\n    case a < c && b < c:\n  \
    \      return true\n    default:\n        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpf64l1j99_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpf64l1j99_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpf64l1j99_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case c > a + b:\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpexyix_d4_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpexyix_d4_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpexyix_d4_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpexyix_d4_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > b {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi_olsijm_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi_olsijm_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpi_olsijm_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpi_olsijm_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpi_olsijm_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpi_olsijm_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The formula to calculate the area of a triangle\
    \ is \n    // A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    //\
    \ C = 2 * (b + c) * (b + c)\n    // Area = A * B * C\n    // The area of a right\
    \ angle triangle is \n    // A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) *\
    \ (a + c)\n    // C = 2 * (b + c) * (b + c)\n    // Area = A * B * C\n    // The\
    \ area of a right angle triangle is \n    // A = 4 * (a + b + c) / 2\n    // B\
    \ = 2 * (a + b) * (a + c)\n    // C = 2 * (b + c) * (b + c)\n    // Area = A *\
    \ B * C\n    // The area of a right angle triangle is \n    // A = 4 * (a + b\
    \ + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    // C = 2 * (b + c) * (b + c)\n\
    \    // Area = A * B * C\n    // The area of a right angle triangle is \n    //\
    \ A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    // C = 2 * (b\
    \ + c) * (b + c)\n    // Area = A * B * C\n    // The area of a right angle triangle\
    \ is \n    // A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    //\
    \ C = 2 * (b + c) * (b + c)\n    // Area = A * B * C\n    // The area of a right\
    \ angle triangle is \n    // A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) *\
    \ (a + c)\n    // C = 2 * (b + c) * (b + c)\n    // Area = A * B * C\n    // The\
    \ area of a right angle triangle is \n    // A = 4 * (a + b + c) / 2\n    // B\
    \ = 2 * (a + b) * (a + c)\n    // C = 2 * (b + c) * (b + c)\n    // Area = A *\
    \ B * C\n    // The area of a right angle triangle is \n    // A = 4 * (a + b\
    \ + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    // C = 2 * (b + c) * (b + c)\n\
    \    // Area = A * B * C\n    // The area of a right angle triangle is \n    //\
    \ A = 4 * (a + b + c) / 2\n    // B = 2 * (a + b) * (a + c)\n    // C = 2 * (b\
    \ + c) * (b + c)\n    // Area = A * B * C\n    // \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyj_b0wv6_test.go:69:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        } else {\n            return true\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp93ysfw64_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp93ysfw64_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp93ysfw64_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ false\n    }\n    // Check that the sides are equal\n    if a == c {\n     \
    \   return false\n    }\n    // Check that the sides are equal\n    if b == c\
    \ {\n        return false\n    }\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return false\n    }\n    // Check that the sides are equal\n\
    \    if a == c-b {\n        return false\n    }\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return false\n    }\n    // Check that the\
    \ sides are equal\n    if a == c-b {\n        return false\n    }\n    // Check\
    \ that the sides are equal\n    if a == b+c {\n        return false\n    }\n \
    \   // Check that the sides are equal\n    if a == c-b {\n        return false\n\
    \    }\n    // Check that the sides are equal\n    if a == b+c {\n        return\
    \ false\n    }\n    // Check that the sides are equal\n    if a == c-b {\n   \
    \     return false\n    }\n    // Check that the sides are equal\n    if a ==\
    \ b+c {\n        return false\n    }\n    // Check that the sides are equal\n\
    \    if a == c-b {\n        return false\n    }\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return false\n    }\n    // Check that the\
    \ sides are equal\n    if a == c-b {\n        return false\n    }\n    // Check\
    \ that the sides are equal\n    if a == b+c {\n        return false\n    }\n \
    \   // Check that the sides are equal\n    if a == c-b {\n        return false\n\
    \    }\n    // Check that the sides are equal\n    if a == b+c {\n        return\
    \ false\n    }\n    // Check that the sides are equal\n    if a == c-b {\n   \
    \     return false\n    }\n    // Check that the sides are equal\n    if a ==\
    \ b+c {\n        return false\n    }\n    // Check that the sides are equal\n\
    \    if a == c-b {\n        return false\n    }\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return false\n    }\n    // Check that the\
    \ sides are equal\n    if a == c-b {\n        return false\n    }\n    // Check\
    \ that the sides are equal\n    if a == b+c {\n        return false\n    }\n \
    \   // Check that the sides are equal\n    if a == c-b {\n        return false\n\
    \    }\n    // Check that the sides are equal\n    if \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa06qtwbr_test.go:128:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > b +\
    \ c:\n        return false\n    case a > c + b:\n        return false\n    case\
    \ b > c + a:\n        return false\n    case b > a + c:\n        return false\n\
    \    case c > a + b:\n        return false\n    case c > b + a:\n        return\
    \ false\n    default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpcagfa35w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpcagfa35w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpcagfa35w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpcagfa35w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return true\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return false\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp3wk4wxei_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp3wk4wxei_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    d := b * b - 4 * a * c\n    if d < 0 {\n        return false\n\
    \    }\n    \n    s := (-b + d) / (2 * a)\n    if s < 0 {\n        return false\n\
    \    }\n    \n    t := (-b - d) / (2 * a)\n    if t < 0 {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmphecn913s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmphecn913s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmphecn913s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmphecn913s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmphecn913s_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmphecn913s_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ c {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > b {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ c {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > b {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4dyjiz6k_test.go:164:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a ==\
    \ b {\n        return c == a\n    }\n    if a == c {\n        return b == c\n\
    \    }\n    if b == c {\n        return a == b\n    }\n    return false\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp2rx18rw__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp2rx18rw__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp2rx18rw__test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp2rx18rw__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp2rx18rw__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp2rx18rw__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp2rx18rw__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp2rx18rw__test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp2rx18rw__test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqk6exnxt_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    d := b * b - 4 * a * c\n  \
    \  if d < 0 {\n        return false\n    }\n    \n    s := (-b + d) / (2 * a)\n\
    \    if s <= 0 {\n        return false\n    }\n    \n    t := (-b - d) / (2 *\
    \ a)\n    if t <= 0 {\n        return false\n    }\n    \n    return true\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // if any of a, b or c is greater than the other two, return\
    \ false\n    if a > b {\n        return false\n    }\n    if a > c {\n       \
    \ return false\n    }\n    if b > c {\n        return false\n    }\n\n    // if\
    \ all three sides are equal, return true\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n\n    // if all three sides are equal, return true\n   \
    \ if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all\
    \ three sides are equal, return true\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all three sides are equal, return true\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all three\
    \ sides are equal, return true\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all three sides are equal, return true\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all three\
    \ sides are equal, return true\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all three sides are equal, return true\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all three\
    \ sides are equal, return true\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all three sides are equal, return true\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all three\
    \ sides are equal, return true\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all three sides are equal, return true\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // if all three\
    \ sides are equal, return true\n    if a == b {\n        return true\n    }\n\
    \    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n\n    // if all \nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzsbp_6rs_test.go:141:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_smwdvt_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // If one side is 90 degree, return true\n    if a == b {\n\
    \        return true\n    }\n    \n    // If one side is right angle, return true\n\
    \    if a == c || b == c {\n        return true\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == b {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if a == c {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if b ==\
    \ c {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if a == b {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == c {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if b == c {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if a ==\
    \ b {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if a == c {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if b == c {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if a == b {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if a ==\
    \ c {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if b == c {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == b {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if a == c {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if b ==\
    \ c {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if a == b {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == c {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if b == c {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if a ==\
    \ b {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if a == c {\n        return false\n    }\n    \n    // \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ria3_le_test.go:133:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are all positive.\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are all different.\n    if a == b {\n        return c == b\n    }\n\
    \n    // Check that the sides are all different.\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are all different.\n    if b ==\
    \ c {\n        return a == b\n    }\n\n    // Check that the sides are all different.\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are all different.\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are all different.\n    if b == c {\n        return a ==\
    \ b\n    }\n\n    // Check that the sides are all different.\n    if a == b {\n\
    \        return c == b\n    }\n\n    // Check that the sides are all different.\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are all different.\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are all different.\n    if a == b {\n        return c ==\
    \ b\n    }\n\n    // Check that the sides are all different.\n    if a == c {\n\
    \        return b == c\n    }\n\n    // Check that the sides are all different.\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are all different.\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are all different.\n    if a == c {\n        return b ==\
    \ c\n    }\n\n    // Check that the sides are all different.\n    if b == c {\n\
    \        return a == b\n    }\n\n    // Check that the sides are all different.\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are all different.\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are all different.\n    if b == c {\n        return a ==\
    \ b\n    }\n\n    // Check that the sides are all different.\n    if a == b {\n\
    \        return c == b\n    }\n\n    // Check that the sides are all different.\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are all different.\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are all different.\n    if a == b {\n        return c ==\
    \ b\n    }\n\n    // Check that the sides are all different.\n    if a == c {\n\
    \        return b == c\n    }\n\n    // Check that the sides are all different.\n\
    \    if b == \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp9_uh4ke_test.go:140:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n    // Check that\
    \ the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    // Check that the three sides are equal\n    if a == b {\n\
    \        return c == b\n    }\n    // Check that the three sides are equal\n \
    \   if a == c {\n        return b == c\n    }\n    // Check that the three sides\
    \ are equal\n    if a == b+c {\n        return b == c-a\n    }\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\
    \    // Check that the three sides are equal\n    if a == c+b {\n        return\
    \ c == b-a\n    }\n    // Check that the three sides are equal\n    if a == c+b\
    \ {\n        return b == a-c\n    }\n    // Check that the three sides are equal\n\
    \    if a == b+c {\n        return c == b-a\n    }\n    // Check that the three\
    \ sides are equal\n    if a == c+b {\n        return b == c-a\n    }\n    // Check\
    \ that the three sides are equal\n    if a == b+c {\n        return c == c-a\n\
    \    }\n    // Check that the three sides are equal\n    if a == c+b {\n     \
    \   return b == b-a\n    }\n    // Check that the three sides are equal\n    if\
    \ a == c+b {\n        return c == b-a\n    }\n    // Check that the three sides\
    \ are equal\n    if a == b+c {\n        return c == c-a\n    }\n    // Check that\
    \ the three sides are equal\n    if a == c+b {\n        return b == c-a\n    }\n\
    \    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ c == c-a\n    }\n    // Check that the three sides are equal\n    if a == c+b\
    \ {\n        return b == b-a\n    }\n    // Check that the three sides are equal\n\
    \    if a == c+b {\n        return c == b-a\n    }\n    // Check that the three\
    \ sides are equal\n    if a == b+c {\n        return c == c-a\n    }\n    // Check\
    \ that the three sides are equal\n    if a == c+b {\n        return b == b-a\n\
    \    }\n    // Check that the three sides are equal\n    if a == c+b {\n     \
    \   return c == b-a\n    }\n    // Check that the three sides are equal\n    if\
    \ a == b+c {\n        return c == c-a\n    }\n    // Check that the three sides\
    \ are equal\n    if a == c+b {\n        return b == b-a\n    }\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz0e11ax6_test.go:111:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b || a == c || b == c {\n\
    \        return true\n    }\n    if a > b {\n        if a > c {\n            return\
    \ true\n        }\n        return false\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpiwjfl1cr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpiwjfl1cr_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpiwjfl1cr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpiwjfl1cr_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpiwjfl1cr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpiwjfl1cr_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpiwjfl1cr_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpiwjfl1cr_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpiwjfl1cr_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        }\n        return true\n    }\n \
    \   if a < b {\n        if c > b {\n            return false\n        }\n    \
    \    return true\n    }\n    if b < c {\n        if a > c {\n            return\
    \ false\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdxf5wrez_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpdxf5wrez_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpdxf5wrez_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpdxf5wrez_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpdxf5wrez_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpdxf5wrez_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == b {\n        return a == c\n    }\n\n    // Check that the three sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the three sides are equal\n    if b == c {\n        return a == b\n    }\n\n\
    \    // Check that the three sides are equal\n    if a == b {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpahqkf2gh_test.go:145:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b < c:\n    \
    \    return true\n    case a < c && b > c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiy15ek0_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // If the sides are equal, it's a right angled triangle\n  \
    \  if a == b {\n        return true\n    }\n    \n    // If the sides are equal,\
    \ it's a right angled triangle\n    if a == c {\n        return true\n    }\n\
    \    \n    // If the sides are equal, it's a right angled triangle\n    if b ==\
    \ c {\n        return true\n    }\n    \n    // If all sides are equal, it's a\
    \ right angled triangle\n    if a == b+c {\n        return true\n    }\n    \n\
    \    // If all sides are equal, it's a right angled triangle\n    if a == c-b\
    \ {\n        return true\n    }\n    \n    // If all sides are equal, it's a right\
    \ angled triangle\n    if b == c-a {\n        return true\n    }\n    \n    //\
    \ If all sides are equal, it's a right angled triangle\n    if c == a-b {\n  \
    \      return true\n    }\n    \n    // If all sides are equal, it's a right angled\
    \ triangle\n    if a == b+c && b == c-a && c == a-b {\n        return true\n \
    \   }\n    \n    // If all sides are equal, it's a right angled triangle\n   \
    \ if a == c-b && b == c-a && c == a-b {\n        return true\n    }\n    \n  \
    \  // If all sides are equal, it's a right angled triangle\n    if a == c-b &&\
    \ b == c-a && c == a-b {\n        return true\n    }\n    \n    // If all sides\
    \ are equal, it's a right angled triangle\n    if a == c-b && b == c-a && c ==\
    \ a-b {\n        return true\n    }\n    \n    // If all sides are equal, it's\
    \ a right angled triangle\n    if a == c-b && b == c-a && c == a-b {\n       \
    \ return true\n    }\n    \n    // If all sides are equal, it's a right angled\
    \ triangle\n    if a == c-b && b == c-a && c == a-b {\n        return true\n \
    \   }\n    \n    // If all sides are equal, it's a right angled triangle\n   \
    \ if a == c-b && b == c-a && c == a-b {\n        return true\n    }\n    \n  \
    \  // If all sides are equal, it's a right angled triangle\n    if a == c-b &&\
    \ b == c-a && c == a-b {\n        return true\n    }\n    \n    // If all sides\
    \ are equal, it's a right angled triangle\n    if a == c-b && b == c-a && c ==\
    \ a-b {\n        return true\n    }\n    \n    // If \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp4qvtxnl_test.go:103:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    d := b * b - 4 * a * c\n  \
    \  if d < 0 {\n        return false\n    }\n    \n    s := (-b + d) / (2 * a)\n\
    \    if s <= 0 {\n        return false\n    }\n    \n    t := (-b - d) / (2 *\
    \ a)\n    if t <= 0 {\n        return false\n    }\n    \n    return true\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnut5jfsk_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnut5jfsk_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpnut5jfsk_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpnut5jfsk_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpnut5jfsk_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpnut5jfsk_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a > b {\n        return false\n    }\n  \
    \  if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if b > a {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpmpzczmg9_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpmpzczmg9_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpmpzczmg9_test.go:104: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpmpzczmg9_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpmpzczmg9_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpmpzczmg9_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpmpzczmg9_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpmpzczmg9_test.go:104:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpmpzczmg9_test.go:104: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ a > c + b:\n        return false\n    case b > c + a:\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwqchmgum_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwqchmgum_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a == b {\n        return\
    \ a == c\n    }\n    \n    if a == c {\n        return b == c\n    }\n    \n \
    \   if b == c {\n        return a == b\n    }\n    \n    if a == b {\n       \
    \ return a == c\n    }\n    \n    if a == c {\n        return b == c\n    }\n\
    \    \n    if b == c {\n        return a == b\n    }\n    \n    if a == b {\n\
    \        return a == c\n    }\n    \n    if a == c {\n        return b == c\n\
    \    }\n    \n    if b == c {\n        return a == b\n    }\n    \n    if a ==\
    \ b {\n        return a == c\n    }\n    \n    if a == c {\n        return b ==\
    \ c\n    }\n    \n    if b == c {\n        return a == b\n    }\n    \n    if\
    \ a == b {\n        return a == c\n    }\n    \n    if a == c {\n        return\
    \ b == c\n    }\n    \n    if b == c {\n        return a == b\n    }\n    \n \
    \   if a == b {\n        return a == c\n    }\n    \n    if a == c {\n       \
    \ return b == c\n    }\n    \n    if b == c {\n        return a == b\n    }\n\
    \    \n    if a == b {\n        return a == c\n    }\n    \n    if a == c {\n\
    \        return b == c\n    }\n    \n    if b == c {\n        return a == b\n\
    \    }\n    \n    if a == b {\n        return a == c\n    }\n    \n    if a ==\
    \ c {\n        return b == c\n    }\n    \n    if b == c {\n        return a ==\
    \ b\n    }\n    \n    if a == b {\n        return a == c\n    }\n    \n    if\
    \ a == c {\n        return b == c\n    }\n    \n    if b == c {\n        return\
    \ a == b\n    }\n    \n    if a == b {\n        return a == c\n    }\n    \n \
    \   if a == c {\n        return b == c\n    }\n    \n    if b == c {\n       \
    \ return a == b\n    }\n    \n    if a == b {\n        return a == c\n    }\n\
    \    \n    if a == c {\n        return b == c\n    }\n    \n    if b == c {\n\
    \        return a == b\n    }\n    \n    if a == b {\n        return a == c\n\
    \    }\n    \n    if a == c {\n        return b == c\n    }\n    \n    if b ==\
    \ c {\n        return a == b\n    }\n    \nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpja0_a138_test.go:167:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b+c:\n        return false\n    case\
    \ a > b+c:\n        return false\n    case a > b+c:\n        return false\n  \
    \  default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpmkqc7p20_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpmkqc7p20_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpmkqc7p20_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpmkqc7p20_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpmkqc7p20_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    x := (b * c) - (a * c)\n    y := (a * c) - (b * c)\n    z :=\
    \ (a * b) - (a * b)\n    \n    if x == 0 && y == 0 && z == 0 {\n        return\
    \ true\n    }\n    \n    if x == 0 {\n        return false\n    }\n    \n    if\
    \ y == 0 {\n        return false\n    }\n    \n    if z == 0 {\n        return\
    \ false\n    }\n    \n    if x > 0 && y > 0 && z > 0 {\n        return false\n\
    \    }\n    \n    if x < 0 && y < 0 && z < 0 {\n        return false\n    }\n\
    \    \n    if x < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \n \
    \   if x > 0 && y < 0 && z > 0 {\n        return false\n    }\n    \n    if x\
    \ < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \n    if x < 0 &&\
    \ y < 0 && z > 0 {\n        return false\n    }\n    \n    if x > 0 && y > 0 &&\
    \ z < 0 {\n        return false\n    }\n    \n    if x < 0 && y < 0 && z > 0 {\n\
    \        return false\n    }\n    \n    if x < 0 && y > 0 && z < 0 {\n       \
    \ return false\n    }\n    \n    if x < 0 && y < 0 && z > 0 {\n        return\
    \ false\n    }\n    \n    if x < 0 && y > 0 && z < 0 {\n        return false\n\
    \    }\n    \n    if x < 0 && y < 0 && z > 0 {\n        return false\n    }\n\
    \    \n    if x < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \n \
    \   if x < 0 && y < 0 && z > 0 {\n        return false\n    }\n    \n    if x\
    \ < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \n    if x < 0 &&\
    \ y < 0 && z > 0 {\n        return false\n    }\n    \n    if x < 0 && y > 0 &&\
    \ z < 0 {\n        return false\n    }\n    \n    if x < 0 && y < 0 && z > 0 {\n\
    \        return false\n    }\n    \n    if x < 0 && y > 0 && z < 0 {\n       \
    \ return false\n    }\n    \n    if x < 0 && y < 0 && z > 0 {\n        return\
    \ false\n    }\n    \n    if x < 0 && y > 0 && z < 0 {\n        return false\n\
    \    }\n    \n    if x < 0 && y < 0 && z > 0 {\n        return false\n    }\n\
    \    \n    if x < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \n \
    \   if x < 0 && y < 0 && z > 0 {\n        return false\n    }\n    \n    if x\
    \ < 0 && y > 0 && z < 0 {\n        return false\n    }\n    \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8gt56j4w_test.go:142:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    if a > b {\n        a, b = b, a\n    }\n    \n    if a > c {\n\
    \        a, c = c, a\n    }\n    \n    if b > c {\n        b, c = c, b\n    }\n\
    \    \n    if a + b > c {\n        return false\n    }\n    \n    if a + c > b\
    \ {\n        return false\n    }\n    \n    if b + c > a {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpkl8d_jva_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpkl8d_jva_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpkl8d_jva_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpkl8d_jva_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpkl8d_jva_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpkl8d_jva_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-zero length\n\
    \    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0q6o_jna_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 && b == 0 && c == 0 {\n      \
    \  return true\n    }\n\n    // Check that the three sides are equal\n    if a\
    \ == b {\n        return true\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c {\n        return true\n    }\n\n    // Check that the\
    \ three sides are equal\n    if b == c {\n        return true\n    }\n\n    //\
    \ Check that the three sides are equal\n    if a == b+c {\n        return true\n\
    \    }\n\n    // Check that the three sides are equal\n    if a == c-b {\n   \
    \     return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ b == c-a {\n        return true\n    }\n\n    // Check that the three sides\
    \ are equal\n    if c == a-b {\n        return true\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c && b == c-a && c == a-b {\n     \
    \   return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == c-b && b == c-a && c == a-b {\n        return true\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c-b && b == c-a && c == b-a {\n\
    \        return true\n    }\n\n    // Check that the three sides are equal\n \
    \   if a == c-b && b == c-a && c == b-a {\n        return true\n    }\n\n    //\
    \ Check that the three sides are equal\n    if a == c-b && b == c-a && c == b-a\
    \ {\n        return true\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c-b && b == c-a && c == b-a {\n        return true\n    }\n\n   \
    \ // Check that the three sides are equal\n    if a == c-b && b == c-a && c ==\
    \ b-a {\n        return true\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c-b && b == c-a && c == b-a {\n        return true\n    }\n\n   \
    \ // Check that the three sides are equal\n    if a == c-b && b == c-a && c ==\
    \ b-a {\n        return true\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c-b && b == c-a && c == b-a {\n        return true\n    }\n\n   \
    \ // Check that the three sides are equal\n    if a == c-b && b == c-a && c ==\
    \ b-a {\n        return true\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c-b && b == c-a && c == b-a {\n        return true\n    }\n\n   \
    \ // Check that the three sides are \nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3na46xej_test.go:124:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvi67n6j6_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-zero\n    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkkf5ni8t_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == b {\n        return c == b\n    }\n\n    // Check that the three sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the three sides are equal\n    if b == c {\n        return a == c\n    }\n\n\
    \    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == a-c\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ c+b {\n        return c == a-b\n    }\n\n    // Check that the three sides are\
    \ equal\n    if b == c+a {\n        return a == c-b\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c && b == c-a {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the three sides are equal\n    if a == c+b &&\
    \ c == a-b {\n        return b == c-a\n    }\n\n    // Check that the three sides\
    \ are equal\n    if b == c+a && b == c-a {\n        return a == c-b\n    }\n\n\
    \    // Check that the three sides are equal\n    if a == b+c && a == c-b {\n\
    \        return c == a-b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c+b && a == c-b {\n        return b == c-a\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c+a && b == c-a {\n        return\
    \ a == c-b\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c && a == c-b && a == c-a {\n        return c == a-b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c+b && a == c-b && a == c-a {\n\
    \        return b == c-a\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c+a && b == c-a && b == c-b {\n        return a == c-b\n    }\n\n\
    \    // Check that the three sides are equal\n    if a == b+c && a == c-b && a\
    \ == c-a && a == c-b {\n        return c == a-b\n    }\n\n    // Check that the\
    \ three sides are equal\n    if a == c+b && a == c-b && a == c-a && a == c-b {\n\
    \        return b == c-a\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c+a && b == c-\nfunc TestRight_Angle_Triangle(t *testing.T) {\n \
    \ candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_2zahazf_test.go:115:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073596
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ a > c + b:\n        return false\n    case b > c + a:\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwqchmgum_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwqchmgum_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwqchmgum_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpxjzzwoke_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpxjzzwoke_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpxjzzwoke_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpxjzzwoke_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpxjzzwoke_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpxjzzwoke_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpxjzzwoke_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpxjzzwoke_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpxjzzwoke_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The formula to calculate the area of a triangle\
    \ is given below:\n    // area = 1/2 * base * height\n    // base = (b - a) *\
    \ (c - b)\n    // height = (c - a) * (a - b)\n    // The formula to calculate\
    \ the area of a triangle is given below:\n    // area = 1/2 * base * height\n\
    \    // base = (b - a) * (c - b)\n    // height = (c - a) * (a - b)\n    // The\
    \ formula to calculate the area of a triangle is given below:\n    // area = 1/2\
    \ * base * height\n    // base = (b - a) * (c - b)\n    // height = (c - a) *\
    \ (a - b)\n    // The formula to calculate the area of a triangle is given below:\n\
    \    // area = 1/2 * base * height\n    // base = (b - a) * (c - b)\n    // height\
    \ = (c - a) * (a - b)\n    // The formula to calculate the area of a triangle\
    \ is given below:\n    // area = 1/2 * base * height\n    // base = (b - a) *\
    \ (c - b)\n    // height = (c - a) * (a - b)\n    // The formula to calculate\
    \ the area of a triangle is given below:\n    // area = 1/2 * base * height\n\
    \    // base = (b - a) * (c - b)\n    // height = (c - a) * (a - b)\n    // The\
    \ formula to calculate the area of a triangle is given below:\n    // area = 1/2\
    \ * base * height\n    // base = (b - a) * (c - b)\n    // height = (c - a) *\
    \ (a - b)\n    // The formula to calculate the area of a triangle is given below:\n\
    \    // area = 1/2 * base * height\n    // base = (b - a) * (c - b)\n    // height\
    \ = (c - a) * (a - b)\n    // The formula to calculate the area of a triangle\
    \ is given below:\n    // area = 1/2 * base * height\n    // base = (b - a) *\
    \ (c - b)\n    // height = (c - a) * (a - b)\n    // The formula to calculate\
    \ the area of a triangle is given below:\n    // area = 1/2 * base * height\n\
    \    // base = (b - a) * (c - b)\n    // height = (c - a) * (a - b)\n    // The\
    \ formula to calculate the area of a triangle is given below:\n    // area = 1/2\
    \ * base * height\n    // base = (b - a) * (c - b)\n    // height = (c - a) *\
    \ (a - b)\n    // The formula to calculate the area of a triangle is given below:\n\
    \    // area = 1/2 * base * height\n    // base = (b - a) * (c - b)\n    // height\
    \ = (c - a) * (a - b)\n    // The formula to calculate the area of a triangle\
    \ is given below:\n    // area = 1/2 * base * height\n    // base = (b - a) *\
    \ (c - b)\n    // height = (c - a) * (a - b)\n    // The formula to calculate\
    \ the \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2972kle0_test.go:71:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n    // Check that the sides are equal\n    if a == c {\n    \
    \    return b == c\n    }\n    // Check that the sides are equal\n    if a ==\
    \ b+c {\n        return b == c+a\n    }\n    // Check that the sides are equal\n\
    \    if a == c+b {\n        return c == b+a\n    }\n    // Check that the sides\
    \ are equal\n    if a == b+c {\n        return b == c+a\n    }\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n   \
    \ // Check that the sides are equal\n    if a == b+c {\n        return b == c+a\n\
    \    }\n    // Check that the sides are equal\n    if a == c+b {\n        return\
    \ c == b+a\n    }\n    // Check that the sides are equal\n    if a == b+c {\n\
    \        return b == c+a\n    }\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n   \
    \ // Check that the sides are equal\n    if a == b+c {\n        return b == c+a\n\
    \    }\n    // Check that the sides are equal\n    if a == c+b {\n        return\
    \ c == b+a\n    }\n    // Check that the sides are equal\n    if a == b+c {\n\
    \        return b == c+a\n    }\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n   \
    \ // Check that the sides are equal\n    if a == b+c {\n        return b == c+a\n\
    \    }\n    // Check that the sides are equal\n    if a == c+b {\n        return\
    \ c == b+a\n    }\n    // Check that the sides are equal\n    if a == b+c {\n\
    \        return b == c+a\n    }\n    // Check \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzbab_376_test.go:111:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if b > c {\n            return false\n        } else {\n            return\
    \ true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwbndltbr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwbndltbr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwbndltbr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwbndltbr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpwbndltbr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpwbndltbr_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\
    \ else {\n            return false\n        }\n    } else {\n        if b > c\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpmrvvvjzh_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpmrvvvjzh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpmrvvvjzh_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpmrvvvjzh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpmrvvvjzh_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpmrvvvjzh_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    return a ==\
    \ b == c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkkkx9_n7_test.go:30:22: invalid operation: a == b == c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp68tz9ix2_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp68tz9ix2_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp68tz9ix2_test.go:86: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp68tz9ix2_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp68tz9ix2_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp68tz9ix2_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp68tz9ix2_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp68tz9ix2_test.go:86:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp68tz9ix2_test.go:86: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case c > a + b:\n        return false\n\
    \    case a > b + c && b > a + c && c > a + b:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpsj0qd59__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpsj0qd59__test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpsj0qd59__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpsj0qd59__test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpsj0qd59__test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpsj0qd59__test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        a, b =\
    \ b, a\n    }\n    \n    if a > c {\n        a, c = c, a\n    }\n    \n    if\
    \ b > c {\n        b, c = c, b\n    }\n    \n    if a == b {\n        return c\
    \ == b\n    }\n    \n    if a == c {\n        return b == c\n    }\n    \n   \
    \ if b == c {\n        return a == c\n    }\n    \n    return false\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp5p697_zm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp5p697_zm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp5p697_zm_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp5p697_zm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp5p697_zm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp5p697_zm_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp5p697_zm_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp5p697_zm_test.go:73:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7d8o32d1_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    if a == 0 || b\
    \ == 0 || c == 0 {\n        return false\n    }\n    \n    d := b * b - 4 * a\
    \ * c\n    \n    if d < 0 {\n        return false\n    }\n    \n    if d == 0\
    \ {\n        return true\n    }\n    \n    s := (-b + d) / (2 * a)\n    \n   \
    \ if s < 0 {\n        return false\n    }\n    \n    if s > 1 {\n        return\
    \ true\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpk582xql6_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpk582xql6_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpk582xql6_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpk582xql6_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpk582xql6_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpk582xql6_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmphb64cs1h_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmphb64cs1h_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpws761jhh_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpws761jhh_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpws761jhh_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpws761jhh_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpws761jhh_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpws761jhh_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpws761jhh_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpws761jhh_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpws761jhh_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    d := b\
    \ * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    s := (-b +\
    \ d) / (2 * a)\n    if s > 1 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp3dvx14w7_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp3dvx14w7_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp3dvx14w7_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp3dvx14w7_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp3dvx14w7_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp3dvx14w7_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_smwdvt_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n    \n    x := (b*b) - (4*a*c)\n \
    \   y := (a*a) - (4*b*c)\n    z := (a*b) - (4*a*c)\n    \n    if x == 0 && y ==\
    \ 0 && z == 0 {\n        return true\n    }\n    \n    if x == 0 {\n        return\
    \ false\n    }\n    \n    if y == 0 {\n        return false\n    }\n    \n   \
    \ if z == 0 {\n        return false\n    }\n    \n    if x < 0 && y > 0 && z >\
    \ 0 {\n        return true\n    }\n    \n    if x < 0 && y < 0 && z > 0 {\n  \
    \      return true\n    }\n    \n    if x < 0 && y > 0 && z < 0 {\n        return\
    \ true\n    }\n    \n    if x < 0 && y < 0 && z < 0 {\n        return true\n \
    \   }\n    \n    if x > 0 && y > 0 && z > 0 {\n        return true\n    }\n  \
    \  \n    if x > 0 && y < 0 && z > 0 {\n        return true\n    }\n    \n    if\
    \ x > 0 && y > 0 && z < 0 {\n        return true\n    }\n    \n    if x > 0 &&\
    \ y < 0 && z < 0 {\n        return true\n    }\n    \n    if x < 0 && y > 0 &&\
    \ z > 0 {\n        return true\n    }\n    \n    if x < 0 && y < 0 && z < 0 {\n\
    \        return true\n    }\n    \n    if x > 0 && y > 0 && z > 0 {\n        return\
    \ true\n    }\n    \n    if x > 0 && y < 0 && z > 0 {\n        return true\n \
    \   }\n    \n    if x > 0 && y < 0 && z < 0 {\n        return true\n    }\n  \
    \  \n    if x < 0 && y > 0 && z > 0 {\n        return true\n    }\n    \n    if\
    \ x < 0 && y < 0 && z < 0 {\n        return true\n    }\n    \n    if x > 0 &&\
    \ y > 0 && z > 0 {\n        return true\n    }\n    \n    if x > 0 && y < 0 &&\
    \ z > 0 {\n        return true\n    }\n    \n    if x > 0 && y < 0 && z < 0 {\n\
    \        return true\n    }\n    \n    if x < 0 && y > 0 && z > 0 {\n        return\
    \ true\n    }\n    \n    if x < 0 && y < 0 && z < 0 {\n        return true\n \
    \   }\n    \n    if x > 0 && y > 0 && z > 0 {\n        return true\n    }\n  \
    \  \n    if x > 0 && y < 0 && z > 0 {\n        return true\n    }\n    \n    if\
    \ x > 0 && y < 0 && z < 0 {\n        return true\n    }\n    \n    if x < 0 &&\
    \ y > 0 && z > 0 {\n        return true\n    }\n    \n    if x < 0 && y < 0 &&\
    \ z < 0 {\n        return true\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpihgcopjw_test.go:141:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqhlx890b_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqhlx890b_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if a > c {\n        return\
    \ true\n    }\n    if b > c {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpowu6bk6v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpowu6bk6v_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpowu6bk6v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpowu6bk6v_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpowu6bk6v_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return true\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return false\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp3wk4wxei_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp3wk4wxei_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp3wk4wxei_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a + b > c {\n        return false\n    }\n    if a +\
    \ c > b {\n        return false\n    }\n    if b + c > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp2hxs1jjs_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp2hxs1jjs_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp2hxs1jjs_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp2hxs1jjs_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp2hxs1jjs_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp2hxs1jjs_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpd5meo45c_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpd5meo45c_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // Check all possible angles\n    angles := []int{a, b, c}\n\
    \    for _, angle := range angles {\n        if angle > 180 {\n            angle\
    \ -= 360\n        }\n        if angle < -180 {\n            angle += 360\n   \
    \     }\n        if angle == 180 {\n            return true\n        }\n    }\n\
    \    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpyixv8dul_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpyixv8dul_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpyixv8dul_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpyixv8dul_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpyixv8dul_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpyixv8dul_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return b == c\n    }\n\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyq_qleti_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    ab := b - a\n    cb := c - b\n    \n    if ab == cb {\n    \
    \    return true\n    }\n    \n    abc := ab * cb\n    \n    if abc > 0 {\n  \
    \      return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-zero\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3qh43pm8_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b && b == c {\n        return\
    \ true\n    }\n    if a == c && c == b {\n        return true\n    }\n    if a\
    \ == b {\n        return false\n    }\n    if a == c {\n        return false\n\
    \    }\n    if b == c {\n        return false\n    }\n    if a == b {\n      \
    \  return false\n    }\n    if a == c {\n        return false\n    }\n    if b\
    \ == c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    if a == b {\n        return false\n    }\n    if a\
    \ == c {\n        return false\n    }\n    if b == c {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return false\n    }\n    if b == c {\n        return false\n    }\n    if a\
    \ == b {\n        return false\n    }\n    if a == c {\n        return false\n\
    \    }\n    if b == c {\n        return false\n    }\n    if a == b {\n      \
    \  return false\n    }\n    if a == c {\n        return false\n    }\n    if b\
    \ == c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    if a == b {\n        return false\n    }\n    if a\
    \ == c {\n        return false\n    }\n    if b == c {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return false\n    }\n    if b == c {\n        return false\n    }\n    if a\
    \ == b {\n        return false\n    }\n    if a == c {\n        return false\n\
    \    }\n    if b == c {\n        return false\n    }\n    if a == b {\n      \
    \  return false\n    }\n    if a == c {\n        return false\n    }\n    if b\
    \ == c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    if a == b {\n        return false\n    }\n    if a\
    \ == c {\n        return false\n    }\n    if b == c {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return false\n    }\n    if b == c {\n        return false\n    }\n    if \n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1n70aqex_test.go:164:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpyuwql6yr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpyuwql6yr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpyuwql6yr_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpyuwql6yr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpyuwql6yr_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpyuwql6yr_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if any of a, b or c is zero\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n\n    // Check if any\
    \ of a, b or c is negative\n    if a < 0 || b < 0 || c < 0 {\n        return false\n\
    \    }\n\n    // Check if any of a, b or c is greater than the other side\n  \
    \  if a > b {\n        if b > c {\n            return false\n        }\n    }\
    \ else {\n        if c > b {\n            return false\n        }\n    }\n\n \
    \   // Check if any of a, b or c is greater than the other side\n    if a > c\
    \ {\n        if c > b {\n            return false\n        }\n    } else {\n \
    \       if b > c {\n            return false\n        }\n    }\n\n    // Check\
    \ if any of a, b or c is greater than the other side\n    if a > b {\n       \
    \ if b > c {\n            return false\n        }\n    } else {\n        if c\
    \ > b {\n            return false\n        }\n    }\n\n    // Check if any of\
    \ a, b or c is greater than the other side\n    if a > c {\n        if c > b {\n\
    \            return false\n        }\n    } else {\n        if b > c {\n     \
    \       return false\n        }\n    }\n\n    // If all conditions are met, return\
    \ true\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi5g1limj_test.go:99: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi5g1limj_test.go:99:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpi5g1limj_test.go:99: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpi5g1limj_test.go:99:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpi5g1limj_test.go:99: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpi5g1limj_test.go:99:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpi5g1limj_test.go:99: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if c > b {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0v5howb5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0v5howb5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0v5howb5_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0v5howb5_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if c > b {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0v5howb5_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0v5howb5_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0v5howb5_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp0v5howb5_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if all sides are equal\n    if a == b {\n\
    \        return a == c\n    }\n    if a == c {\n        return b == c\n    }\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n    \
    \    return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\n \
    \   // Check if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n     \
    \   return a == b\n    }\n\n    // Check if all sides are equal\n    if a == b\
    \ {\n        return a == c\n    }\n    if a == c {\n        return b == c\n  \
    \  }\n    if b == c {\n        return a == b\n    }\n\n    // Check if all sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n\
    \        return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\
    \n    // Check if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n     \
    \   return a == b\n    }\n\n    // Check if all sides are equal\n    if a == b\
    \ {\n        return a == c\n    }\n    if a == c {\n        return b == c\n  \
    \  }\n    if b == c {\n        return a == b\n    }\n\n    // Check if all sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n\
    \        return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\
    \n    // Check if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n     \
    \   return a == b\n    }\n\n    // Check if all sides are equal\n    if a == b\
    \ {\n        return a == c\n    }\n    if a == c {\n        return b == c\n  \
    \  }\n    if b == c {\n        return a == b\n    }\n\n    // Check if all sides\
    \ are equal\n    if a == b {\n        return a == c\n    }\n    if a == c {\n\
    \        return b == c\n    }\n    if b == c {\n        return a == b\n    }\n\
    \n    // Check if all sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n     \
    \   return a == b\n    }\n\n    // Check if all sides are equal\n    if \nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx86q5poa_test.go:152:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        a,\
    \ b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n\
    \        b, c = c, b\n    }\n    return b * b == c * c && b * b + c * c == a *\
    \ a\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmph216z0e5_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmph216z0e5_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmph216z0e5_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmph216z0e5_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmph216z0e5_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmph216z0e5_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return a == c\n    }\n    if a == c {\n     \
    \   return b == c\n    }\n    if b == c {\n        return a != b\n    }\n    return\
    \ a != b != c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpimogmnl8_test.go:30:22: invalid operation: a != b != c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    ab := b - a\n    cb := c - b\n    \n    if ab == cb {\n    \
    \    return true\n    }\n    \n    abc := ab * cb\n    \n    if abc > 0 {\n  \
    \      return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp77mkvc28_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp77mkvc28_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return a == c\n    }\n    if a == c {\n     \
    \   return b == c\n    }\n    if b == c {\n        return a != b\n    }\n    return\
    \ a > b and a > c and b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp04wqix2p_test.go:30:18: expected '';'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073598
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ c {\n        return false\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpiqwq1of7_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpiqwq1of7_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpiqwq1of7_test.go:86: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpiqwq1of7_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpiqwq1of7_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpiqwq1of7_test.go:86:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpiqwq1of7_test.go:86: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpiqwq1of7_test.go:86:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpiqwq1of7_test.go:86: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpy6oqdjvw_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpy6oqdjvw_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpf9yfqrkd_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpf9yfqrkd_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073594
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpv6snoe5y_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpv6snoe5y_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    d\
    \ := b * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    \n  \
    \  if d == 0 {\n        return true\n    }\n    \n    s := (-b + d) / (2 * a)\n\
    \    if s < 0 {\n        return false\n    }\n    \n    if s == 0 {\n        return\
    \ true\n    }\n    \n    t := (-b - d) / (2 * a)\n    if t < 0 {\n        return\
    \ false\n    }\n    \n    if t == 0 {\n        return true\n    }\n    \n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpcnt03c1e_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpcnt03c1e_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpcnt03c1e_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpcnt03c1e_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpcnt03c1e_test.go:84: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpcnt03c1e_test.go:84:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    d\
    \ := b * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    \n  \
    \  x := (-b + d) / (2 * a)\n    y := (-b - d) / (2 * a)\n    \n    return x ==\
    \ y || x == -y || y == -x\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp7qaw0w0v_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp7qaw0w0v_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp7qaw0w0v_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp7qaw0w0v_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp7qaw0w0v_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp7qaw0w0v_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are positive\n    if a < 0\
    \ || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n\
    \n    // Check that the sides are equal\n    if a == b {\n        return c ==\
    \ b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n       \
    \ return b == c\n    }\n\n    // Check that the sides are equal\n    if b == c\
    \ {\n        return a == c\n    }\n\n    // Check that the sides are equal\n \
    \   if a == b {\n        return c == b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that the\
    \ sides are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == b {\n        return c == b\n    }\n\n\
    \    // Check that the sides are equal\n    if a == c {\n        return b == c\n\
    \    }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkwpyi7z2_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    d := b * b - 4 * a * c\n    if d < 0 {\n        return false\n\
    \    }\n    \n    s := (-b + d) / (2 * a)\n    if s <= 0 {\n        return false\n\
    \    }\n    \n    t := (-b - d) / (2 * a)\n    if t <= 0 {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzyoigbkv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzyoigbkv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpzyoigbkv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzyoigbkv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzyoigbkv_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzyoigbkv_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7d8o32d1_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n    if a == b {\n        return c\
    \ == a\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n\
    \        return a == b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpepg8myzl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpepg8myzl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpepg8myzl_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpepg8myzl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpepg8myzl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpepg8myzl_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpepg8myzl_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpepg8myzl_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpx0g8aekg_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpx0g8aekg_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a > b {\n       \
    \ if b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpodu8tlaj_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpodu8tlaj_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpodu8tlaj_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpodu8tlaj_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeucj_l31_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    d := b * b - 4 * a * c\n  \
    \  if d < 0 {\n        return false\n    }\n    \n    s := (-b + d) / (2 * a)\n\
    \    if s <= 0 {\n        return false\n    }\n    \n    t := (-b - d) / (2 *\
    \ a)\n    if t <= 0 {\n        return false\n    }\n    \n    return true\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpzwyrmhyv_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpzwyrmhyv_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073595
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmptsffnmez_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmptsffnmez_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp669183jt_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp669183jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073593
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        if a >\
    \ c {\n            return true\n        }\n        return false\n    }\n    \n\
    \    if b > c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmprb8fktg4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmprb8fktg4_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmprb8fktg4_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmprb8fktg4_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmprb8fktg4_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmprb8fktg4_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvinz202w_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073590
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcpnqzwm_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    return\
    \ a + b > c && a + c > b && b + c > a\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpfx8dgnz6_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpfx8dgnz6_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpfx8dgnz6_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        }\n        return false\n    }\n    if b > c\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpfrp4z8sp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpfrp4z8sp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpfrp4z8sp_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpfrp4z8sp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpfrp4z8sp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpfrp4z8sp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073599
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b > c:\n    \
    \    return true\n    case a < c && b < c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwekr823w_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9og4x6nt_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9og4x6nt_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwszck7kn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwszck7kn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073597
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpj5464lsb_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpj5464lsb_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073591
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // The hypotenuse of a right angle triangle is equal to the\
    \ square root of the \n    // sum of the squares of the sides.\n    hypotenuse\
    \ := math.Sqrt(float64(a)*float64(a) + float64(b)*float64(b) + float64(c)*float64(c))\n\
    \    \n    // If the hypotenuse is greater than the sum of the squares of the\
    \ sides, \n    // then it is not a right angle triangle.\n    if hypotenuse >\
    \ float64(a) + float64(b) + float64(c) {\n        return false\n    }\n    \n\
    \    // If the hypotenuse is less than the sum of the squares of the sides, \n\
    \    // then it is not a right angle triangle.\n    if hypotenuse < float64(a)\
    \ + float64(b) + float64(c) {\n        return false\n    }\n    \n    // If the\
    \ hypotenuse is equal to the sum of the squares of the sides, \n    // then it\
    \ is a right angle triangle.\n    if hypotenuse == float64(a) + float64(b) + float64(c)\
    \ {\n        return true\n    }\n    \n    // If the hypotenuse is greater than\
    \ the sum of the squares of the sides, \n    // then it is a right angle triangle.\n\
    \    if hypotenuse > float64(a) + float64(b) + float64(c) {\n        return true\n\
    \    }\n    \n    // If the hypotenuse is less than the sum of the squares of\
    \ the sides, \n    // then it is a right angle triangle.\n    if hypotenuse <\
    \ float64(a) + float64(b) + float64(c) {\n        return true\n    }\n    \n \
    \   // If the hypotenuse is equal to the sum of the squares of the sides, \n \
    \   // then it is a right angle triangle.\n    if hypotenuse == float64(a) + float64(b)\
    \ + float64(c) {\n        return true\n    }\n    \n    // If the hypotenuse is\
    \ greater than the sum of the squares of the sides, \n    // then it is a right\
    \ angle triangle.\n    if hypotenuse > float64(a) + float64(b) + float64(c) {\n\
    \        return true\n    }\n    \n    // If the hypotenuse is less than the sum\
    \ of the squares of the sides, \n    // then it is a right angle triangle.\n \
    \   if hypotenuse < float64(a) + float64(b) + float64(c) {\n        return true\n\
    \    }\n    \n    // If the hypotenuse is equal to the sum of the squares of the\
    \ sides, \n    // then it is a right angle triangle.\n    if hypotenuse == float64(a)\
    \ + float64(b) + float64(c) {\n        return true\n    }\n    \n    // If the\
    \ hypotenuse is greater than the sum of the squares of the sides, \n    // then\
    \ it is a right angle triangle.\n    if hypotenuse > float64(a) + float64(b) +\
    \ float64(c) {\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate :=\
    \ right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ true },\n     { actual: candidate(1, 2, 3), expected: false },\n     { actual:\
    \ candidate(10, 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected:\
    \ false },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual:\
    \ candidate(10, 5, 7), expected: false },\n     { actual: candidate(5, 12, 13),\
    \ expected: true },\n     { actual: candidate(15, 8, 17), expected: true },\n\
    \     { actual: candidate(48, 55, 73), expected: true },\n     { actual: candidate(1,\
    \ 1, 1), expected: false },\n     { actual: candidate(2, 2, 10), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp931zdqm1_test.go:84:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073599
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeucj_l31_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073592
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true\
    \ if the three\n// sides form a right-angled triangle, false otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpg0yhi215_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpg0yhi215_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpg0yhi215_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpg0yhi215_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpg0yhi215_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpg0yhi215_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073599
