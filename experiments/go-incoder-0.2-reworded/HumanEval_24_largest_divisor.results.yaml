language: go_test.go
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpbgwl9muu_test.go:41: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpbgwl9muu_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpbgwl9muu_test.go:41: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor += 1\n        if n%divisor == 0 {\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073312
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor <<= 1\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor <<= 1\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    max := n\n    for i :=\
    \ 3; i <= max; i++ {\n        if n%i == 0 {\n            max = i\n        }\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmptocjlrh2_test.go:41: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmptocjlrh2_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n</code>\n<|/ a tags=algorithm,math,big-o |>\n<| c\
    \ |>\nI believe this algorithm is O(n^2) because of the nested loop. Also, I don't\
    \ think it works in general for negative numbers. For example, `largest_divisor(-15)`\
    \ returns `0` instead of `5`.\n<|/ c |>\n<| c |>\nYes, you are right. My algorithm\
    \ is O(n^2) because of the nested loop. My algorithm is O(n) because of the while\
    \ loop. My algorithm is O(1) because of the if statement. My algorithm is O(1)\
    \ because of the for loop. My algorithm is O(1) because of the if statement. My\
    \ algorithm is O(1) because of the for loop. My algorithm is O(1) because of the\
    \ while loop.\n<|/ c |>\n<| c |>\nI believe your algorithm is O(n^2) because of\
    \ the nested loop. Your algorithm is O(n) because of the while loop. Your algorithm\
    \ is O(1) because of the if statement. Your algorithm is O(1) because of the for\
    \ loop. Your algorithm is O(1) because of the if statement. Your algorithm is\
    \ O(1) because of the for loop. Your algorithm is O(1) because of the while loop.\n\
    <|/ c |>\n<| c |>\nI believe your algorithm is O(n^2) because of the nested loop.\
    \ Your algorithm is O(n) because of the while loop. Your algorithm is O(1) because\
    \ of the if statement. Your algorithm is O(1) because of the for loop. Your algorithm\
    \ is O(1) because of the if statement. Your algorithm is O(1) because of the for\
    \ loop. Your algorithm is O(1) because of the while loop.\n<|/ c |>\n<| c |>\n\
    I believe your algorithm is O(n^2) because of the nested loop. Your algorithm\
    \ is O(n) because of the while loop. Your algorithm is O(1) because of the if\
    \ statement. Your algorithm is O(1) because of the for loop. Your algorithm is\
    \ O(1) because of the if statement. Your algorithm is O(1) because of the for\
    \ loop. Your algorithm is O(1) because of the while loop.\n<|/ c |>\n<| a tags=algorithm,math,big-o\
    \ |>\n<code>\nint largest_divisor(int n) {\n    int maxDivisor = 1;\n    int maxDivisorValue\
    \ = n;\n    int currentDivisor = 1;\n    int currentDivisorValue = n;\n    while\
    \ (currentDivisorValue != 0) {\n        if (currentDivisorValue \nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzxrc_42_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073298
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2 {\n    \
    \    if n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdlco1ev_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073298
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    largest := n\n    divisor\
    \ := 1\n    for divisor <= n / 2 {\n        if n % divisor == 0 {\n          \
    \  largest = divisor\n        }\n        divisor++\n    }\n    return largest\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max / 2 {\n     \
    \   divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__1\
    \ (0.00s)\n        tmp23fj0tve_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__4 (0.00s)\n        tmp23fj0tve_test.go:39:\
    \ expected '%!s(int=7)', got '%!s(int=24)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjh6nfucm_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjh6nfucm_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjh6nfucm_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjh6nfucm_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjh6nfucm_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjh6nfucm_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmp4caj0ll3_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmp4caj0ll3_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp4caj0ll3_test.go:42: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp4caj0ll3_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp4caj0ll3_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor <<= 1\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=5)', got '%!s(int=1024)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmphpci6wm4_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmphpci6wm4_test.go:38: expected '%!s(int=7)', got '%!s(int=562949953421312)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: null
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        if n%divisor == 0 {\n            divisor++\n            divisor_count++\n\
    \        }\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t *testing.T)\
    \ {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual:\
    \ candidate(10), expected: 5 },\n     { actual: candidate(100), expected: 50 },\n\
    \     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073312
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp1tz66ewo_test.go:42: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp1tz66ewo_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmp1tz66ewo_test.go:42: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    divisor := 1\n    max\
    \ := n\n    for divisor < n {\n        if n%divisor == 0 {\n            max =\
    \ divisor\n        }\n        divisor++\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmp9lzhjz47_test.go:43: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmp9lzhjz47_test.go:43:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    divisor := n\n    max :=\
    \ n\n    for divisor > 1 {\n        if n%divisor == 0 {\n            max = divisor\n\
    \        }\n        divisor--\n    }\n    return max\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpnb1qfijr_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpnb1qfijr_test.go:43:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpnb1qfijr_test.go:43: expected '%!s(int=5)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpnb1qfijr_test.go:43:\
    \ expected '%!s(int=50)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max {\n        if\
    \ n%divisor == 0 {\n            return divisor\n        }\n        divisor++\n\
    \    }\n    return n\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpkek41bjq_test.go:40: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpkek41bjq_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=1)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpkek41bjq_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            divisor = n\n   \
    \         break\n        }\n        divisor_count++\n    }\n    return divisor\n\
    }\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpmgt31jht_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpmgt31jht_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpmgt31jht_test.go:42: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpmgt31jht_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpmgt31jht_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    largest := n\n    divisor\
    \ := 1\n    for divisor < n {\n        if n%divisor == 0 {\n            largest\
    \ = divisor\n        }\n        divisor++\n    }\n    return largest\n}\n\nfunc\
    \ TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual: candidate(7),\
    \ expected: 1 },\n     { actual: candidate(10), expected: 5 },\n     { actual:\
    \ candidate(100), expected: 50 },\n     { actual: candidate(49), expected: 7 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdp4d2970_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdp4d2970_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdp4d2970_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2; divisor++\
    \ {\n        if n%divisor == 0 {\n            return divisor\n        }\n    }\n\
    \n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3o2yi8k_test.go:15:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= max / 2; divisor++\
    \ {\n        if n%divisor == 0 {\n            return divisor\n        }\n    }\n\
    \    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppm91l4j3_test.go:15:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor <= n / 2 {\n      \
    \  if n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max / 2; divisor++\
    \ {\n        if n%divisor == 0 {\n            return divisor\n        }\n    }\n\
    \    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp80e__tqr_test.go:14:29: expected boolean or range expression, found simple
    statement (missing parentheses around composite literal?)

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    divisor_count := 1\n  \
    \  divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count\
    \ := 1\n    divisor_count := 1\n    divisor_count := 1\n    divisor_count := 1\n\
    \    divis\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5i89ko74_test.go:86:6: expected ''('', found TestLargest_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmprw0vdzyq_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmprw0vdzyq_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb4x9f47n_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n < 2 {\n        return n\n    }\n    max := n\n    for i := 2;\
    \ i < n; i++ {\n        if n % i == 0 {\n            max = i\n        }\n    }\n\
    \    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate :=\
    \ largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpo9xh1fh1_test.go:41: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpo9xh1fh1_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073301
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    if n%2 == 0 {\n        return n\n    }\n    divisor := n\n    for\
    \ divisor > 1 {\n        if n%divisor == 0 {\n            return divisor\n   \
    \     }\n        divisor--\n    }\n    return n\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpfo8_6kd9_test.go:42: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpfo8_6kd9_test.go:42:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpfo8_6kd9_test.go:42: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpfo8_6kd9_test.go:42:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpfo8_6kd9_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073301
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073301
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 1\n    for divisor_count < n {\n\
    \        divisor *= 2\n        divisor_count++\n    }\n    return divisor\n}\n\
    \nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=1)', got '%!s(int=64)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=5)', got '%!s(int=512)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpttfd7lzj_test.go:38:\
    \ expected '%!s(int=50)', got '%!s(int=0)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpttfd7lzj_test.go:38: expected '%!s(int=7)', got '%!s(int=281474976710656)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073301
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n   \
    \ return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073301
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n</code>\n<|/ a tags=algorithm,math,big-o |>\n<| c |>\n\
    I believe this algorithm is O(n^2) because of the nested loops. But I could be\
    \ wrong.\n<|/ c |>\n<| c |>\nYes, you are right. My bad. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nThe algorithm is O(n^2) because of the nested loops. But I\
    \ could be wrong.\n<|/ c |>\n<| c |>\nThe algorithm is O(n^2) because of the nested\
    \ loops. But I could be wrong.\n<|/ c |>\n<| c |>\nThe algorithm is O(n^2) because\
    \ of the nested loops. But I could be wrong.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ algorithm is O(n^2) because of the nested loops. But I could be wrong.\n\nYes,\
    \ you are right. My bad. I'll edit my answer.\n<|/ a tags=algorithm,math,big-o\
    \ |>\n<| c |>\nThe algorithm is O(n^2) because of the nested loops. But I could\
    \ be wrong.\n<|/ c |>\n<| c |>\nThe algorithm is O(n^2) because of the nested\
    \ loops. But I could be wrong.\n<|/ c |>\n<| c |>\nThe algorithm is O(n^2) because\
    \ of the nested loops. But I could be wrong.\n<|/ c |>\n<| c |>\nThe algorithm\
    \ is O(n^2) because of the nested loops. But I could be wrong.\n<|/ c |>\n<| c\
    \ |>\nThe algorithm is O(n^2) because of the nested loops. But I could be wrong.\n\
    <|/ c |>\n<| a tags=algorithm,math,big-o |>\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^2) because of\
    \ the nested loops. But I could be wrong.\n\nThe algorithm is O(n^\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1f9bc701_test.go:22:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    divisor_count := 0\n    for divisor_count < n {\n\
    \        divisor *= 2\n        if divisor > n {\n            break\n        }\n\
    \        divisor_count++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=5)', got '%!s(int=16)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpjftm9_tj_test.go:41:\
    \ expected '%!s(int=50)', got '%!s(int=128)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpjftm9_tj_test.go:41: expected '%!s(int=7)', got '%!s(int=64)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n%divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmps50thxjw_test.go:37:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmps50thxjw_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 0
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor <= n / 2 {\n        if\
    \ n % divisor == 0 {\n            max = divisor\n        }\n        divisor++\n\
    \    }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n    for divisor < n / 2 {\n        divisor\
    \ *= 2\n        if divisor > max {\n            max = divisor\n        }\n   \
    \ }\n    return max\n}\n\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate\
    \ := largest_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ 1 },\n     { actual: candidate(7), expected: 1 },\n     { actual: candidate(10),\
    \ expected: 5 },\n     { actual: candidate(100), expected: 50 },\n     { actual:\
    \ candidate(49), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=5)', got '%!s(int=10)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpy4utig_z_test.go:40:\
    \ expected '%!s(int=50)', got '%!s(int=100)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpy4utig_z_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < n {\n        if n%divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor++\n    }\n\n \
    \   return max\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=math,algorithm,language-agnostic\
    \ |>\n<code>\nfunc TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
    \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n\
    \     { actual: candidate(100), expected: 50 },\n     { actual: candidate(49),\
    \ expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxj24s4sr_test.go:24:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073300
- exit_code: 1
  program: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int)\
    \ int {\n    divisor := 1\n    max := n\n\n    for divisor < max && n % divisor\
    \ == 0 {\n        divisor++\n    }\n\n    return divisor\n}\n\nfunc TestLargest_Divisor(t\
    \ *testing.T) {\n  candidate := largest_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: 1 },\n     { actual: candidate(7), expected: 1 },\n\
    \     { actual: candidate(10), expected: 5 },\n     { actual: candidate(100),\
    \ expected: 50 },\n     { actual: candidate(49), expected: 7 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestLargest_Divisor (0.00s)\n    --- FAIL: TestLargest_Divisor/test_num__0\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__1 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestLargest_Divisor/test_num__2\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=5)', got '%!s(int=3)'\n\
    \    --- FAIL: TestLargest_Divisor/test_num__3 (0.00s)\n        tmpdgy0ss75_test.go:39:\
    \ expected '%!s(int=50)', got '%!s(int=3)'\n    --- FAIL: TestLargest_Divisor/test_num__4\
    \ (0.00s)\n        tmpdgy0ss75_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073299
