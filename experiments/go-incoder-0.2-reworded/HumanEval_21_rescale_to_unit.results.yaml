language: go_test.go
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8in3q8uy_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp8in3q8uy_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp8in3q8uy_test.go:27:13: no new variables on left side of :=

    /tmp/tmp8in3q8uy_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr9reughr_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpr9reughr_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpr9reughr_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i := 0; i < len(numbers); i++ {\n        numbers[i] /= (largest - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazzpldru_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpazzpldru_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpazzpldru_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6k6co63h_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for index, number := range numbers {\n        numbers[index] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplluvh4pi_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmplluvh4pi_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmplluvh4pi_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] / largest - smallest\
    \ / smallest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fgjhyvs_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0fgjhyvs_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - largest) / 2\n    largest += (largest\
    \ - smallest) / 2\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest) / (largest -\
    \ smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprgkyhj3b_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy9kjye6u_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpy9kjye6u_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpy9kjye6u_test.go:25:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpy9kjye6u_test.go:26:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpy9kjye6u_test.go:29:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (numbers[1] - numbers[0])\n\
    \    largest -= (largest - numbers[0]) / (numbers[1] - numbers[0])\n    return\
    \ []float64{smallest, largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpli2c7sh2_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=48.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpli2c7sh2_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=48.9) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpli2c7sh2_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpli2c7sh2_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpli2c7sh2_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=10) %!s(float64=18)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmph72c3sng_test.go:52: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmph72c3sng_test.go:52:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmph72c3sng_test.go:52: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmph72c3sng_test.go:52:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmph72c3sng_test.go:52: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6ru9kvj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpb6ru9kvj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpb6ru9kvj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    result :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * largest / smallest + smallest / largest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprohm3lc3_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest -= (numbers[0] - largest) / (smallest - numbers[0])\n    return []float64{smallest,\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjqjsb9pc_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=+Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpjqjsb9pc_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjqjsb9pc_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=+Inf)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpjqjsb9pc_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1.3333333333333333) %!s(float64=0.5000000000000009)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpjqjsb9pc_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=11.333333333333334) %!s(float64=10.499999999999996)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = ((numbers[i] - smallest) / (largest - smallest))\
    \ % 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfq5nh0qb_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpfq5nh0qb_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpfq5nh0qb_test.go:25:13: no new variables on left side of :=

    /tmp/tmpfq5nh0qb_test.go:27:22: invalid operation: operator % not defined on ((numbers[i]
    - smallest) / (largest - smallest)) (value of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + 0.5\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp24l0ve7d_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        numbers[i] = numbers[i]*largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pziqj58_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled[i] = (number - min) /\
    \ (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmppfz7ahwe_test.go:49:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmppfz7ahwe_test.go:49:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest)) * (1.0 + 1.0)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5bcppeg_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa5bcppeg_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpa5bcppeg_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        numbers[i] = numbers[i]*largest+smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_th5de5v_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        result = append(result,\
    \ number/(max-min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp65a361qf_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04175365344467641) %!s(float64=1.0417536534446765)]'\n \
    \   --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp65a361qf_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=1.996007984031936)\
    \ %!s(float64=0.996007984031936)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp65a361qf_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1) %!s(float64=1.25)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp65a361qf_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.5) %!s(float64=0.25) %!s(float64=1.25)\
    \ %!s(float64=0.75) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp65a361qf_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=2.75)\
    \ %!s(float64=3.75) %!s(float64=3.25) %!s(float64=3.5)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number\n    }\n   \
    \ for i, number := range numbers {\n        numbers[i] *= (largest - smallest)\
    \ / (number - smallest)\n        numbers[i] += smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9re4udsx_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0])/2\n    largest += (largest\
    \ - numbers[0])/2\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest)/(largest - smallest))*(numbers[i]\
    \ - numbers[0])\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wq1oj04_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64\n    var maxVal float64\n    for _, number\
    \ := range numbers {\n        minVal = math.Min(minVal, number)\n        maxVal\
    \ = math.Max(maxVal, number)\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - minVal) / (maxVal\
    \ - minVal)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwz6tihb_test.go:16:18: undefined: math

    /tmp/tmppwz6tihb_test.go:17:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fe0v69r_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:27:13: no new variables on left side of :=

    /tmp/tmp0fe0v69r_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] / largest - smallest\
    \ / smallest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpznn5sxn0_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpznn5sxn0_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest -= (largest - numbers[0]) / (smallest - numbers[0])\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = smallest + (numbers[i] - smallest) * (largest - smallest) / (numbers[i] -\
    \ smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9l5ah3u3_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        result[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n   \
    \     rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number\n    }\n   \
    \ for i := range numbers {\n        numbers[i] *= (largest - smallest) / (largest\
    \ - numbers[i])\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_r7txzfa_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= smallest % 1.0\n    largest -= largest % 1.0\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\
    \ * largest / smallest + smallest / largest\n    }\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzi58jhhl_test.go:25:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpzi58jhhl_test.go:26:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpzi58jhhl_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptg5kzpx0_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptg5kzpx0_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = numbers[i] / largest - smallest\
    \ / smallest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73jdo6b9_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp73jdo6b9_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    return []float64{smallest,\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=-Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_32xudky_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1.3333333333333333) %!s(float64=5.222222222222222)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp_32xudky_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=11.333333333333334) %!s(float64=15.222222222222221)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hf3cy5d_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (numbers[1] - numbers[0])\n    largest\
    \ -= (largest - numbers[0]) / (numbers[1] - numbers[0])\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            number = smallest\n\
    \        }\n        if number > largest {\n            number = largest\n    \
    \    }\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpn_f864iv_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpn_f864iv_test.go:56: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpn_f864iv_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpn_f864iv_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpn_f864iv_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzw6ernv1_test.go:26:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpzw6ernv1_test.go:27:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpzw6ernv1_test.go:30:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * largest\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsmrvfma_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = numbers[i] / largest\n  \
    \  }\n    rescaled[0] = 0.0\n    rescaled[len(rescaled)-1] = 1.0\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7zfmjk0_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpk7zfmjk0_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64\n    var maxVal float64\n    for _, number\
    \ := range numbers {\n        minVal = math.Min(minVal, number)\n        maxVal\
    \ = math.Max(maxVal, number)\n    }\n    scaledNumbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        scaledNumbers[i] = numbers[i] / maxVal\
    \ - minVal / minVal\n    }\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8hjiyoi_test.go:16:18: undefined: math

    /tmp/tmpq8hjiyoi_test.go:17:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074640
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074639
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) / float64(len(numbers))\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpkmvah4la_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpkmvah4la_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpkmvah4la_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpkmvah4la_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpkmvah4la_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    var smallest float64\n    var largest\
    \ float64\n    for _, number := range numbers {\n        if smallest > number\
    \ {\n            smallest = number\n        }\n        if largest < number {\n\
    \            largest = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        result = append(result, ((number - smallest) / (largest - smallest)))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp3diup9rw_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp3diup9rw_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp3diup9rw_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp3diup9rw_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp3diup9rw_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0sqvz823_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0sqvz823_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxhkcce01_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpxhkcce01_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbo44z92_test.go:26:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmprbo44z92_test.go:27:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmprbo44z92_test.go:30:13: no new variables on left side of :=

    /tmp/tmprbo44z92_test.go:32:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    result :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoyuqas49_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fe0v69r_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:27:13: no new variables on left side of :=

    /tmp/tmp0fe0v69r_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpywetgne9_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpywetgne9_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpywetgne9_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number*((largest - smallest)/float64(len(numbers)))\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcjqq8gf7_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpcjqq8gf7_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpcjqq8gf7_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] - smallest + largest\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgl6d_l9p_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpgl6d_l9p_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += smallest % 1.0\n    largest += largest % 1.0\n    numbers :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest)) % 1.0\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoav35m_o_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoav35m_o_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoav35m_o_test.go:25:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoav35m_o_test.go:26:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoav35m_o_test.go:27:13: no new variables on left side of :=

    /tmp/tmpoav35m_o_test.go:29:22: invalid operation: operator % not defined on ((numbers[i]
    - smallest) / (largest - smallest)) (value of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var result []float64\n    var smallest, largest float64\n \
    \   for _, number := range numbers {\n        if smallest == 0 {\n           \
    \ smallest = number\n        }\n        if largest == 0 {\n            largest\
    \ = number\n        }\n        if number < smallest {\n            smallest =\
    \ number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    if smallest == 0 {\n        fmt.Println(\"smallest is 0\"\
    )\n    }\n    if largest == 0 {\n        fmt.Println(\"largest is 0\")\n    }\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      number = smallest / largest\n        }\n        if number > largest {\n\
    \            number = largest / smallest\n        }\n        result = append(result,\
    \ number*largest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4b0magpf_test.go:64: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=99.8) %!s(float64=2490.0099999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4b0magpf_test.go:64: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=10000) %!s(float64=4990)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4b0magpf_test.go:64: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=5) %!s(float64=10)\
    \ %!s(float64=15) %!s(float64=20) %!s(float64=25)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp4b0magpf_test.go:64: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=10) %!s(float64=5)\
    \ %!s(float64=25) %!s(float64=15) %!s(float64=20)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4b0magpf_test.go:64: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=180)\
    \ %!s(float64=165) %!s(float64=225) %!s(float64=195) %!s(float64=210)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptg5kzpx0_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptg5kzpx0_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest)) * (1.0 + 1.0/(len(numbers)-1))\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_tlqb51_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpn_tlqb51_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpn_tlqb51_test.go:27:13: no new variables on left side of :=

    /tmp/tmpn_tlqb51_test.go:29:22: invalid operation: ((numbers[i] - smallest) /
    (largest - smallest)) * (1.0 + 1.0 / (len(numbers) - 1)) (mismatched types float64
    and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i := range numbers {\n        numbers[i]\
    \ -= smallest\n        numbers[i] += (largest - numbers[i]) / (largest - numbers[0])\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5iup3hlm_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64\n    var maxVal float64\n    for _, number\
    \ := range numbers {\n        if number < minVal {\n            minVal = number\n\
    \        }\n        if number > maxVal {\n            maxVal = number\n      \
    \  }\n    }\n    scaledNumbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        scaledNumbers[i] = ((numbers[i] - minVal) / (maxVal\
    \ - minVal)) * 1.0\n    }\n    return scaledNumbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpu6gkcqpe_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpu6gkcqpe_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpu6gkcqpe_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpu6gkcqpe_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpu6gkcqpe_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpprpyqpnr_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpprpyqpnr_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpprpyqpnr_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    return []float64{smallest,\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=-Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_32xudky_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=5)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_32xudky_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=1.3333333333333333) %!s(float64=5.222222222222222)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp_32xudky_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=11.333333333333334) %!s(float64=15.222222222222221)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = ((numbers[i] - min) / (max - min)) * 2.0\n    }\n  \
    \  return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexxpgblu_test.go:28:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= (largest - smallest)\n    largest /= (largest\
    \ - smallest)\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest)\n        number += smallest\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i]-smallest)/(largest-smallest))*1.0\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpso8_ct38_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpso8_ct38_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpso8_ct38_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hf3cy5d_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbo44z92_test.go:26:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmprbo44z92_test.go:27:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmprbo44z92_test.go:30:13: no new variables on left side of :=

    /tmp/tmprbo44z92_test.go:32:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknl4ghcy_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    smallest /= largest\n    largest /= largest\n\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = numbers[i] * largest / smallest + largest\n    }\n    return result\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4vkok31y_test.go:55: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=50.9) %!s(float64=1246.005)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4vkok31y_test.go:55: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=201.40080160320642) %!s(float64=101)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4vkok31y_test.go:55: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=6) %!s(float64=11)\
    \ %!s(float64=16) %!s(float64=21) %!s(float64=26)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp4vkok31y_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=6)\
    \ %!s(float64=26) %!s(float64=16) %!s(float64=21)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4vkok31y_test.go:55: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=17.363636363636363)\
    \ %!s(float64=16) %!s(float64=21.454545454545457) %!s(float64=18.72727272727273)\
    \ %!s(float64=20.090909090909093)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number\n    }\n   \
    \ for i := range numbers {\n        numbers[i] *= (largest - smallest) / (numbers[i]\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzxafmfo_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3bbm3vm_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = numbers[i] * largest / smallest +\
    \ smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuwyydvo6_test.go:26:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpuwyydvo6_test.go:27:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpuwyydvo6_test.go:30:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number*((largest - smallest)/float64(len(numbers)))\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjzhkca__test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmppjzhkca__test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmppjzhkca__test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq92rp1e__test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpq92rp1e__test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpq92rp1e__test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for index, number := range numbers {\n        numbers[index] = number * largest\
    \ / smallest + 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptf3huaj0_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = numbers[i]/largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr_r21qe8_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] =\
    \ (numbers[i] - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6ru9kvj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpb6ru9kvj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpb6ru9kvj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= (largest - smallest)\n    largest /= (largest\
    \ - smallest)\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest)\n        number += smallest\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + 0.5\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5asanb6__test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] - smallest\n   \
    \ }\n    for i := range result {\n        result[i] = result[i]/largest\n    }\n\
    \    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbui6b2bg_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpbui6b2bg_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := make([]float64, len(numbers))\n    for i := range\
    \ result {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        numbers[i] = numbers[i]*largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3pziqj58_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n\n    min /= max\
    \ - min\n    max /= max - min\n\n    for _, number := range numbers {\n      \
    \  number *= max - min\n        number += min\n    }\n\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp14ch4jjt_test.go:56: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp14ch4jjt_test.go:56: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp14ch4jjt_test.go:56: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp14ch4jjt_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp14ch4jjt_test.go:56: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest -= (largest - numbers[0]) / (largest - numbers[0])\n    smallest\
    \ += numbers[0]\n    largest += numbers[0]\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / (number - numbers[0])\n        number\
    \ += smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjffa7aj2_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpjffa7aj2_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjffa7aj2_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpjffa7aj2_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjffa7aj2_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest /= (largest - smallest)\n    largest /= (largest\
    \ - smallest)\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest)\n        number += smallest\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpfme9dg32_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpfme9dg32_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpfme9dg32_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpfme9dg32_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpfme9dg32_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var minVal float64\n    var maxVal float64\n    for _, number\
    \ := range numbers {\n        minVal = math.Min(minVal, number)\n        maxVal\
    \ = math.Max(maxVal, number)\n    }\n    rescaledNumbers := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        rescaledNumbers[i] = ((numbers[i]\
    \ - minVal) / (maxVal - minVal)) * 1.0\n    }\n    return rescaledNumbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyi1phl2r_test.go:16:18: undefined: math

    /tmp/tmpyi1phl2r_test.go:17:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkycraos_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpwkycraos_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpwkycraos_test.go:27:13: no new variables on left side of :=

    /tmp/tmpwkycraos_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hf3cy5d_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp9hf3cy5d_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074639
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        rescaled[i] = (number - min) /\
    \ (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmppfz7ahwe_test.go:49:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmppfz7ahwe_test.go:49:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmppfz7ahwe_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074644
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknl4ghcy_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var smallest float64\n    var largest float64\n    for _, number\
    \ := range numbers {\n        if smallest > number {\n            smallest = number\n\
    \        }\n        if largest < number {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) + smallest\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp601my7op_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp601my7op_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp601my7op_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp601my7op_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp601my7op_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074645
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = ((number - min) / (max - min)) * 2.0\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprhir5x51_test.go:28:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoyuqas49_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i := range numbers {\n        numbers[i] *= (largest - smallest) / (numbers[i]\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_kir41e_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpi_kir41e_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpi_kir41e_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuy7x0qj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for index, number := range\
    \ numbers {\n        numbers[index] = number * (largest - smallest) / (largest\
    \ - smallest + 1.0)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3l9b9kwv_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp3l9b9kwv_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp3l9b9kwv_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuy7x0qj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbhzx36e6_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpbhzx36e6_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsuy7x0qj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpsuy7x0qj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= largest\n    smallest /= largest\n    smallest += largest\n    return []float64{smallest,\
    \ largest}\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpt4o8lfu2_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064132) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpt4o8lfu2_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0.499) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpt4o8lfu2_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.19999999999999996)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpt4o8lfu2_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.19999999999999996)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n  \
    \      tmpt4o8lfu2_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.7333333333333333)\
    \ %!s(float64=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknl4ghcy_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpknl4ghcy_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for index, number := range numbers {\n        numbers[index] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplluvh4pi_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmplluvh4pi_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmplluvh4pi_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    diff := max - min\n    diff /= float64(len(numbers))\n\
    \    diff *= 0.5\n    for _, n := range numbers {\n        n *= diff\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp5vv2atd2_test.go:52: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp5vv2atd2_test.go:52: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp5vv2atd2_test.go:52: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp5vv2atd2_test.go:52: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp5vv2atd2_test.go:52: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeskbd8uj_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpeskbd8uj_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpeskbd8uj_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n\
    \        numbers[i] = numbers[i]/largest\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7n9hs___test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    result :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = numbers[i] * (largest - smallest) + smallest\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjcz872n9_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=97.8) %!s(float64=2392.21)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpjcz872n9_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjcz872n9_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=5) %!s(float64=9)\
    \ %!s(float64=13) %!s(float64=17) %!s(float64=21)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpjcz872n9_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=9.111111111111112)\
    \ %!s(float64=5.222222222222222) %!s(float64=20.77777777777778) %!s(float64=13.000000000000002)\
    \ %!s(float64=16.88888888888889)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjcz872n9_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=57.999999999999986)\
    \ %!s(float64=54.1111111111111) %!s(float64=69.66666666666664) %!s(float64=61.88888888888887)\
    \ %!s(float64=65.77777777777776)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = ((numbers[i] - min) / (max - min)) * 2.0\n    }\n  \
    \  return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpexxpgblu_test.go:28:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074642
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (numbers[0] - numbers[1])\n\
    \    largest -= (largest - numbers[0]) / (numbers[1] - numbers[0])\n    for _,\
    \ number := range numbers {\n        numbers[len(numbers)-1] = number\n    }\n\
    \    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpe3n4t916_test.go:50: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=48.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpe3n4t916_test.go:50: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=50.9) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpe3n4t916_test.go:50: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpe3n4t916_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpe3n4t916_test.go:50: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=18)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= (largest - smallest)\n    largest /= (largest\
    \ - smallest)\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest)\n        number += smallest\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk0900rrh_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074643
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6k6co63h_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptg5kzpx0_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptg5kzpx0_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowqm6x7p_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpowqm6x7p_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpowqm6x7p_test.go:25:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpowqm6x7p_test.go:26:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpowqm6x7p_test.go:29:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest)) * (largest - smallest + 1.0) + smallest\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp98lou04o_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp98lou04o_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp98lou04o_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n\
    \    largest += (numbers[0] - smallest) / (largest - numbers[0])\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number * (largest - smallest) + smallest\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjcok5nz_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= (min % 1)\n    max += (max % 1)\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkzqhvj36_test.go:26:13: invalid operation: operator % not defined on min
    (variable of type float64)

    /tmp/tmpkzqhvj36_test.go:27:13: invalid operation: operator % not defined on max
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074645
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest -= (smallest - numbers[0]) / (numbers[0] - numbers[1])\n\
    \    largest -= (largest - numbers[0]) / (numbers[0] - numbers[1])\n    smallest\
    \ += numbers[1]\n    largest += numbers[1]\n    return []float64{smallest, largest}\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpr04fwff5_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=51.9) %!s(float64=100.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpr04fwff5_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100.8) %!s(float64=149.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpr04fwff5_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=3) %!s(float64=11)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpr04fwff5_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=3) %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpr04fwff5_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=23) %!s(float64=23)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for i := range numbers {\n        numbers[i] = numbers[i]/largest\n      \
    \  numbers[i] = numbers[i]*smallest + 1.0\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0gno2f9e_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for index, number := range numbers {\n        numbers[index] = number * largest\
    \ / smallest + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwcij3i1i_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpwcij3i1i_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpwcij3i1i_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    min -= 0.5\n    max +=\
    \ 0.5\n    numbers := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = ((numbers[i] - min) / (max - min)) * 2.0\n    }\n  \
    \  return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpij71vf9m_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    min /= (max - min) * 0.5\n\
    \    max /= (max - min) * 0.5\n    numbers := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        numbers[i] = ((n - min) / (max - min))\
    \ * 0.5 + 0.5\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp930ewapo_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = ((number - min) /\
    \ (max - min)) * 2.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxu8h913m_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp8c2h763n_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmp8c2h763n_test.go:49:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp8c2h763n_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp8c2h763n_test.go:49:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp8c2h763n_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaledNumbers []float64\n    for _, number := range numbers\
    \ {\n        rescaledNumbers = append(rescaledNumbers, number/min(number))\n \
    \   }\n    return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu56k567f_test.go:15:58: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fe0v69r_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp0fe0v69r_test.go:27:13: no new variables on left side of :=

    /tmp/tmp0fe0v69r_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074638
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var rescaledNumbers []float64\n    var smallestNumber float64\n\
    \    var largestNumber float64\n    var smallestIndex int\n    var largestIndex\
    \ int\n    for _, number := range numbers {\n        if smallestNumber == 0 {\n\
    \            smallestNumber = number\n            smallestIndex = 0\n        }\n\
    \        if largestNumber == 1 {\n            largestNumber = number\n       \
    \     largestIndex = 1\n        }\n        if number < smallestNumber {\n    \
    \        rescaledNumbers = append(rescaledNumbers, 0)\n            smallestNumber\
    \ = number\n            smallestIndex = 0\n        }\n        if number > largestNumber\
    \ {\n            rescaledNumbers = append(rescaledNumbers, 1)\n            largestNumber\
    \ = number\n            largestIndex = 1\n        }\n        rescaledNumbers =\
    \ append(rescaledNumbers, number-smallestNumber)/(largestNumber-smallestNumber)\n\
    \    }\n    return rescaledNumbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdaxbpgfk_test.go:16:9: smallestIndex declared but not used

    /tmp/tmpdaxbpgfk_test.go:17:9: largestIndex declared but not used

    /tmp/tmpdaxbpgfk_test.go:37:27: invalid operation: append(rescaledNumbers, number
    - smallestNumber) / (largestNumber - smallestNumber) (mismatched types []float64
    and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3bbm3vm_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074646
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers[1:] {\n        if n < min {\n            min = n\n        }\n      \
    \  if n > max {\n            max = n\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o1_bnko_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5o1_bnko_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 1.0\n    largest += 1.0\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number * largest /\
    \ smallest + 1.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6k6co63h_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074636
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    result := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        result[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074636
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = ((numbers[i] - smallest) /\
    \ (largest - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoyuqas49_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoyuqas49_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074641
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if smallest > number {\n            smallest\
    \ = number\n        }\n        if largest < number {\n            largest = number\n\
    \        }\n    }\n    smallest /= (largest - smallest)\n    smallest += 1.0\n\
    \    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest +=\
    \ 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\n    smallest /= 2.0\n    smallest\
    \ += 1.0\n    smallest /= 2.0\n    smallest += 1.0\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvjeotwug_test.go:115:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i, number := range numbers {\n        numbers[i] = number * largest / smallest\
    \ + smallest / largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj3bbm3vm_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpj3bbm3vm_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074643
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = ((number - min) /\
    \ (max - min)) * 2.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxu8h913m_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074646
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest += smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ index, number := range numbers {\n        numbers[index] = number * (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuilxxh5l_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpuilxxh5l_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpuilxxh5l_test.go:25:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpuilxxh5l_test.go:26:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpuilxxh5l_test.go:29:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \n    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = numbers[i]/smallest + largest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpup1t1rzf_test.go:28:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpup1t1rzf_test.go:29:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpup1t1rzf_test.go:31:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    for _,\
    \ number := range numbers {\n        number *= (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpk_q0sm3m_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074639
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ += 0.5\n    largest += 0.5\n    numbers := make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        numbers[i] = number\n    }\n   \
    \ for i := range numbers {\n        numbers[i] *= (largest - smallest) / (largest\
    \ - numbers[i])\n        numbers[i] += smallest - numbers[i]\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph8km5qk2_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest += largest % 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = ((numbers[i] - smallest) / (largest - smallest))\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcib3ad_d_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpcib3ad_d_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpcib3ad_d_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074647
