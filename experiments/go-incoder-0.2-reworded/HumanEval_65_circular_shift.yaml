name: HumanEval_65_circular_shift
language: go_test.go
prompt: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n"
tests: "func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n   \
  \  { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
  \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
  \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
  \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x <<=\
    \ shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n",
  "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n     \
    \   x = x >> 1\n    }\n    return s\n}\n", "    x %= 10\n    x <<= shift\n   \
    \ x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x -= shift\n    x /= 10\n    x %= 10\n  \
    \  return strconv.Itoa(x) + strconv.Itoa(10 - x)\n}\n", "    digits := make([]int,\
    \ len(strconv.Itoa(x)))\n    shift %= len(digits)\n    for i := 0; i < shift;\
    \ i++ {\n        digits[i] = digits[i+1]\n    }\n    for i := 0; i < len(digits);\
    \ i++ {\n        digits[i] = digits[i+shift]\n    }\n    return fmt.Sprintf(\"\
    %s\", digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x)\n    }\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    return strconv.Itoa(x)\n}\n", "    if shift > len(x) {\n   \
    \     return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int, len(x))\n\
    \    for i := 0; i < len(x); i++ {\n        digits[i] = x%10\n        x /= 10\n\
    \    }\n    for i := 0; i < shift; i++ {\n        digits[len(digits)-i-1]++\n\
    \    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n     \
    \   digits[i] = digits[i+1]\n    }\n    digits = append(digits, 0)\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x\
    \ << 1\n    }\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    digits := make([]int,\
    \ len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n        digits[i]\
    \ = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[i],\
    \ digits[len(digits)-i-1] = digits[len(digits)-i-1], digits[i]\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n", "    if shift > len(x) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int, len(x))\n    for i := 0;\
    \ i < len(s); i++ {\n        s[i] = x\n        x = x>>1\n    }\n    for i := 0;\
    \ i < shift; i++ {\n        x = x<<1\n    }\n    for i := 0; i < len(s); i++ {\n\
    \        s[i] = x\n        x = x>>1\n    }\n    return fmt.Sprintf(\"%v\", s)\n\
    }\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x\
    \ %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    ", "    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    digits\
    \ := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ < 0 {\n        shift = len(digits) + shift\n    }\n    result := \"\"\n    for\
    \ _, d := range digits {\n        result += fmt.Sprintf(\"%c\", digits[(x + digits[shift])\
    \ % 10])\n    }\n    return result\n}\n", "    x %= 10\n    shift %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"\
    %0*d\", len(x), x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n \
    \       if i == 0 {\n            s = fmt.Sprintf(\"%d\", x)\n        } else {\n\
    \            s = fmt.Sprintf(\"%d%s\", x, s)\n        }\n    }\n    return s\n\
    }\n", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n   \
    \ x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 *\
    \ shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n", "    s := \"\"\n    for i := 0; i < shift;\
    \ i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n\
    \    return s\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    shift >>= 1\n    for i :=\
    \ 0; i < shift; i++ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n\
    \    }\n    x %= 10\n    y := x\n    for i := 0; i < shift; i++ {\n        y =\
    \ y*10 + x\n        x = y\n    }\n    return fmt.Sprintf(\"%v\", y)\n}\n", " \
    \   x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    x += '0'\n\
    \    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n   \
    \ shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n\
    \    return string(x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift\
    \ /= 10\n    for i := 0; i < shift; i++ {\n        x = 10*x + x\n    }\n    return\
    \ fmt.Sprintf(\"%v\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n  \
    \  x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return ", "    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    x /= 10\n \
    \   x += \"0\"\n    return strconv.Itoa(x)\n}\n", "    digits := []int{0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9}\n    if shift > len(digits) {\n        shift = len(digits)\n\
    \    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result +=\
    \ digits[x%10]\n        x = x/10\n    }\n    result += digits[x]\n    return result\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift =\
    \ len(x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= ", "    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    digits\
    \ := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n", "    x %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    shift %= len(x)\n    x <<= shift\n    x >>= shift\n    x %= 10\n \
    \   return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x)\
    \ >> shift))\n    }\n    return strconv.Itoa(int(strconv.Itoa(x) << shift))\n\
    }\n", "    x %= 10\n    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n", "    s := \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n\
    \    }\n    return s\n}\n", "    s := \"\"\n    for shift > 0 {\n        if shift\
    \ >= len(x) {\n            s += string(x[len(x)-1:])\n            break\n    \
    \    }\n        s += string(x[len(x)-1-shift:])\n        shift -= len(x)\n   \
    \ }\n    return s\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(x)\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift\
    \ /= 10\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n",
  "    result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift;\
    \ i++ {\n        result = strconv.Itoa(x) + result\n        x = x >> 1\n    }\n\
    \    return result + strconv.Itoa(x)\n}\n", "    if shift > len(x) {\n       \
    \ return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x <<= shift\n    x >>=\
    \ shift\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    x %= (10 * shift)\n   \
    \ x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 *\
    \ shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n",
  "    x %= 10\n    x <<= shift\n    x %= 10\n    x >>= shift\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    return strconv.Itoa(x)\n}\n", "    s := \"\"\n    for i\
    \ := 0; i < shift; i++ {\n        if i == 0 {\n            s = fmt.Sprintf(\"\
    %d\", x)\n        } else {\n            s = fmt.Sprintf(\"%d%s\", x, s)\n    \
    \    }\n    }\n    return s\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    ", "   \
    \ x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= ", "    x %= 10\n \
    \   shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n", "    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return\
    \ strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n       \
    \ return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift\
    \ /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n \
    \   shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n\
    \    shift /= 10\n    x ", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    x += (10 - x) % 10\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x /= 10\n  \
    \  x %= 10\n    x <<= shift\n    x /= 10\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n\
    \        x = x >> 1\n    }\n    return s\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    ", "    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n     \
    \   shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %=\
    \ 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    ", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n", "    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n", "    s := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ i > shift; i-- {\n        s += x%10\n        x /= 10\n    }\n    for i := len(strconv.Itoa(x));\
    \ i < shift; i++ {\n        s += x%10\n        x /= 10\n    }\n    return s\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       return strconv.Itoa(x) + strconv.Itoa(10-len(strconv.Itoa(x)))\n    }\n\
    \    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    ", "   \
    \ x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n  \
    \  x /= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n\
    }\n", "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    ", "    x %= 10\n    x <<= shift\n    x >>= shift\n   \
    \ x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= (10 * shift)\n \
    \   x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(int(strconv.Itoa(x) >> shift))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x\
    \ * 10 + x\n    }\n    return strconv.Itoa(int(strconv.Itoa(x)))\n}\n", "    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift -=\
    \ len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n        x = 10*x + 1\n\
    \    }\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    ", "    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x =\
    \ x/10\n    }\n    for i := 0; i < shift; i++ {\n        ", "    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    ", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x ", " \
    \   if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %=\
    \ 10\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n",
  "    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n", "    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n", "    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n  \
    \  x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n\
    \        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= ", "    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n   \
    \ x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 *\
    \ shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n  \
    \  x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n", "    digits := []int{x}\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n", "    digits := make([]int, len(strconv.Itoa(x)))\n\
    \    for i := 0; i < len(digits); i++ {\n        digits[i] = x%10\n        x /=\
    \ 10\n    }\n    for i := len(digits); i < shift; i++ {\n        digits[i] = 0\n\
    \    }\n    for i := shift; i < len(digits); i++ {\n        digits[i] = digits[i-shift]\n\
    \    }\n    return strconv.Itoa(digits)\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ i > shift; i-- {\n        x = x >> 1\n    }\n    return strconv.Itoa(x)\n}\n",
  "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n\
    \    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x << 1\n    }\n\
    \    for i := 0; i < len(x); i++ {\n        x = x + x\n    }\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return\
    \ strconv.Itoa(x)\n    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    if shift > len(x)\
    \ {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n",
  "    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits\
    \ := make([]int, len(x))\n    copy(digits, x)\n    for i := len(digits) - 1; i\
    \ >= shift; i-- {\n        digits[i] = digits[i-1]\n    }\n    for i := shift;\
    \ i < len(x); i++ {\n        digits[i] = digits[i-shift]\n    }\n    return fmt.Sprintf(\"\
    %v\", digits)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n      \
    \  s += string(x)\n        x = x >> 1\n    }\n    return s\n}\n", "    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n \
    \       shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n   \
    \ }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n", "    x %= 10\n    x <<= shift\n    x >>= shift\n \
    \   x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ <<= ", "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x))[shift:])\n\
    \    }\n    return strconv.Itoa(int(strconv.Itoa(x))[:shift])\n}\n", "    if shift\
    \ > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    digits\
    \ := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = x%10\n        x = x/10\n    }\n    for i := len(digits)-1;\
    \ i >= shift; i-- {\n        digits[i] = digits[i-1]\n    }\n    for i := shift;\
    \ i < len(digits); i++ {\n        digits[i] = digits[i-1]\n    }\n    return strconv.Itoa(digits)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift =\
    \ len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n   \
    \ x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n   \
    \ x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n   \
    \ x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n   \
    \ x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n\
    \        shift = len(x)\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(x) {\n        shift = len(", "    digits := []int{x}\n   \
    \ for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n", "    x %= (10 * shift)\n\
    \    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n\
    \    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n    if x < 10 {\n       \
    \ return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n    x %= (10 * shift)\n \
    \   if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= 10\n \
    \   x %= (10 * shift)\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n\
    \    }\n    x /= 10\n    x %= (10 * shift)", "    s := \"\"\n    x %= 10\n   \
    \ for i := 0; i < shift; i++ {\n        if x > 0 {\n            s += fmt.Sprintf(\"\
    %d\", x%10)\n            x /= 10\n        } else {\n            x /= 10\n    \
    \        s += fmt.Sprintf(\"%d\", x%10)\n        }\n    }\n    if x > 0 {\n  \
    \      s += fmt.Sprintf(\"%d\", x%10)\n    }\n    return s\n}\n", "    x %= (10\
    \ * shift)\n    if x < 0 {\n        x += 10 * shift\n    }\n    x /= 10 * shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x -= shift\n    x /= 10\n    x /= 10\n    x\
    \ /= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= 10\n   \
    \ x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %=\
    \ 10\n    x %= 10\n    x %= 10\n    x %= 10\n    x %= 10\n", "    x %= 10\n  \
    \  shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    return strconv.Itoa(x) + strconv.Itoa(10-x)\n}\n", "    x %=\
    \ 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x\
    \ %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= ", "    digits := []int{x}\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i\
    \ < len(digits); i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"\
    %d\", digits[len(digits)-1])\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift += x\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n \
    \   x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x ", " \
    \   x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n", "    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n", "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n  \
    \      s += string(x)\n        x = x >> 1\n    }\n    return s\n}\n", "    digits\
    \ := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /=\
    \ 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n\
    \    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n\
    \    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n   \
    \ shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n  \
    \  x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift\
    \ %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /=\
    \ 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /=\
    \ 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n\
    \    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n\
    \    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n   \
    \ shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n  \
    \  x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift\
    \ %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /=\
    \ 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /=\
    \ 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n\
    \    shift %= 10\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n\
    \    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n   \
    \ shift /= 10\n    x %= 10\n    shift %= 10\n    x /= 10\n    shift /= 10\n  \
    \  x %= 10\n    shift ", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n   \
    \ shift %= len(strconv.Itoa(x+1))\n    shift %= len(strconv.Itoa(x+2))\n    shift\
    \ %= len(strconv.Itoa(x+3))\n    shift %= len(strconv.Itoa(x+4))\n    shift %=\
    \ len(strconv.Itoa(x+5))\n    shift %= len(strconv.Itoa(x+6))\n    shift %= len(strconv.Itoa(x+7))\n\
    \    shift %= len(strconv.Itoa(x+8))\n    shift %= len(strconv.Itoa(x+9))\n  \
    \  shift %= len(strconv.Itoa(x+10))\n    shift %= len(strconv.Itoa(x+11))\n  \
    \  shift %= len(strconv.Itoa(x+12))\n    shift %= len(strconv.Itoa(x+13))\n  \
    \  shift %= len(strconv.Itoa(x+14))\n    shift %= len(strconv.Itoa(x+15))\n  \
    \  shift %= len(strconv.Itoa(x+16))\n    shift %= len(strconv.Itoa(x+17))\n  \
    \  shift %= len(strconv.Itoa(x+18))\n    shift %= len(strconv.Itoa(x+19))\n  \
    \  shift %= len(strconv.Itoa(x+20))\n    shift %= len(strconv.Itoa(x+21))\n  \
    \  shift %= len(strconv.Itoa(x+22))\n    shift %= len(strconv.Itoa(x+23))\n  \
    \  shift %= len(strconv.Itoa(x+24))\n    shift %= len(strconv.Itoa(x+25))\n  \
    \  shift %= len(strconv.Itoa(x+26))\n    shift %= len(strconv.Itoa(x+27))\n  \
    \  shift %= len(strconv.Itoa(x+28))\n    shift %= len(strconv.Itoa(x+29))\n  \
    \  shift %= len(strconv.Itoa(x+30))\n    shift %= len(strconv.Itoa(x+31))\n  \
    \  shift %= len(strconv.Itoa(x+32))\n    shift %= len(strconv.Itoa(x+33))\n  \
    \  shift %= len(strconv.Itoa(x+34))\n    shift %= len(strconv.Itoa(x+35))\n  \
    \  shift %= len(strconv.Itoa(x+36))\n    shift %= ", "    digits := []int{}\n\
    \    i := 0\n    for ; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for ; i < len(x); i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n",
  "    digits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n \
    \   if shift < 0 {\n        shift = len(digits) + shift\n    }\n    result :=\
    \ \"\"\n    for i := 0; i < shift; i++ {\n        result = digits[digits[i]] +\
    \ result\n    }\n    for i := 0; i < len(digits)-shift; i++ {\n        result\
    \ = digits[digits[i]] + result\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n",
  "    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n", "    digits := []int{x}\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n   \
    \ }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    digits\
    \ := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(string(x)) {\n        shift = len(string(x))\n    }\n    x <<= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    return string(x)\n}\n", "    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    x +=\
    \ 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n    x <<= shift\n    x >>=\
    \ shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x = x/10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"\
    %d\", x)\n    }\n    return s\n}\n", "    digits := []int{}\n    for i := 0; i\
    \ < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n  \
    \  }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n", "    digits\
    \ := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n",
  "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return\
    \ strconv.Itoa(int(strconv.Itoa(x) >> shift))\n    }\n    return strconv.Itoa(int(strconv.Itoa(x)\
    \ << shift))\n}\n", "    x %= 10\n    shift %= 10\n    result := \"\"\n    for\
    \ i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%d%s\", x, result)\n\
    \        x /= 10\n    }\n    return fmt.Sprintf(\"%d%s\", x, result)\n}\n", " \
    \   x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return\
    \ strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift])\
    \ + circular_shift(x, shift+1)\n}\n", "    x %= 10\n    shift %= 10\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n\
    \    shift /= 10\n    for i := 0; i < shift; i++ {\n        x = 10*x + x\n   \
    \ }\n    return fmt.Sprintf(\"%v\", x)\n}\n", "    if shift > len(x) {\n     \
    \   return fmt.Sprintf(\"%v\", x)\n    }\n    x -= x%10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /=\
    \ 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= 10\n    x /= ",
  "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\"\
    , x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s\
    \ += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    return s\n}\n", " \
    \   x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n       \
    \ digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n", "    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift;\
    \ i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits)\n}\n", "    digits := []int{x}\n    for i := 0;\
    \ i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0;\
    \ i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return\
    \ fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    x %= 10\n    shift %=\
    \ 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[shift:])\n\
    \    }\n    return strconv.Itoa(x[:shift])\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift\
    \ %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n\
    \    shift += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift\
    \ += len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    shift += len(strconv.Itoa(x))\n\
    \    ", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\"\
    , digits)\n}\n", "    digits := make([]int, len(strconv.Itoa(x)))\n    shift %=\
    \ len(digits)\n    for i := 0; i < shift; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    for i := 0; i < len(digits)-shift; i++ {\n        digits[i] = digits[i+shift]\n\
    \    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n", "    s := \"\"\n    x %=\
    \ 10\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x, s)\n\
    \        x /= 10\n    }\n    return s\n}\n", "    s := \"\"\n    shift %= len(strconv.Itoa(x))\n\
    \    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        s += strconv.Itoa(x%10)\n\
    \        x /= 10\n    }\n    for i := len(strconv.Itoa(x)); i < shift; i++ {\n\
    \        s += strconv.Itoa(x%10)\n        x /= 10\n    }\n    return s\n}\n",
  "    s := \"\"\n    for shift > 0 {\n        s += string(x)\n        x >>= 1\n \
    \       shift--\n    }\n    return s\n}\n", "    x %= 10\n    shift %= 10\n  \
    \  if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    digits\
    \ := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n", "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s +\
    \ x%10\n        x = x/10\n    }\n    if x < 0 {\n        s = string([]byte{byte(s),\
    \ byte(x % 10)})\n    }\n    return s\n}\n", "    digits := []int{x}\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n", "    result\
    \ := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x));\
    \ shift > 0; i-- {\n        result += strconv.Itoa(x>>uint(i))\n    }\n    return\
    \ result\n}\n", "    digits := []int{}\n    for i := 0; i < shift; i++ {\n   \
    \     digits = append(digits, x%10)\n        x = x/10\n    }\n    digits = append(digits,\
    \ x%10)\n    return fmt.Sprintf(\"%d\", digits)\n}\n", "    x %= 10\n    x <<=\
    \ shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x\
    \ %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x\
    \ >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x ", "  \
    \  x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n", "    x %= (10 * shift)\n    x /= 10 * shift\n    x %=\
    \ (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n", "    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x ", "    x %= 10\n    shift\
    \ %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n}\n", " \
    \   digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits)\n}\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    digits := []int{x}\n    for\
    \ i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for\
    \ i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n \
    \   digits = append(digits, 0)\n    return fmt.Sprintf(\"%v\", digits)\n}\n",
  "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    return strconv.Itoa(x) + strconv.Itoa(int(x)%10)\n}\n",
  "    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n     \
    \   x = x >> 1\n    }\n    return s\n}\n", "    x %= 10\n    shift %= 10\n   \
    \ if shift > len(x) {\n        shift = len(x) - shift\n    }\n    result := \"\
    \"\n    for i := 0; i < shift; i++ {\n        result += x%10\n        x /= 10\n\
    \    }\n    result += x\n    return result\n}\n", "    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n",
  "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n\
    \    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result =\
    \ fmt.Sprintf(\"%d%s\", x%10, result)\n        x /= 10\n    }\n    if x > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", x%10, result)\n    }\n    return result\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift =\
    \ len(x) - shift\n    }\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n", "    digits := []int{x}\n    for i := 0; i < shift; i++ {\n  \
    \      digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++\
    \ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n  \
    \  shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    s := \"\"\n    for shift >\
    \ 0 {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n        shift--\n\
    \    }\n    return s + fmt.Sprintf(\"%d\", x)\n}\n", "    x %= 10\n    shift %=\
    \ 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x", "    if shift > len(x) {\n\
    \        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int, len(x))\n\
    \    copy(digits, x)\n    for i := len(digits) - shift; i < len(digits); i++ {\n\
    \        digits[i] = digits[i+shift]\n    }\n    return fmt.Sprintf(\"%v\", digits)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n \
    \       shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n \
    \   return strconv.Itoa(x)\n}\n", "    x %= 10\n    shift %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n", "    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n", "    x\
    \ %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift -= len(x)\n \
    \   }\n    x <<= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"\
    %0*d\", len(x), x)\n}\n", "    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        return strconv.Itoa(int(x)%10)\n    }\n    shift %= len(strconv.Itoa(x))\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    ", "    result := \"\"\
    \n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n      \
    \  result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    if shift\
    \ < len(strconv.Itoa(x)) {\n        result = strconv.Itoa(x) + result\n    }\n\
    \    return result\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n  \
    \  x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= ", "    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x >>= shift\n    return strconv.Itoa(x)\n\
    }\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n\
    \    x += \"0\"\n    return strconv.Itoa(x)\n}\n", "    result := \"\"\n    shift\
    \ %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)); i > shift; i-- {\n\
    \        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    for i := len(strconv.Itoa(x));\
    \ i < shift; i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n  \
    \  }\n    return result\n}\n", "    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= 0\n    result := \"\"\n    for i := len(strconv.Itoa(x));\
    \ i > 0; i-- {\n        result += strconv.Itoa(x%10)\n        x >>= 10\n    }\n\
    \    if shift > 0 {\n        result += \"0\"\n    }\n    return result\n}\n",
  "    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= ", "    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n\
    \        return strconv.Itoa(x)\n    }\n    x /= 10\n    shift /= 10\n    result\
    \ := \"\"\n    for i := 0; i < shift; i++ {\n        result = strconv.Itoa(int(result)\
    \ + int(strconv.Itoa(x%10)))\n        x /= 10\n    }\n    return strconv.Itoa(int(result)\
    \ + int(strconv.Itoa(x)))\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
