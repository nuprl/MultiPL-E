language: go_test.go
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_string\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3h5w7pi_test.go:48:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stacks := [][]string{}\n \
    \   stacks = append(stacks, []string{paren_string})\n\n    for _, stack := range\
    \ stacks {\n        result := append(result, stack[0])\n        if len(stack)\
    \ == 1 {\n            continue\n        }\n        stack = stack[1:]\n       \
    \ for _, item := range stack {\n            stacks = append(stacks, []string{item})\n\
    \        }\n    }\n\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphx3zn4_t_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, character := range paren_string {\n    \
    \    if character == \"(\" {\n            if paren_group_open {\n            \
    \    fmt.Println(\"Error: unexpected open paren group\")\n                return\
    \ nil\n            }\n            paren_group_open = true\n            paren_group_string\
    \ += character\n            paren_group_count += 1\n        } else if character\
    \ == \")\" {\n            if paren_group_closed {\n                fmt.Println(\"\
    Error: unexpected close paren group\")\n                return nil\n         \
    \   }\n            paren_group_closed = true\n            paren_group_string +=\
    \ character\n            paren_group_count += 1\n        } else if character ==\
    \ \" \" {\n            if paren_group_open && paren_group_closed {\n         \
    \       fmt.Println(\"Error: unexpected space between paren groups\")\n      \
    \          return nil\n            }\n        } else if character == \"\\n\" {\n\
    \            if paren_group_open && paren_group_closed {\n                fmt.Println(\"\
    Error: unexpected newline between paren groups\")\n                return nil\n\
    \            }\n        } else {\n            paren_group_string += character\n\
    \        }\n    }\n    if paren_group_string == \"\" {\n        fmt.Println(\"\
    Error: empty paren group\")\n        return nil\n    }\n    if paren_group_count\
    \ != 1 {\n        fmt.Println(\"Error: unexpected paren group count\")\n     \
    \   return nil\n    }\n    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj76vmvbv_test.go:21:25: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmpj76vmvbv_test.go:27:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpj76vmvbv_test.go:29:32: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmpj76vmvbv_test.go:35:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpj76vmvbv_test.go:37:32: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpj76vmvbv_test.go:42:32: invalid operation: character == "\n" (mismatched
    types rune and untyped string)

    /tmp/tmpj76vmvbv_test.go:48:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_open_braces :=\
    \ 0\n    brace_close_braces := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count\
    \ := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n\
    \    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count\
    \ := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n\
    \    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count\
    \ := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n\
    \    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count\
    \ := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n\
    \    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count\
    \ := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n\
    \    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count\
    \ := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n\
    \    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count\
    \ := 0\n    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n\
    \    brace_open_braces_count := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count\
    \ := 0\n    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n\
    \    brace_close_braces_count := 0\n    brace_open_braces_count := 0\n    brace_close\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9b9je1jc_test.go:64:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_string\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3h5w7pi_test.go:48:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if character == \"(\" {\n\
    \            if paren_group_open {\n                fmt.Println(\"Found open paren\
    \ group\")\n                paren_group_open = false\n                paren_group_closed\
    \ = false\n                paren_group_string = paren_group_string + character\n\
    \            } else {\n                paren_group_open = true\n             \
    \   paren_group_closed = false\n                paren_group_string = paren_group_string\
    \ + character\n            }\n        } else if character == \")\" {\n       \
    \     if paren_group_open {\n                fmt.Println(\"Found closed paren\
    \ group\")\n                paren_group_open = false\n                paren_group_closed\
    \ = true\n                paren_group_string = paren_group_string + character\n\
    \            } else {\n                paren_group_open = false\n            \
    \    paren_group_closed = false\n                paren_group_string = paren_group_string\
    \ + character\n            }\n        } else if character == \" \" {\n       \
    \     if paren_group_open {\n                fmt.Println(\"Found space in paren\
    \ group\")\n                paren_group_string = paren_group_string + character\n\
    \            } else {\n                paren_group_string = paren_group_string\
    \ + character\n            }\n        } else {\n            if paren_group_open\
    \ {\n                fmt.Println(\"Found character in paren group\")\n       \
    \         paren_group_string = paren_group_string + character\n            } else\
    \ {\n                paren_group_string = paren_group_string + character\n   \
    \         }\n        }\n    }\n    if paren_group_string != \"\" {\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fcl6a5t_test.go:20:25: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmp_fcl6a5t_test.go:25:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:29:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:31:32: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmp_fcl6a5t_test.go:36:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:40:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:42:32: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmp_fcl6a5t_test.go:45:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:47:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:52:38: invalid operation: paren_group_string + character
    (mismatched types string and rune)

    /tmp/tmp_fcl6a5t_test.go:52:38: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_string += \"(\"\n    for _, char := range paren_string {\n    \
    \    if char == '(' {\n            if paren_group_open {\n                fmt.Println(\"\
    Error: unexpected open paren group\")\n                return nil\n          \
    \  }\n            paren_group_open = true\n            paren_group_string += char\n\
    \        } else if char == ')' {\n            if paren_group_closed {\n      \
    \          fmt.Println(\"Error: unexpected close paren group\")\n            \
    \    return nil\n            }\n            paren_group_closed = true\n      \
    \      paren_group_string += char\n        } else if char == ' ' {\n         \
    \   if paren_group_open && paren_group_closed {\n                fmt.Println(\"\
    Error: unexpected space in paren group\")\n                return nil\n      \
    \      }\n            paren_group_string += char\n        } else {\n         \
    \   paren_group_string += char\n        }\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6jo5urgn_test.go:27:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmp6jo5urgn_test.go:34:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmp6jo5urgn_test.go:40:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmp6jo5urgn_test.go:42:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Your code here\n    paren_string := paren_string\n\
    \    paren_string := strings.Replace(paren_string, \"( )\", \"()\", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string :=\
    \ strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \"\
    \ ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \"\
    , \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \"\
    \ ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \" ()\"\
    , -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n\
    \    paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n   \
    \ paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string :=\
    \ strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \"\
    \ ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \"\
    , \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \"\
    \ ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \" ()\"\
    , -1)\n    paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n\
    \    paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n   \
    \ paren_string := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string :=\
    \ strings.Replace(paren_string, \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \"\
    \ ( \", \" ()\", -1)\n    paren_string := strings.Replace(paren_string, \" ( \"\
    , \" ()\", -1)\n    paren_string := strings.\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpew9r7rxc_test.go:44:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a stack to keep track of nested parens\n\
    \    parenStack := make([]string, 0)\n\n    // Initialize a result list to hold\
    \ the result\n    result := make([]string, 0)\n\n    // Iterate over each character\
    \ in the string\n    for _, char := range paren_string {\n        // If the character\
    \ is a left paren, push it to the stack\n        if char == '(' {\n          \
    \  parenStack = append(parenStack, char)\n        }\n\n        // If the character\
    \ is a right paren, pop it from the stack\n        if char == ')' {\n        \
    \    parenStack = parenStack[:len(parenStack)-1]\n        }\n\n        // If the\
    \ character is a left paren, pop it from the stack\n        if char == '(' {\n\
    \            parenStack = parenStack[:len(parenStack)-1]\n        }\n\n      \
    \  // If the character is a right paren, push it to the stack\n        if char\
    \ == ')' {\n            parenStack = append(parenStack, char)\n        }\n\n \
    \       // If the character is a left paren, push it to the stack\n        if\
    \ char == '(' {\n            parenStack = append(parenStack, char)\n        }\n\
    \n        // If the character is a right paren, pop it from the stack\n      \
    \  if char == ')' {\n            parenStack = parenStack[:len(parenStack)-1]\n\
    \        }\n\n        // If the character is a left paren, push it to the stack\n\
    \        if char == '(' {\n            parenStack = append(parenStack, char)\n\
    \        }\n\n        // If the character is a right paren, pop it from the stack\n\
    \        if char == ')' {\n            parenStack = parenStack[:len(parenStack)-1]\n\
    \        }\n\n        // If the character is a left paren, push it to the stack\n\
    \        if char == '(' {\n            parenStack = append(parenStack, char)\n\
    \        }\n\n        // If the character is a right paren, pop it from the stack\n\
    \        if char == ')' {\n            parenStack = parenStack[:len(parenStack)-1]\n\
    \        }\n\n        // If the character is a left paren, push it to the stack\n\
    \        if char == '(' {\n            parenStack = append(parenStack, char)\n\
    \        }\n\n        // If the character is a right paren, pop it from the stack\n\
    \        if char == ')' {\n            parenStack = parenStack[:len(parenStack)-1]\n\
    \        }\n\n        // If the character is a left paren, push it to the stack\n\
    \        if char == '(' {\n            parenStack = append(parenStack, char)\n\
    \        }\n\n        // If the character is a right paren, pop it from the stack\n\
    \        if char == ')' {\n            parenStack = parenStack[:len(parenStack)-1]\n\
    \        }\n\n        // If the character is a left paren, push it to the stack\n\
    \        if \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl6ikzhrm_test.go:95:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_count := 0\n    for _, char := range paren_string {\n       \
    \ if char == '(' {\n            paren_group_count++\n            if paren_group_count\
    \ == 1 {\n                paren_group += char\n            } else {\n        \
    \        paren_group += char + string(paren_group_count)\n            }\n    \
    \    } else if char == ')' {\n            paren_group_count--\n            if\
    \ paren_group_count == 0 {\n                paren_group += char\n            }\
    \ else {\n                paren_group += char + string(paren_group_count)\n  \
    \          }\n        } else {\n            paren_group += char\n        }\n \
    \   }\n    paren_groups = append(paren_groups, paren_group)\n    return paren_groups\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ih54r9s_test.go:22:17: invalid operation: paren_group += char (mismatched
    types string and rune)

    /tmp/tmp4ih54r9s_test.go:24:32: invalid operation: char + string(paren_group_count)
    (mismatched types rune and string)

    /tmp/tmp4ih54r9s_test.go:29:17: invalid operation: paren_group += char (mismatched
    types string and rune)

    /tmp/tmp4ih54r9s_test.go:31:32: invalid operation: char + string(paren_group_count)
    (mismatched types rune and string)

    /tmp/tmp4ih54r9s_test.go:34:13: invalid operation: paren_group += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize result to an empty array\n    var result\
    \ []string\n\n    // Iterate over each character in the input string\n    for\
    \ _, char := range paren_string {\n        // If the character is a left paren,\
    \ add it to the result\n        if char == '(' {\n            result = append(result,\
    \ char)\n        }\n\n        // If the character is a right paren, remove it\
    \ from the result\n        if char == ')' {\n            result = removeCharFromArray(result,\
    \ char)\n        }\n    }\n\n    // Return the result\n    return result\n}\n\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yo0crys_test.go:22:37: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp5yo0crys_test.go:27:22: undefined: removeCharFromArray

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_string += \"(\"\n    paren_group_open = true\n    for _, character\
    \ := range paren_string {\n        if paren_group_open {\n            if character\
    \ == \")\" {\n                paren_group_open = false\n                paren_group_closed\
    \ = true\n                paren_group_string += \")\"\n            } else {\n\
    \                paren_group_string += character\n            }\n        } else\
    \ if paren_group_closed {\n            if character == \" \" {\n             \
    \   paren_group_open = true\n                paren_group_closed = false\n    \
    \            paren_group_string += \" \"\n            } else {\n             \
    \   paren_group_string += character\n            }\n        } else {\n       \
    \     if character == \" \" {\n                paren_group_open = true\n     \
    \           paren_group_closed = false\n                paren_group_string +=\
    \ \" \"\n            } else {\n                paren_group_string += character\n\
    \            }\n        }\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4gtz1eib_test.go:23:29: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmp4gtz1eib_test.go:28:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmp4gtz1eib_test.go:31:29: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmp4gtz1eib_test.go:36:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmp4gtz1eib_test.go:39:29: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmp4gtz1eib_test.go:44:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string = paren_string[strings.Index(paren_string,\
    \ \"(\"):]\n    paren_string = paren_string[strings.Index(paren_string, \")\"\
    ):]\n    paren_string = paren_string[:strings.Index(paren_string, \"(\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \")\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string\
    \ = paren_string[:strings.Index(paren_string, \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string,\
    \ \"{}\")]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\"\
    )]\n    paren_string = paren_string[:strings.Index(paren_string, \"{}\")]\n  \
    \  paren_string = paren_string[:strings.\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdfa3jlu__test.go:50:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphoi7ylux_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Println(\"Error: unexpected open\
    \ paren group\")\n                fmt.Println(paren_string)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_closed)\n                fmt.Println(paren_group_string)\n\
    \                fmt.Println(paren_group_strings)\n                fmt.Println(\"\
    \")\n                panic(\"unexpected open paren group\")\n            }\n \
    \           paren_group_open = true\n            paren_group_string = paren_group_string\
    \ + char\n        } else if char == ')' {\n            if paren_group_closed {\n\
    \                fmt.Println(\"Error: unexpected close paren group\")\n      \
    \          fmt.Println(paren_string)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_closed)\n                fmt.Println(paren_group_string)\n\
    \                fmt.Println(paren_group_strings)\n                fmt.Println(\"\
    \")\n                panic(\"unexpected close paren group\")\n            }\n\
    \            paren_group_closed = true\n            paren_group_string = paren_group_string\
    \ + char\n        } else if char == ' ' {\n            if paren_group_open &&\
    \ paren_group_closed {\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \ }\n        } else {\n            paren_group_string = paren_group_string + char\n\
    \        }\n    }\n    if paren_group_open && paren_group_closed {\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf2l1pjf8_test.go:32:34: invalid operation: paren_group_string + char (mismatched
    types string and rune)

    /tmp/tmpf2l1pjf8_test.go:45:34: invalid operation: paren_group_string + char (mismatched
    types string and rune)

    /tmp/tmpf2l1pjf8_test.go:52:34: invalid operation: paren_group_string + char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a slice to hold our result\n    result\
    \ := make([]string, 0)\n\n    // Iterate over each character in the string\n \
    \   for _, character := range paren_string {\n        // If the character is a\
    \ left paren, add it to the result\n        if character == '(' {\n          \
    \  result = append(result, character)\n        }\n\n        // If the character\
    \ is a right paren, remove it from the result\n        if character == ')' {\n\
    \            result = removeElement(result, character)\n        }\n    }\n\n \
    \   // Return the result\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9hkz48i7_test.go:22:37: cannot use character (variable of type rune) as
    type string in argument to append

    /tmp/tmp9hkz48i7_test.go:27:22: undefined: removeElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            if paren_group_is_open\
    \ {\n                fmt.Println(\"Error: unexpected open paren group\")\n   \
    \             fmt.Println(\"Input: \" + paren_string)\n                fmt.Println(\"\
    Output: \" + paren_groups)\n                return nil\n            }\n      \
    \      paren_group_is_open = true\n            paren_group = char\n        } else\
    \ if char == ')' {\n            if paren_group_is_closed {\n                fmt.Println(\"\
    Error: unexpected close paren group\")\n                fmt.Println(\"Input: \"\
    \ + paren_string)\n                fmt.Println(\"Output: \" + paren_groups)\n\
    \                return nil\n            }\n            paren_group_is_closed\
    \ = true\n            paren_groups = append(paren_groups, paren_group)\n     \
    \       paren_group = char\n        } else if char == ' ' {\n            if paren_group_is_open\
    \ {\n                paren_groups = append(paren_groups, paren_group)\n      \
    \          paren_group = char\n            } else {\n                paren_group\
    \ = char\n            }\n        } else {\n            paren_group = char\n  \
    \      }\n    }\n    if paren_group_is_open {\n        paren_groups = append(paren_groups,\
    \ paren_group)\n    }\n    return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpctwrh_fv_test.go:24:29: invalid operation: "Output: " + paren_groups (mismatched
    types untyped string and []string)

    /tmp/tmpctwrh_fv_test.go:28:27: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmpctwrh_fv_test.go:33:29: invalid operation: "Output: " + paren_groups (mismatched
    types untyped string and []string)

    /tmp/tmpctwrh_fv_test.go:38:27: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmpctwrh_fv_test.go:42:31: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmpctwrh_fv_test.go:44:31: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmpctwrh_fv_test.go:47:27: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074003
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make(map[string][]string)\n    paren_groups\
    \ := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := make(map[string][]string)\n    paren_groups := make(map[string][]string)\n\
    \    paren_groups := \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgpa8xke7_test.go:55:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if character == '(' {\n \
    \           if paren_group_open {\n                fmt.Println(\"Found open paren\
    \ group\", paren_group_string)\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \ }\n            paren_group_open = true\n            paren_group_closed = false\n\
    \        } else if character == ')' {\n            if paren_group_closed {\n \
    \               fmt.Println(\"Found closed paren group\", paren_group_string)\n\
    \                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n            }\n            paren_group_open\
    \ = false\n            paren_group_closed = true\n        } else if character\
    \ == ' ' {\n            fmt.Println(\"Found space\", paren_group_string)\n   \
    \         paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \            paren_group_string = \"\"\n        } else {\n            paren_group_string\
    \ += string(character)\n        }\n    }\n    if paren_group_open {\n        fmt.Println(\"\
    Found open paren group\", paren_group_string)\n        paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    }\n    if paren_group_closed {\n        fmt.Println(\"\
    Found closed paren group\", paren_group_string)\n        paren_group_strings =\
    \ append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Found open paren group \nFound closed paren group \nFound space \nFound\
    \ open paren group \nFound open paren group \nFound closed paren group \nFound\
    \ closed paren group \nFound space \nFound space \nFound open paren group \nFound\
    \ open paren group \nFound closed paren group \nFound closed paren group \nFound\
    \ closed paren group \nFound space \nFound open paren group \nFound closed paren\
    \ group \nFound space \nFound open paren group \nFound open paren group \nFound\
    \ closed paren group \nFound closed paren group \nFound space \nFound open paren\
    \ group \nFound open paren group \nFound open paren group \nFound closed paren\
    \ group \nFound closed paren group \nFound closed paren group \nFound closed paren\
    \ group \nFound open paren group \nFound open paren group \nFound closed paren\
    \ group \nFound open paren group \nFound open paren group \nFound closed paren\
    \ group \nFound closed paren group \nFound closed paren group \nFound closed paren\
    \ group \nFound space \nFound space \nFound open paren group \nFound space \n\
    Found closed paren group \nFound space \nFound open paren group \nFound space\
    \ \nFound space \nFound closed paren group \nFound closed paren group \n--- FAIL:\
    \ TestSeparate_Paren_Groups (0.00s)\n    --- FAIL: TestSeparate_Paren_Groups/test_num__0\
    \ (0.00s)\n        tmpe8tq_rw0_test.go:71: expected '[(()()) ((())) () ((())()())]',\
    \ got '[             ]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__1 (0.00s)\n\
    \        tmpe8tq_rw0_test.go:71: expected '[() (()) ((())) (((())))]', got '[\
    \               ]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__2 (0.00s)\n\
    \        tmpe8tq_rw0_test.go:71: expected '[(()(())((())))]', got '[        ]'\n\
    \    --- FAIL: TestSeparate_Paren_Groups/test_num__3 (0.00s)\n        tmpe8tq_rw0_test.go:71:\
    \ expected '[() (()) (()())]', got '[          ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type := 0\n   \
    \ brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type :=\
    \ 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyk5wn5l_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Printf(\"Found nested paren group:\
    \ %v\\n\", paren_group_string)\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \     paren_group_open = false\n                paren_group_closed = false\n \
    \           }\n            paren_group_open = true\n        } else if char ==\
    \ ')' {\n            if paren_group_closed {\n                fmt.Printf(\"Found\
    \ nested paren group: %v\\n\", paren_group_string)\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open = false\n                paren_group_closed\
    \ = false\n            }\n            paren_group_closed = true\n        } else\
    \ if char == ' ' {\n            continue\n        } else {\n            paren_group_string\
    \ += string(char)\n        }\n    }\n    if paren_group_open {\n        fmt.Printf(\"\
    Found nested paren group: %v\\n\", paren_group_string)\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Found nested paren group: \nFound nested paren group: \nFound nested paren\
    \ group: \nFound nested paren group: \nFound nested paren group: \nFound nested\
    \ paren group: \nFound nested paren group: \nFound nested paren group: \nFound\
    \ nested paren group: \nFound nested paren group: \nFound nested paren group:\
    \ \nFound nested paren group: \nFound nested paren group: \nFound nested paren\
    \ group: \nFound nested paren group: \nFound nested paren group: \nFound nested\
    \ paren group: \nFound nested paren group: \nFound nested paren group: \nFound\
    \ nested paren group: \nFound nested paren group: \nFound nested paren group:\
    \ \nFound nested paren group: \nFound nested paren group: \nFound nested paren\
    \ group: \nFound nested paren group: \nFound nested paren group: \nFound nested\
    \ paren group: \nFound nested paren group: \nFound nested paren group: \nFound\
    \ nested paren group: \nFound nested paren group: \nFound nested paren group:\
    \ \nFound nested paren group: \nFound nested paren group: \nFound nested paren\
    \ group: \nFound nested paren group: \nFound nested paren group: \nFound nested\
    \ paren group: \nFound nested paren group: \nFound nested paren group: \nFound\
    \ nested paren group: \n--- FAIL: TestSeparate_Paren_Groups (0.00s)\n    --- FAIL:\
    \ TestSeparate_Paren_Groups/test_num__0 (0.00s)\n        tmpomdfvmaf_test.go:67:\
    \ expected '[(()()) ((())) () ((())()())]', got '[             ]'\n    --- FAIL:\
    \ TestSeparate_Paren_Groups/test_num__1 (0.00s)\n        tmpomdfvmaf_test.go:67:\
    \ expected '[() (()) ((())) (((())))]', got '[            ]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__2\
    \ (0.00s)\n        tmpomdfvmaf_test.go:67: expected '[(()(())((())))]', got '[\
    \        ]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__3 (0.00s)\n   \
    \     tmpomdfvmaf_test.go:67: expected '[() (()) (()())]', got '[     ]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups :=\
    \ append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplhfig_86_test.go:54:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_brace := false\n    paren_group_close_brace :=\
    \ false\n    for _, character := range paren_string {\n        if character ==\
    \ '(' {\n            if paren_group_open_brace {\n                fmt.Println(\"\
    Found a nested group of parentheses\")\n                fmt.Println(paren_group_string)\n\
    \                fmt.Println(paren_group_open_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                fmt.Println(paren_group_close_brace)\n\
    \                fmt.Println(paren_group_close_brace)\n                \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpapbx_66d_test.go:60:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_open := false\n\
    \    brace_close := false\n    brace_count := 0\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            open_braces++\n            brace_open\
    \ = true\n            stack = append(stack, char)\n        } else if char == ')'\
    \ {\n            close_braces++\n            brace_close = true\n            stack\
    \ = stack[:len(stack)-1]\n            if open_braces == close_braces {\n     \
    \           open_braces = 0\n                close_braces = 0\n              \
    \  brace_open = false\n                brace_close = false\n                brace_count\
    \ = 0\n            }\n        } else if char == ' ' {\n            brace_count++\n\
    \            if open_braces == close_braces {\n                open_braces = 0\n\
    \                close_braces = 0\n                brace_open = false\n      \
    \          brace_close = false\n                brace_count = 0\n            }\n\
    \        }\n        if brace_open && brace_close {\n            if brace_count\
    \ == open_braces {\n                open_braces = 0\n                close_braces\
    \ = 0\n                brace_open = false\n                brace_close = false\n\
    \                brace_count = 0\n            }\n        }\n        if brace_open\
    \ {\n            open_braces++\n            brace_count++\n        }\n       \
    \ if brace_close {\n            close_braces++\n            brace_count--\n  \
    \      }\n    }\n    for _, char := range stack {\n        if char == '(' {\n\
    \            open_braces++\n            brace_open = true\n            stack =\
    \ append(stack, char)\n        } else if char == ')' {\n            close_braces++\n\
    \            brace_close = true\n            stack = stack[:len(stack)-1]\n  \
    \          if open_braces == close_braces {\n                open_braces = 0\n\
    \                close_braces = 0\n                brace_open = false\n      \
    \          brace_close = false\n                brace_count = 0\n            }\n\
    \        } else if char == ' ' {\n            brace_count++\n            if open_braces\
    \ == close_braces {\n                open_braces = 0\n                close_braces\
    \ = 0\n                brace_open = false\n                brace_close = false\n\
    \                brace_count = 0\n            }\n        }\n        if brace_open\
    \ && brace_close {\n            if brace_count == open_braces {\n            \
    \    open_braces = 0\n                \nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_404jmq_test.go:97:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    paren_string += \")\"\n  \
    \  paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph15g1xmi_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups :=\
    \ append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren_groups, paren_string)\n    paren_groups\
    \ := append(paren_groups, paren_string)\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    paren_groups := append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplhfig_86_test.go:54:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n    paren_group_is_closed := false\n    paren_group_is_open := false\n\
    \    paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_closed\
    \ := false\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n    paren_group_is_closed := false\n    paren_group_is_open := false\n\
    \    paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_closed\
    \ := false\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n    paren_group_is_closed := false\n    paren_group_is_open := false\n\
    \    paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_closed\
    \ := false\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n    paren_group_is_closed := false\n    paren_group_is_open := false\n\
    \    paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_closed\
    \ := false\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n    paren_group_is_closed := false\n    paren_group_is_open := false\n\
    \    paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_closed\
    \ := false\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_open\
    \ := false\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7dawumk7_test.go:73:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_braces := 0\n    paren_group_close_braces := 0\n\
    \    paren_group_open_parens := 0\n    paren_group_close_parens := 0\n    for\
    \ _, character := range paren_string {\n        if character == \"{\" {\n    \
    \        paren_group_open_braces++\n        } else if character == \"}\" {\n \
    \           paren_group_close_braces++\n        } else if character == \"(\" {\n\
    \            paren_group_open_parens++\n        } else if character == \")\" {\n\
    \            paren_group_close_parens++\n        } else if character == \" \"\
    \ {\n            // Ignore spaces in paren group\n        } else {\n         \
    \   paren_group_string += character\n        }\n        if paren_group_open_braces\
    \ == paren_group_close_braces {\n            if paren_group_string != \"\" {\n\
    \                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n            }\n            paren_group_strings\
    \ = append(paren_group_strings, \"\")\n            paren_group_strings = append(paren_group_strings,\
    \ \"\")\n            paren_group_strings = append(paren_group_strings, \"\")\n\
    \            paren_group_strings = append(paren_group_strings, \"\")\n       \
    \     paren_group_strings = append(paren_group_strings, \"\")\n            paren_group_strings\
    \ = append(paren_group_strings, \"\")\n            paren_group_strings = append(paren_group_strings,\
    \ \"\")\n            paren_group_strings = append(paren_group_strings, \"\")\n\
    \            paren_group_strings = append(paren_group_strings, \"\")\n       \
    \     paren_group_strings = append(paren_group_strings, \"\")\n            paren_group_strings\
    \ = append(paren_group_strings, \"\")\n            paren_group_strings = append(paren_group_strings,\
    \ \"\")\n            paren_group_strings = append(paren_group_strings, \"\")\n\
    \            paren_group_strings = append(paren_group_strings, \"\")\n       \
    \     paren_group_strings = append(paren_group_strings, \"\")\n            paren_group_strings\
    \ = append(paren_group_strings, \"\")\n            paren_group_strings = append(paren_group_strings,\
    \ \"\")\n            paren_group_strings = append(paren_group_strings, \"\")\n\
    \            paren_group_strings = append(paren_group_strings, \"\")\n       \
    \     paren_group_strings = append(paren_group_strings, \"\")\n            paren_group_strings\
    \ = append(paren_\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6__74vgh_test.go:60:48: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_braces := 0\n    paren_group_close_braces := 0\n\
    \    paren_group_open_brace_count := 0\n    paren_group_close_brace_count := 0\n\
    \    paren_group_open_brace_count += count_open_braces(paren_string)\n    paren_group_close_brace_count\
    \ += count_close_braces(paren_string)\n    for _, char := range paren_string {\n\
    \        if char == '(' {\n            paren_group_open_brace_count++\n      \
    \  } else if char == ')' {\n            paren_group_close_brace_count++\n    \
    \    }\n        if paren_group_open_brace_count == paren_group_close_brace_count\
    \ {\n            paren_group_string = append(paren_group_string, char)\n     \
    \       if paren_group_open_braces == paren_group_close_braces {\n           \
    \     paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open_braces\
    \ = 0\n                paren_group_close_braces = 0\n                paren_group_open_brace_count\
    \ = 0\n                paren_group_close_brace_count = 0\n            } else {\n\
    \                paren_group_open_braces++\n                paren_group_close_braces++\n\
    \            }\n        } else {\n            if paren_group_open_braces > 0 {\n\
    \                paren_group_string = append(paren_group_string, char)\n     \
    \           paren_group_open_braces++\n            } else {\n                paren_group_close_braces++\n\
    \            }\n        }\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3fwr8ghv_test.go:21:37: undefined: count_open_braces

    /tmp/tmp3fwr8ghv_test.go:22:38: undefined: count_close_braces

    /tmp/tmp3fwr8ghv_test.go:30:41: first argument to append must be a slice; have
    paren_group_string (variable of type string)

    /tmp/tmp3fwr8ghv_test.go:44:45: first argument to append must be a slice; have
    paren_group_string (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := make([]string, 0)\n    paren_group_count\
    \ := 0\n    paren_group_string := \"\"\n    paren_group_open_brace := false\n\
    \    for _, character := range paren_string {\n        if character == \"(\" {\n\
    \            if paren_group_open_brace {\n                fmt.Println(\"Found\
    \ a nested group\")\n                paren_group_count -= 1\n                if\
    \ paren_group_count == 0 {\n                    paren_group_string = paren_group_string[:len(paren_group_string)-1]\n\
    \                    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                    paren_group_string = \"\"\n                    paren_group_open_brace\
    \ = false\n                }\n            } else {\n                paren_group_open_brace\
    \ = true\n                paren_group_count += 1\n            }\n        } else\
    \ if character == \")\" {\n            if paren_group_open_brace {\n         \
    \       paren_group_count -= 1\n                if paren_group_count == 0 {\n\
    \                    paren_group_string = paren_group_string[:len(paren_group_string)-1]\n\
    \                    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                    paren_group_string = \"\"\n                    paren_group_open_brace\
    \ = false\n                }\n            } else {\n                fmt.Println(\"\
    Found a nested group\")\n                paren_group_open_brace = false\n    \
    \        }\n        } else {\n            paren_group_string += string(character)\n\
    \        }\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnz3f4qsb_test.go:20:25: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmpnz3f4qsb_test.go:34:32: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_count := 0\n    for _, character := range paren_string\
    \ {\n        if character == \")\" {\n            paren_group_count--\n      \
    \      if paren_group_count == 0 {\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \ }\n        } else if character == \"(\" {\n            paren_group_count++\n\
    \            if paren_group_count == 1 {\n                paren_group_string =\
    \ paren_group_string[:len(paren_group_string)-1]\n            }\n        }\n \
    \       paren_group_string = append(paren_group_string, character)\n    }\n  \
    \  return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjuljyo3_test.go:19:25: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmpsjuljyo3_test.go:25:32: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmpsjuljyo3_test.go:31:37: first argument to append must be a slice; have
    paren_group_string (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := make([]string, 0)\n    stacks := make(map[string]bool)\n\
    \    stack := \"\"\n    open_braces := 0\n    close_braces := 0\n    brace_count\
    \ := 0\n    brace_open := false\n    brace_close := false\n    brace_count :=\
    \ 0\n    for _, char := range paren_string {\n        if char == '(' {\n     \
    \       if brace_count > 0 {\n                stacks[stack] = true\n         \
    \       stack = stack + string(char)\n                brace_count++\n        \
    \    } else {\n                open_braces++\n                stack = string(char)\n\
    \            }\n        } else if char == ')' {\n            if brace_count >\
    \ 0 {\n                brace_count--\n                if brace_count == 0 {\n\
    \                    stacks[stack] = false\n                    stack = stack\
    \ + string(char)\n                }\n            } else {\n                close_braces++\n\
    \                stack = string(char)\n            }\n        } else if char ==\
    \ ' ' {\n            if brace_count == 0 {\n                stack = stack + string(char)\n\
    \            }\n        } else {\n            if brace_count == 0 {\n        \
    \        stack = stack + string(char)\n            }\n        }\n    }\n    for\
    \ key, value := range stacks {\n        if value == true {\n            result\
    \ = append(result, key)\n        }\n    }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6em9o4qo_test.go:21:5: brace_open declared but not used

    /tmp/tmp6em9o4qo_test.go:22:5: brace_close declared but not used

    /tmp/tmp6em9o4qo_test.go:23:17: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            if paren_group_is_open\
    \ {\n                fmt.Println(\"Error: unexpected open paren group\", paren_group)\n\
    \                return nil\n            }\n            paren_group_is_open =\
    \ true\n            paren_group = paren_group + char\n        } else if char ==\
    \ ')' {\n            if paren_group_is_closed {\n                fmt.Println(\"\
    Error: unexpected close paren group\", paren_group)\n                return nil\n\
    \            }\n            paren_group_is_closed = true\n            paren_group\
    \ = paren_group + char\n        } else if char == ' ' {\n            if paren_group_is_open\
    \ {\n                paren_group = paren_group + char\n            } else if paren_group_is_closed\
    \ {\n                paren_groups = append(paren_groups, paren_group)\n      \
    \          paren_group = \"\"\n                paren_group_is_open = false\n \
    \               paren_group_is_closed = false\n            } else {\n        \
    \        fmt.Println(\"Error: unexpected space\", char)\n                return\
    \ nil\n            }\n        } else {\n            paren_group = paren_group\
    \ + char\n        }\n    }\n    if paren_group_is_open {\n        fmt.Println(\"\
    Error: unexpected open paren group\", paren_group)\n        return nil\n    }\n\
    \    if paren_group_is_closed {\n        fmt.Println(\"Error: unexpected close\
    \ paren group\", paren_group)\n        return nil\n    }\n    paren_groups = append(paren_groups,\
    \ paren_group)\n    return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8jrm8lm_test.go:26:27: invalid operation: paren_group + char (mismatched
    types string and rune)

    /tmp/tmpk8jrm8lm_test.go:33:27: invalid operation: paren_group + char (mismatched
    types string and rune)

    /tmp/tmpk8jrm8lm_test.go:36:31: invalid operation: paren_group + char (mismatched
    types string and rune)

    /tmp/tmpk8jrm8lm_test.go:47:27: invalid operation: paren_group + char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a list to store the result\n    result\
    \ := make([]string, 0)\n\n    // Iterate over each character in the string\n \
    \   for _, c := range paren_string {\n        // If the character is a left paren,\
    \ add it to the result list\n        if c == '(' {\n            result = append(result,\
    \ c)\n        }\n\n        // If the character is a right paren, remove it from\
    \ the result list\n        if c == ')' {\n            result = removeElement(result,\
    \ c)\n        }\n    }\n\n    // Return the result list\n    return result\n}\n\
    \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyurm9ml9_test.go:22:37: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmpyurm9ml9_test.go:27:22: undefined: removeElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    stack\
    \ := append(stack, paren_string)\n    index := 0\n    for len(stack) > 0 {\n \
    \       index += 1\n        current := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n\
    \        if current == \")\" {\n            result := append(result, current)\n\
    \        } else {\n            stack = append(stack, current)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n\
    \  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4zusfh36_test.go:17:11: no new variables on left side of :=

    /tmp/tmp4zusfh36_test.go:24:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a slice to hold the groups of parentheses\n\
    \    paren_groups := make([]string, 0)\n\n    // Iterate through the input string\
    \ and add each group of parentheses to the slice\n    paren_groups := append(paren_groups,\
    \ paren_string)\n    for i := 0; i < len(paren_string); i++ {\n        // If the\
    \ current character is a left paren, add it to the slice\n        if paren_string[i]\
    \ == '(' {\n            paren_groups = append(paren_groups, paren_string[:i])\n\
    \            // Remove the left paren from the input string\n            paren_string\
    \ = paren_string[i:]\n        }\n        // If the current character is a right\
    \ paren, remove it from the input string\n        if paren_string[i] == ')' {\n\
    \            paren_string = paren_string[:i]\n        }\n    }\n\n    // Return\
    \ the slice\n    return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmn1ruadx_test.go:19:18: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // The first thing we do is split the input string into\
    \ an array of strings. We do this by iterating over the\n    // input string and\
    \ adding each character to a string array. We then remove any spaces from the\
    \ string array\n    // and return the resulting array.\n    string_array := strings.Split(paren_string,\
    \ \" \")\n    string_array = strings.Split(string_array[0], \")\")\n    string_array\
    \ = strings.Split(string_array[1], \")\")\n    string_array = strings.Split(string_array[2],\
    \ \")\")\n    string_array = strings.Split(string_array[3], \")\")\n    return\
    \ string_array\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ejk71_b_test.go:18:21: undefined: strings

    /tmp/tmp7ejk71_b_test.go:19:20: undefined: strings

    /tmp/tmp7ejk71_b_test.go:20:20: undefined: strings

    /tmp/tmp7ejk71_b_test.go:21:20: undefined: strings

    /tmp/tmp7ejk71_b_test.go:22:20: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var result []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        current\
    \ := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if current\
    \ == \")\" {\n            result = append(result, current)\n        } else {\n\
    \            stack = append(stack, current)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_lttjye_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if paren_group_open {\n \
    \           paren_group_string += character\n        } else if paren_group_closed\
    \ {\n            paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \            paren_group_string = \"\"\n            paren_group_open = false\n\
    \            paren_group_closed = false\n        } else if character == \" \"\
    \ {\n            paren_group_open = false\n            paren_group_closed = false\n\
    \        } else {\n            if character == \"(\" {\n                paren_group_open\
    \ = true\n            } else if character == \")\" {\n                paren_group_closed\
    \ = true\n            }\n        }\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4_jdzji2_test.go:21:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmp4_jdzji2_test.go:27:32: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmp4_jdzji2_test.go:31:29: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmp4_jdzji2_test.go:33:36: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Println(\"Found open paren group\"\
    )\n                paren_group_open = false\n                paren_group_closed\
    \ = false\n            }\n            paren_group_open = true\n        } else\
    \ if char == ')' {\n            if paren_group_closed {\n                fmt.Println(\"\
    Found closed paren group\")\n                paren_group_open = false\n      \
    \          paren_group_closed = false\n            }\n            paren_group_closed\
    \ = true\n        } else if char == ' ' {\n            if paren_group_open {\n\
    \                fmt.Println(\"Found space in open paren group\")\n          \
    \      paren_group_open = false\n                paren_group_closed = false\n\
    \            }\n        } else if char == ')' {\n            if paren_group_open\
    \ {\n                fmt.Println(\"Found space in closed paren group\")\n    \
    \            paren_group_open = false\n                paren_group_closed = false\n\
    \            }\n        } else if paren_group_open {\n            fmt.Println(\"\
    Found non-space in open paren group\")\n            paren_group_open = false\n\
    \            paren_group_closed = false\n        } else if paren_group_closed\
    \ {\n            fmt.Println(\"Found non-space in closed paren group\")\n    \
    \        paren_group_open = false\n            paren_group_closed = false\n  \
    \      }\n        if paren_group_open {\n            paren_group_string += char\n\
    \        } else if paren_group_closed {\n            paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n            paren_group_string = \"\"\n        }\n    }\n\
    \    if paren_group_string != \"\" {\n        paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7ba4eit_test.go:56:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_regex := regexp.MustCompile(`\\((?P<paren_group>.+)\\\
    )`)\n    paren_groups := paren_group_regex.FindAllStringSubmatch(paren_string,\
    \ -1)\n    result := make([]string, len(paren_groups))\n    for i, paren_group\
    \ := range paren_groups {\n        result[i] = paren_group[1]\n    }\n    return\
    \ result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate :=\
    \ separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"()\",\
    \ \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected:\
    \ []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"\
    ( ) (( )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxtqy3_d__test.go:15:26: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var result []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        current\
    \ := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if current\
    \ == \")\" {\n            result = append(result, current)\n        } else {\n\
    \            stack = append(stack, current)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_lttjye_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stacks := [][]string{}\n \
    \   stack := []string{}\n    open_braces := 0\n    close_braces := 0\n    brace_count\
    \ := 0\n    brace_count += count_open_braces(paren_string)\n    brace_count +=\
    \ count_close_braces(paren_string)\n    stacks = append(stacks, stack)\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            open_braces++\n\
    \            stack = append(stack, char)\n        } else if char == ')' {\n  \
    \          close_braces++\n            stack = append(stack, char)\n        }\
    \ else if char == ' ' {\n            stack = append(stack, char)\n        } else\
    \ {\n            if open_braces > close_braces {\n                stacks = append(stacks,\
    \ stack)\n                stack = []string{}\n                open_braces = 0\n\
    \                close_braces = 0\n            }\n            stack = append(stack,\
    \ char)\n        }\n    }\n    stacks = append(stacks, stack)\n    for _, stack\
    \ := range stacks {\n        if len(stack) == 0 {\n            continue\n    \
    \    }\n        if open_braces > close_braces {\n            result := append(result,\
    \ string(stack))\n        } else {\n            result := append(result, string(stack[:len(stack)-1]))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4l_9pfpr_test.go:21:20: undefined: count_open_braces

    /tmp/tmp4l_9pfpr_test.go:22:20: undefined: count_close_braces

    /tmp/tmp4l_9pfpr_test.go:27:35: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp4l_9pfpr_test.go:30:35: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp4l_9pfpr_test.go:32:35: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp4l_9pfpr_test.go:40:35: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp4l_9pfpr_test.go:49:13: result declared but not used

    /tmp/tmp4l_9pfpr_test.go:49:45: cannot convert stack (variable of type []string)
    to type string

    /tmp/tmp4l_9pfpr_test.go:51:13: result declared but not used

    /tmp/tmp4l_9pfpr_test.go:51:50: cannot convert stack[:len(stack) - 1] (value of
    type []string) to type string

    /tmp/tmp4l_9pfpr_test.go:51:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_stack =\
    \ make([]int, 0)\n    paren_stack = append(paren_stack, -1)\n    paren_stack =\
    \ append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(paren_stack, -1)\n    paren_stack\
    \ = append(paren_stack, -1)\n    paren_stack = append(\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq_vny3_m_test.go:62:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_count := 0\n    paren_group_is_open := false\n    for _, c :=\
    \ range paren_string {\n        if paren_group_is_open {\n            if c ==\
    \ '(' {\n                paren_group_is_open = true\n                paren_group\
    \ += c\n                paren_group_count += 1\n            } else {\n       \
    \         paren_group += c\n            }\n        } else {\n            if c\
    \ == '(' {\n                paren_group_is_open = true\n                paren_group\
    \ += c\n                paren_group_count += 1\n            } else {\n       \
    \         paren_group += c\n            }\n            if paren_group_count ==\
    \ 2 {\n                paren_groups = append(paren_groups, paren_group)\n    \
    \            paren_group = \"\"\n                paren_group_count = 0\n     \
    \           paren_group_is_open = false\n            }\n        }\n    }\n   \
    \ return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n \
    \ candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu8noqncs_test.go:23:17: invalid operation: paren_group += c (mismatched
    types string and rune)

    /tmp/tmpu8noqncs_test.go:26:17: invalid operation: paren_group += c (mismatched
    types string and rune)

    /tmp/tmpu8noqncs_test.go:31:17: invalid operation: paren_group += c (mismatched
    types string and rune)

    /tmp/tmpu8noqncs_test.go:34:17: invalid operation: paren_group += c (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var result []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        index\
    \ := len(stack) - 1\n        result := append(result, stack[index])\n        stack\
    \ = stack[:index]\n    }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscq82951_test.go:17:11: no new variables on left side of :=

    /tmp/tmpscq82951_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_count := 0\n    paren_group_is_open := false\n    for _, char\
    \ := range paren_string {\n        if char == ')' {\n            if paren_group_is_open\
    \ {\n                paren_groups = append(paren_groups, paren_group)\n      \
    \          paren_group = \"\"\n                paren_group_count = 0\n       \
    \         paren_group_is_open = false\n            } else {\n                paren_group_is_open\
    \ = true\n                paren_group_count++\n            }\n        } else if\
    \ char == '(' {\n            if paren_group_is_open {\n                paren_groups\
    \ = append(paren_groups, paren_group)\n                paren_group = \"\"\n  \
    \              paren_group_count = 0\n                paren_group_is_open = false\n\
    \            } else {\n                paren_group_is_open = true\n          \
    \      paren_group_count++\n            }\n        } else {\n            paren_group\
    \ += char\n        }\n    }\n    if paren_group_is_open {\n        paren_groups\
    \ = append(paren_groups, paren_group)\n    }\n    return paren_groups\n}\n\nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjixton7__test.go:41:13: invalid operation: paren_group += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_is_open := false\n    paren_group_is_closed := false\n    paren_group_is_nested\
    \ := false\n    paren_group_is_unbalanced := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := false\n    paren_group_is_unclosed\
    \ := false\n    paren_group_is_unclosed := \nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9z42zvl7_test.go:67:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074005
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if character == \"(\" {\n\
    \            if paren_group_open {\n                fmt.Println(\"Error: unexpected\
    \ open paren group\")\n                return nil\n            }\n           \
    \ paren_group_open = true\n            paren_group_string += character\n     \
    \   } else if character == \")\" {\n            if paren_group_closed {\n    \
    \            fmt.Println(\"Error: unexpected close paren group\")\n          \
    \      return nil\n            }\n            paren_group_closed = true\n    \
    \        paren_group_string += character\n        } else if character == \" \"\
    \ {\n            // ignore spaces\n        } else {\n            paren_group_string\
    \ += character\n        }\n    }\n    if paren_group_open == false {\n       \
    \ fmt.Println(\"Error: unexpected close paren group\")\n        return nil\n \
    \   }\n    if paren_group_closed == false {\n        fmt.Println(\"Error: unexpected\
    \ open paren group\")\n        return nil\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcngcukzb_test.go:20:25: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmpcngcukzb_test.go:26:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpcngcukzb_test.go:27:32: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmpcngcukzb_test.go:33:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpcngcukzb_test.go:34:32: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpcngcukzb_test.go:37:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var groups []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        group\
    \ := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if group\
    \ == \")\" {\n            groups = append(groups, group[:len(group)-1])\n    \
    \    } else {\n            groups = append(groups, group)\n        }\n    }\n\
    \    return groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp720k9dh_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_regex := regexp.MustCompile(`\\((?P<paren_group>\\\
    ()|(?P<close_paren_group>\\))`)\n    paren_groups := paren_group_regex.FindAllStringSubmatch(paren_string,\
    \ -1)\n    result := make([]string, len(paren_groups))\n    for i, paren_group\
    \ := range paren_groups {\n        if paren_group == nil {\n            continue\n\
    \        }\n        if paren_group[0] == \"(\" {\n            result[i] = paren_group[1]\n\
    \        } else {\n            result[i] = paren_group[2]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk21n28eh_test.go:15:26: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a slice to hold the result\n    result\
    \ := make([]string, 0)\n\n    // Iterate over each character in the string\n \
    \   for _, char := range paren_string {\n        // If the character is a left\
    \ paren, add it to the result\n        if char == '(' {\n            result =\
    \ append(result, char)\n        }\n\n        // If the character is a right paren,\
    \ remove it from the result\n        if char == ')' {\n            result = removeElement(result,\
    \ char)\n        }\n    }\n\n    // Return the result\n    return result\n}\n\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8k5ifdbt_test.go:22:37: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmp8k5ifdbt_test.go:27:22: undefined: removeElement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_stack =\
    \ make([]string, 0)\n    paren_stack = append(paren_stack, paren_string)\n   \
    \ paren_groups = append(paren_groups, paren_string)\n    for len(paren_stack)\
    \ > 0 {\n        paren_string = paren_stack[len(paren_stack)-1]\n        paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n        paren_groups = append(paren_groups,\
    \ paren_string)\n        paren_groups = append(paren_groups, paren_string)\n \
    \   }\n    return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpst9ggh5h_test.go:15:5: undefined: paren_groups

    /tmp/tmpst9ggh5h_test.go:16:5: undefined: paren_stack

    /tmp/tmpst9ggh5h_test.go:17:26: undefined: paren_stack

    /tmp/tmpst9ggh5h_test.go:18:27: undefined: paren_groups

    /tmp/tmpst9ggh5h_test.go:19:13: undefined: paren_stack

    /tmp/tmpst9ggh5h_test.go:20:24: undefined: paren_stack

    /tmp/tmpst9ggh5h_test.go:21:23: undefined: paren_stack

    /tmp/tmpst9ggh5h_test.go:22:31: undefined: paren_groups

    /tmp/tmpst9ggh5h_test.go:23:31: undefined: paren_groups

    /tmp/tmpst9ggh5h_test.go:25:12: undefined: paren_groups

    /tmp/tmpst9ggh5h_test.go:25:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            if paren_group_open {\n                fmt.Println(\"\
    Found nested paren group\")\n                fmt.Println(\"Paren group string:\"\
    , paren_group_string)\n                fmt.Println(\"Paren group count:\", paren_group_count)\n\
    \                fmt.Println(\"Paren group open:\", paren_group_open)\n      \
    \          fmt.Println(\"Paren group closed:\", paren_group_closed)\n        \
    \        fmt.Println(\"Paren group strings:\", paren_group_strings)\n        \
    \        fmt.Println(\"Paren group string:\", paren_group_string)\n          \
    \      fmt.Println(\"Paren group count:\", paren_group_count)\n              \
    \  fmt.Println(\"Paren group open:\", paren_group_open)\n                fmt.Println(\"\
    Paren group closed:\", paren_group_closed)\n                fmt.Println(\"Paren\
    \ group strings:\", paren_group_strings)\n                fmt.Println(\"Paren\
    \ group string:\", paren_group_string)\n                fmt.Println(\"Paren group\
    \ count:\", paren_group_count)\n                fmt.Println(\"Paren group open:\"\
    , paren_group_open)\n                fmt.Println(\"Paren group closed:\", paren_group_closed)\n\
    \                fmt.Println(\"Paren group strings:\", paren_group_strings)\n\
    \                fmt.Println(\"Paren group string:\", paren_group_string)\n  \
    \              fmt.Println(\"Paren group count:\", paren_group_count)\n      \
    \          fmt.Println(\"Paren group open:\", paren_group_open)\n            \
    \    fmt.Println(\"Paren group closed:\", paren_group_closed)\n              \
    \  fmt.Println(\"Paren group strings:\", paren_group_strings)\n              \
    \  fmt.Println(\"Paren group string:\", paren_group_string)\n                fmt.Println(\"\
    Paren group count:\", paren_group_count)\n                fmt.Println(\"Paren\
    \ group open:\", paren_group_open)\n                fmt.Println(\"Paren group\
    \ closed:\", paren_group_closed)\n                fmt.Println(\"Paren group strings:\"\
    , paren_group_strings)\n                fmt.Println(\"Paren group string:\", paren_group_string)\n\
    \                fmt.Println(\"Paren group count:\", paren_group_count)\n    \
    \            fmt.Println(\"Paren group open:\", paren_group_open)\n          \
    \      fmt.Println(\"Paren group closed:\", paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv45xg27y_test.go:52:57: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := make([]string, 0)\n    stack := make([]string,\
    \ 0)\n    stack = append(stack, paren_string)\n    depth := 0\n    for len(stack)\
    \ > 0 {\n        depth += 1\n        stack := stack[:0]\n        for _, s := range\
    \ stack {\n            stack = append(stack, s)\n            if s == \")\" {\n\
    \                depth -= 1\n                if depth == 0 {\n               \
    \     result = append(result, strings.Join(stack, \"(\"))\n                  \
    \  stack = stack[:0]\n                }\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthb9hl_4_test.go:27:45: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    brace_count := 0\n    brace_open := false\n    brace_closed := false\n  \
    \  brace_group := \"\"\n    brace_group_open := false\n    brace_group_closed\
    \ := false\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n \
    \   brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_string := \"\"\n  \
    \  brace_group_string := \"\"\n    brace_group_string := \"\"\n    brace_group_string\
    \ := \"\"\n    brace_group_string := \"\"\n    brace_group_\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0lgsvfpa_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074006
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a stack to keep track of which parenthesis\
    \ we're currently in\n    stack := make([]string, 0)\n    // Initialize a result\
    \ list to hold the result\n    result := make([]string, 0)\n    // Iterate over\
    \ the input string and add each character to the stack\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            stack = append(stack, c)\
    \ // Add it to the stack\n        } else if c == ')' {\n            // If we see\
    \ a closing parenthesis, remove it from the stack\n            if len(stack) ==\
    \ 0 {\n                continue\n            }\n            stack = stack[:len(stack)-1]\n\
    \            // If we see a closing parenthesis, add it to the result list\n \
    \           if stack[len(stack)-1] == '(' {\n                result = append(result,\
    \ stack[len(stack)-1])\n            } else {\n                result = append(result,\
    \ stack[len(stack)-1]) // If not, add it to the result list\n            }\n \
    \       } else {\n            // If we see a non-closing parenthesis, add it to\
    \ the result list\n            result = append(result, c)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wzswmhf_test.go:22:35: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp9wzswmhf_test.go:30:39: invalid operation: stack[len(stack) - 1] == ''(''
    (mismatched types string and untyped rune)

    /tmp/tmp9wzswmhf_test.go:37:37: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_regex := regexp.MustCompile(`\\((?P<paren_group>[^\\\
    (\\)]+)\\)`)\n    paren_groups := paren_group_regex.FindAllStringSubmatch(paren_string,\
    \ -1)\n    result := make([]string, len(paren_groups))\n    for i, paren_group\
    \ := range paren_groups {\n        result[i] = paren_group[0]\n    }\n    return\
    \ result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate :=\
    \ separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"()\",\
    \ \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected:\
    \ []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"\
    ( ) (( )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobeof_ll_test.go:15:26: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_regex := regexp.MustCompile(\"\\\\(|\\\\\
    )\")\n    paren_groups := paren_group_regex.Split(paren_string, -1)\n    result\
    \ := make([]string, len(paren_groups))\n    for i, paren_group := range paren_groups\
    \ {\n        if paren_group == \"\" {\n            continue\n        }\n     \
    \   paren_group_length := len(paren_group)\n        if paren_group_length == 0\
    \ {\n            result[i] = paren_group\n            continue\n        }\n  \
    \      open_brace_index := 0\n        close_brace_index := 0\n        for _, char\
    \ := range paren_group {\n            if char == '(' {\n                open_brace_index++\n\
    \            } else if char == ')' {\n                close_brace_index++\n  \
    \          }\n        }\n        if open_brace_index != close_brace_index {\n\
    \            result[i] = paren_group\n            continue\n        }\n      \
    \  open_brace_index = 0\n        close_brace_index = 0\n        for _, char :=\
    \ range paren_group {\n            if char == '(' {\n                open_brace_index++\n\
    \            } else if char == ')' {\n                close_brace_index++\n  \
    \          }\n        }\n        if open_brace_index == close_brace_index {\n\
    \            result[i] = paren_group\n            continue\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mi286vv_test.go:15:26: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var result []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        current\
    \ := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if current\
    \ == \")\" {\n            result := append(result, current)\n        }\n     \
    \   if current == \"(\" {\n            stack = append(stack, current)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_9qu8eb_test.go:17:11: no new variables on left side of :=

    /tmp/tmpk_9qu8eb_test.go:22:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type := 0\n   \
    \ brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type :=\
    \ 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyk5wn5l_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_is_closed := false\n    paren_group_is_open := false\n    paren_group_is_in_string\
    \ := false\n    paren_group_is_in_string_2 := false\n    paren_group_is_in_string_3\
    \ := false\n    paren_group_is_in_string_4 := false\n    paren_group_is_in_string_5\
    \ := false\n    paren_group_is_in_string_6 := false\n    paren_group_is_in_string_7\
    \ := false\n    paren_group_is_in_string_8 := false\n    paren_group_is_in_string_9\
    \ := false\n    paren_group_is_in_string_10 := false\n    paren_group_is_in_string_11\
    \ := false\n    paren_group_is_in_string_12 := false\n    paren_group_is_in_string_13\
    \ := false\n    paren_group_is_in_string_14 := false\n    paren_group_is_in_string_15\
    \ := false\n    paren_group_is_in_string_16 := false\n    paren_group_is_in_string_17\
    \ := false\n    paren_group_is_in_string_18 := false\n    paren_group_is_in_string_19\
    \ := false\n    paren_group_is_in_string_20 := false\n    paren_group_is_in_string_21\
    \ := false\n    paren_group_is_in_string_22 := false\n    paren_group_is_in_string_23\
    \ := false\n    paren_group_is_in_string_24 := false\n    paren_group_is_in_string_25\
    \ := false\n    paren_group_is_in_string_26 := false\n    paren_group_is_in_string_27\
    \ := false\n    paren_group_is_in_string_28 := false\n    paren_group_is_in_string_29\
    \ := false\n    paren_group_is_in_string_30 := false\n    paren_group_is_in_string_31\
    \ := false\n    paren_group_is_in_string_32 := false\n    paren_group_is_in_string_33\
    \ := false\n    paren_group_is_in_string_34 := false\n    paren_group_is_in_string_35\
    \ := false\n    paren_group_is_in_string_36 := false\n    paren_group_is_in_string_37\
    \ := false\n    paren_group_is_in_string_38 := false\n    paren_group_is_in_string_39\
    \ := false\n    paren_group_is_in_string_40 := false\n    paren_group_is_in_string_41\
    \ := false\n    paren_group_is_\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg5ua66sv_test.go:63:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var groups []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        group\
    \ := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        if group\
    \ == \")\" {\n            groups = append(groups, group)\n        } else {\n \
    \           stack = append(stack, group)\n        }\n    }\n    return groups\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjjpw9d7_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    var result []string\n    stack := make([]string, 0)\n\
    \    stack := append(stack, paren_string)\n    for len(stack) > 0 {\n        length\
    \ := len(stack)\n        result := make([]string, length)\n        for i := 0;\
    \ i < length; i++ {\n            result := append(result, stack[len(stack)-i-1])\n\
    \        }\n        stack = stack[:len(stack)-length]\n    }\n    return result\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt00cx7ss_test.go:17:11: no new variables on left side of :=

    /tmp/tmpt00cx7ss_test.go:22:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Println(\"Error: unexpected open\
    \ paren group\")\n                return nil\n            }\n            paren_group_open\
    \ = true\n            paren_group_string += char\n        } else if char == ')'\
    \ {\n            if paren_group_closed {\n                fmt.Println(\"Error:\
    \ unexpected close paren group\")\n                return nil\n            }\n\
    \            paren_group_closed = true\n            paren_group_string += char\n\
    \        } else if char == ' ' {\n            if paren_group_open && paren_group_closed\
    \ {\n                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n            }\n        } else {\n\
    \            paren_group_string += char\n        }\n    }\n    if paren_group_open\
    \ {\n        fmt.Println(\"Error: unexpected open paren group\")\n        return\
    \ nil\n    }\n    if paren_group_closed {\n        fmt.Println(\"Error: unexpected\
    \ close paren group\")\n        return nil\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnshqiy2e_test.go:26:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpnshqiy2e_test.go:33:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpnshqiy2e_test.go:40:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_count := 0\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ open_braces++\n            stack = append(stack, char)\n        } else if char\
    \ == ')' {\n            close_braces++\n            if open_braces > close_braces\
    \ {\n                open_braces--\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else if char == ' ' {\n            brace_count++\n        }\n    }\n\
    \    for _, char := range paren_string {\n        if char == ')' {\n         \
    \   close_braces++\n            if open_braces > close_braces {\n            \
    \    open_braces--\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else if char == ' ' {\n            brace_count++\n        }\n    }\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   open_braces++\n            stack = append(stack, char)\n        } else if\
    \ char == ')' {\n            close_braces++\n            if open_braces > close_braces\
    \ {\n                open_braces--\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else if char == ' ' {\n            brace_count++\n        }\n    }\n\
    \    for _, char := range paren_string {\n        if char == ')' {\n         \
    \   close_braces++\n            if open_braces > close_braces {\n            \
    \    open_braces--\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else if char == ' ' {\n            brace_count++\n        }\n    }\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   open_braces++\n            stack = append(stack, char)\n        } else if\
    \ char == ')' {\n            close_braces++\n            if open_braces > close_braces\
    \ {\n                open_braces--\n            }\n            stack = stack[:len(stack)-1]\n\
    \        } else if char == ' ' {\n            brace_count++\n        }\n    }\n\
    \    for _, char := range paren_string {\n        if char == ')' {\n         \
    \   close_braces++\n            if open_braces > close_braces {\n            \
    \    open_braces--\n            }\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpel7nwcjz_test.go:91:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type := 0\n   \
    \ brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type :=\
    \ 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyk5wn5l_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Your code here\n    paren_string := paren_string\n\
    \    paren_string := strings.Replace(paren_string, \"( )\", \" \", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" (\
    \ )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\"\
    , \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \"\
    , -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n\
    \    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" (\
    \ )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\"\
    , \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \"\
    , -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n\
    \    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" (\
    \ )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\"\
    , \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \"\
    , -1)\n    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n\
    \    paren_string := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string\
    \ := strings.Replace(paren_string, \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string,\
    \ \" ( )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" (\
    \ )\", \" \", -1)\n    paren_string := strings.Replace(paren_string, \" ( )\"\
    , \" \", -1)\n    paren_string := strings.\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpomhhgv00_test.go:44:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := make([]string, 0)\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            if paren_group_open {\n                paren_group_closed--\n\
    \            } else {\n                paren_group_open = true\n             \
    \   paren_group_count++\n            }\n        } else if char == ')' {\n    \
    \        if paren_group_closed {\n                paren_group_open--\n       \
    \     } else {\n                paren_group_closed = true\n            }\n   \
    \     } else if char == ' ' {\n            if paren_group_open && paren_group_closed\
    \ {\n                paren_group_closed--\n            }\n        }\n        if\
    \ paren_group_open {\n            paren_group_string += char\n        } else if\
    \ paren_group_closed {\n            paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n            paren_group_string = \"\"\n            paren_group_open\
    \ = false\n            paren_group_closed = false\n            paren_group_count\
    \ = 0\n        }\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1_bppmxq_test.go:23:17: invalid operation: paren_group_closed-- (non-numeric
    type bool)

    /tmp/tmp1_bppmxq_test.go:30:17: invalid operation: paren_group_open-- (non-numeric
    type bool)

    /tmp/tmp1_bppmxq_test.go:36:17: invalid operation: paren_group_closed-- (non-numeric
    type bool)

    /tmp/tmp1_bppmxq_test.go:40:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_string += \"(\"\n    paren_group_open = true\n    for _, char :=\
    \ range paren_string {\n        if paren_group_open {\n            if char ==\
    \ \")\" {\n                paren_group_open = false\n                paren_group_closed\
    \ = true\n                paren_group_string += \")\"\n            } else {\n\
    \                paren_group_string += char\n            }\n        } else {\n\
    \            if char == \")\" {\n                paren_group_open = true\n   \
    \             paren_group_closed = false\n            } else {\n             \
    \   paren_group_string += char\n            }\n        }\n    }\n    paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    for _, char := range\
    \ paren_string {\n        if paren_group_open {\n            if char == \")\"\
    \ {\n                paren_group_open = false\n                paren_group_closed\
    \ = true\n                paren_group_string += \")\"\n            } else {\n\
    \                paren_group_string += char\n            }\n        } else {\n\
    \            if char == \")\" {\n                paren_group_open = true\n   \
    \             paren_group_closed = false\n            } else {\n             \
    \   paren_group_string += char\n            }\n        }\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkke51par_test.go:18:5: paren_group_closed declared but not used

    /tmp/tmpkke51par_test.go:23:24: invalid operation: char == ")" (mismatched types
    rune and untyped string)

    /tmp/tmpkke51par_test.go:28:17: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpkke51par_test.go:31:24: invalid operation: char == ")" (mismatched types
    rune and untyped string)

    /tmp/tmpkke51par_test.go:35:17: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpkke51par_test.go:42:24: invalid operation: char == ")" (mismatched types
    rune and untyped string)

    /tmp/tmpkke51par_test.go:47:17: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpkke51par_test.go:50:24: invalid operation: char == ")" (mismatched types
    rune and untyped string)

    /tmp/tmpkke51par_test.go:54:17: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            if paren_group_open {\n           \
    \     fmt.Println(\"Error: unexpected open paren group\")\n            }\n   \
    \         paren_group_open = true\n            paren_group_string += char\n  \
    \      } else if char == ')' {\n            if paren_group_open {\n          \
    \      paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n            } else {\n                fmt.Println(\"Error: unexpected\
    \ close paren group\")\n            }\n        } else if char == ' ' {\n     \
    \       // Ignore spaces in paren group string\n        } else {\n           \
    \ paren_group_string += char\n        }\n    }\n    if paren_group_open {\n  \
    \      fmt.Println(\"Error: unexpected close paren group\")\n    }\n    return\
    \ paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n \
    \ candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvahgq41l_test.go:24:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpvahgq41l_test.go:36:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_is_closed := false\n    paren_group_is_open := false\n    for _,\
    \ character := range paren_string {\n        if character == '(' {\n         \
    \   if paren_group_is_open {\n                fmt.Println(\"Error: unexpected\
    \ open paren group\")\n                fmt.Println(\"Paren group string:\", paren_group_string)\n\
    \                fmt.Println(\"Paren group open:\", paren_group_open)\n      \
    \          fmt.Println(\"Paren group closed:\", paren_group_closed)\n        \
    \        fmt.Println(\"Paren group is_closed:\", paren_group_is_closed)\n    \
    \            fmt.Println(\"Paren group is_open:\", paren_group_is_open)\n    \
    \            return nil\n            }\n            paren_group_open = true\n\
    \            paren_group_string += character\n            paren_group_is_open\
    \ = true\n        } else if character == ')' {\n            if paren_group_is_closed\
    \ {\n                fmt.Println(\"Error: unexpected close paren group\")\n  \
    \              fmt.Println(\"Paren group string:\", paren_group_string)\n    \
    \            fmt.Println(\"Paren group open:\", paren_group_open)\n          \
    \      fmt.Println(\"Paren group closed:\", paren_group_closed)\n            \
    \    fmt.Println(\"Paren group is_closed:\", paren_group_is_closed)\n        \
    \        fmt.Println(\"Paren group is_open:\", paren_group_is_open)\n        \
    \        return nil\n            }\n            paren_group_closed = true\n  \
    \          paren_group_string += character\n            paren_group_is_closed\
    \ = true\n        } else if character == ' ' {\n            if paren_group_is_open\
    \ {\n                paren_group_string += character\n            } else {\n \
    \               paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n                paren_group_closed = false\n                paren_group_is_closed\
    \ = false\n                paren_group_is_open = false\n            }\n      \
    \  } else {\n            if paren_group_is_open {\n                paren_group_string\
    \ += character\n            } else {\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \     paren_group_open = false\n                paren_group_closed = false\n \
    \               paren_group_is_closed = false\n                paren_group_is_open\
    \ = false\n            }\n        }\n    }\n    if paren_group_string \nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ccguzhz_test.go:73:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Println(\"Found a nested group of\
    \ parenthesis\")\n                return nil\n            }\n            paren_group_open\
    \ = true\n            paren_group_string += char\n        } else if char == ')'\
    \ {\n            if paren_group_closed {\n                fmt.Println(\"Found\
    \ a nested group of parenthesis\")\n                return nil\n            }\n\
    \            paren_group_closed = true\n            paren_group_string += char\n\
    \        } else if char == ' ' {\n            if paren_group_open {\n        \
    \        paren_group_string += char\n            } else if paren_group_closed\
    \ {\n                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n            }\n        } else {\n\
    \            paren_group_string += char\n        }\n    }\n    if paren_group_open\
    \ {\n        fmt.Println(\"Found a nested group of parenthesis\")\n        return\
    \ nil\n    }\n    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfydr_msa_test.go:26:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpfydr_msa_test.go:33:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpfydr_msa_test.go:36:17: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    /tmp/tmpfydr_msa_test.go:42:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_count\
    \ := 0\n    paren_group_string := \"\"\n    paren_group_string += \"(\"\n    paren_group_string\
    \ += paren_string\n    paren_group_string += \")\"\n    paren_group_count += 2\n\
    \    paren_group_string += \"(\"\n    paren_group_string += paren_string\n   \
    \ paren_group_string += \")\"\n    paren_group_count += 2\n    paren_group_string\
    \ += \"(\"\n    paren_group_string += paren_string\n    paren_group_string +=\
    \ \")\"\n    paren_group_count += 2\n    paren_group_string += \"(\"\n    paren_group_string\
    \ += paren_string\n    paren_group_string += \")\"\n    paren_group_count += 2\n\
    \    paren_group_string += \"(\"\n    paren_group_string += paren_string\n   \
    \ paren_group_string += \")\"\n    paren_group_count += 2\n    paren_group_string\
    \ += \"(\"\n    paren_group_string += paren_string\n    paren_group_string +=\
    \ \")\"\n    paren_group_count += 2\n    paren_group_string += \"(\"\n    paren_group_string\
    \ += paren_string\n    paren_group_string += \")\"\n    paren_group_count += 2\n\
    \    paren_group_string += \"(\"\n    paren_group_string += paren_string\n   \
    \ paren_group_string += \")\"\n    paren_group_count += 2\n    paren_group_string\
    \ += \"(\"\n    paren_group_string += paren_string\n    paren_group_string +=\
    \ \")\"\n    paren_group_count += 2\n    paren_group_string += \"(\"\n    paren_group_string\
    \ += paren_string\n    paren_group_string += \")\"\n    paren_group_count += 2\n\
    \    paren_group_string += \"(\"\n    paren_group_string += paren_string\n   \
    \ paren_group_string += \")\"\n    paren_group_count += 2\n    paren_group_string\
    \ += \"(\"\n    paren_group_string += paren_string\n    paren_group_string +=\
    \ \")\"\n    paren_group_count += 2\n    paren_group_string += \"(\"\n    paren_group_string\
    \ += paren_string\n    paren_group_string += \")\"\n    paren_group_count += 2\n\
    \    paren_group_string += \"(\"\n    paren_group_string += paren_string\n   \
    \ paren_group_string += \")\"\n    paren_group_count += 2\n    paren_group_string\
    \ += \"(\"\n    \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqfzdwpgx_test.go:76:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_is_closed := false\n    for _, character := range paren_string\
    \ {\n        if character == \" \" {\n            if paren_group_is_closed {\n\
    \                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n                paren_group_closed = false\n                paren_group_is_closed\
    \ = false\n            }\n        } else {\n            if paren_group_open {\n\
    \                paren_group_string += character\n            } else {\n     \
    \           paren_group_open = true\n                paren_group_string += character\n\
    \            }\n        }\n        if paren_group_open == true {\n           \
    \ if paren_group_closed {\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \     paren_group_open = false\n                paren_group_closed = false\n \
    \               paren_group_is_closed = false\n            }\n            if character\
    \ == \"(\" {\n                paren_group_is_closed = true\n            } else\
    \ {\n                paren_group_closed = true\n            }\n        }\n   \
    \ }\n    if paren_group_string != \"\" {\n        paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbu51xgzn_test.go:21:25: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpbu51xgzn_test.go:31:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpbu51xgzn_test.go:34:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpbu51xgzn_test.go:45:29: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group :=\
    \ \"\"\n    paren_group_count := 0\n    paren_group_string := \"\"\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            paren_group_count++\n\
    \            paren_group_string = paren_group + char\n            paren_group\
    \ = char\n        } else if char == ')' {\n            paren_group_count--\n \
    \           if paren_group_count == 0 {\n                paren_group_strings =\
    \ append(paren_group_strings, paren_group_string)\n                paren_group\
    \ = \"\"\n            }\n            paren_group = char\n        } else {\n  \
    \          paren_group += char\n        }\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0y4yre1s_test.go:22:34: invalid operation: paren_group + char (mismatched
    types string and rune)

    /tmp/tmp0y4yre1s_test.go:23:27: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmp0y4yre1s_test.go:30:27: cannot use char (variable of type rune) as type
    string in assignment

    /tmp/tmp0y4yre1s_test.go:32:13: invalid operation: paren_group += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := make([]string, 0)\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, character := range paren_string {\n    \
    \    if character == '(' {\n            if paren_group_open {\n              \
    \  fmt.Printf(\"Error: unexpected open paren group\\n\")\n                return\
    \ nil\n            }\n            paren_group_open = true\n            paren_group_string\
    \ += character\n            paren_group_count += 1\n        } else if character\
    \ == ')' {\n            if paren_group_closed {\n                fmt.Printf(\"\
    Error: unexpected close paren group\\n\")\n                return nil\n      \
    \      }\n            paren_group_closed = true\n            paren_group_string\
    \ += character\n            paren_group_count += 1\n        } else if character\
    \ == ' ' {\n            if paren_group_open && paren_group_closed {\n        \
    \        fmt.Printf(\"Error: unexpected space in paren group\\n\")\n         \
    \       return nil\n            }\n        } else if character == '\\n' {\n  \
    \          if paren_group_open && paren_group_closed {\n                fmt.Printf(\"\
    Error: unexpected new line in paren group\\n\")\n                return nil\n\
    \            }\n        } else {\n            paren_group_string += character\n\
    \        }\n    }\n    if paren_group_string != \"\" {\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgrts5li4_test.go:27:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpgrts5li4_test.go:35:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpgrts5li4_test.go:48:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string = strings.Replace(paren_string,\
    \ \"( )\", \"()\", -1)\n    paren_string = strings.Replace(paren_string, \" (\
    \ \", \" ()\", -1)\n    paren_string = strings.Replace(paren_string, \" ( )\"\
    , \" ()\", -1)\n    paren_string = strings.Replace(paren_string, \" ( )( )\",\
    \ \" ()()\", -1)\n    paren_string = strings.Replace(paren_string, \" ( )( )(\
    \ )\", \" ()()()\", -1)\n    paren_string = strings.Replace(paren_string, \" (\
    \ )( )( )( )\", \" ()()()()\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \" ( )( )( )( )( )\", \" ()()()()()\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \" ( )( )( )( )( )( )\", \" ()()()()()()\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \" ( )( )( )( )( )( )( )( )\", \" ()()()()()()()\", -1)\n    paren_string =\
    \ strings.Replace(paren_string, \" ( )( )( )( )( )( )( )( )( )\", \" ()()()()()()()()\"\
    , -1)\n    paren_string = strings.Replace(paren_string, \" ( )( )( )( )( )( )(\
    \ )( )( )( )\", \" ()()()()()()()()()\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \" ( )( )( )( )( )( )( )( )( )( )( )\", \" ()()()()()()()()()()\", -1)\n   \
    \ paren_string = strings.Replace(paren_string, \" ( )( )( )( )( )( )( )( )( )(\
    \ )( )\", \" ()()()()()()()()()()\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \" ( )( )( )( )( )( )( )( )( )( )( )( )\", \" ()()()()()()()()()()\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \" ( )( )( )( )( )( )( )( )(\
    \ )( )( )( )( )\", \" \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpozr9rlsb_test.go:30:94: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074007
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_strings = append(paren_group_strings, paren_string)\n    paren_group_strings\
    \ = append(paren_group_strings, paren_string)\n    paren_group_strings = append(paren_group_strings,\
    \ paren_string)\n    paren_group_strings = append(paren_group_strings, paren_string)\n\
    \    paren_group_string\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3h5w7pi_test.go:48:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ \nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphoi7ylux_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a list to hold our result\n    result\
    \ := make([]string, 0)\n\n    // Iterate over each character in the string\n \
    \   for _, char := range paren_string {\n        // If the character is a left\
    \ paren, add it to the list\n        if char == '(' {\n            result = append(result,\
    \ char)\n        }\n\n        // If the character is a right paren, remove it\
    \ from the list\n        if char == ')' {\n            result = remove_bracket(result,\
    \ char)\n        }\n    }\n\n    // Return the result\n    return result\n}\n\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiuajzf4z_test.go:22:37: cannot use char (variable of type rune) as type
    string in argument to append

    /tmp/tmpiuajzf4z_test.go:27:22: undefined: remove_bracket

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_braces := 0\n    paren_group_close_braces := 0\n\
    \    paren_group_open_parens := 0\n    paren_group_close_parens := 0\n    paren_group_string\
    \ := paren_string\n    for _, character := range paren_string {\n        if character\
    \ == '(' {\n            paren_group_open_braces++\n        } else if character\
    \ == ')' {\n            paren_group_close_braces++\n        } else if character\
    \ == '{' {\n            paren_group_open_parens++\n        } else if character\
    \ == '}' {\n            paren_group_close_parens++\n        } else if character\
    \ == ' ' {\n            continue\n        } else {\n            paren_group_string\
    \ += character\n        }\n        if paren_group_open_braces == paren_group_close_braces\
    \ && paren_group_open_braces == paren_group_open_parens && paren_group_open_braces\
    \ == paren_group_close_parens {\n            paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n            paren_group_string = \"\"\n            paren_group_open_braces\
    \ = 0\n            paren_group_close_braces = 0\n            paren_group_open_parens\
    \ = 0\n            paren_group_close_parens = 0\n        }\n    }\n    return\
    \ paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n \
    \ candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15a4inhs_test.go:21:24: no new variables on left side of :=

    /tmp/tmp15a4inhs_test.go:34:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := make([]string, 0)\n    stack := make([]string,\
    \ 0)\n    stack := append(stack, paren_string)\n    index := 0\n    for len(stack)\
    \ > 0 {\n        index += 1\n        current := stack[len(stack)-1]\n        stack\
    \ = stack[:len(stack)-1]\n        if current == \"(\" {\n            stack = append(stack,\
    \ current)\n        } else if current == \")\" {\n            stack = append(stack,\
    \ \"(\")\n        } else {\n            result = append(result, current)\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3doyuj2__test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type := 0\n   \
    \ brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type :=\
    \ 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzyk5wn5l_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_is_open := false\n    for _, char := range paren_string {\n \
    \       if char == ')' {\n            if paren_group_is_open {\n             \
    \   paren_groups = append(paren_groups, paren_group)\n                paren_group\
    \ = \"\"\n                paren_group_is_open = false\n            } else {\n\
    \                paren_group_is_open = true\n            }\n        } else {\n\
    \            if paren_group_is_open {\n                paren_group += char\n \
    \           } else {\n                paren_groups = append(paren_groups, paren_group)\n\
    \                paren_group = char\n                paren_group_is_open = false\n\
    \            }\n        }\n    }\n    paren_groups = append(paren_groups, paren_group)\n\
    \    return paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n\
    \  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv0vd_92q_test.go:29:17: invalid operation: paren_group += char (mismatched
    types string and rune)

    /tmp/tmpv0vd_92q_test.go:32:31: cannot use char (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_braces := 0\n    paren_group_close_braces := 0\n\
    \    paren_group_open_brace_count := 0\n    paren_group_close_brace_count := 0\n\
    \    paren_group_open_brace_string := \"\"\n    paren_group_close_brace_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\n    paren_group_string := \"\"\n    paren_group_string\
    \ := \"\"\n    paren_group_string := \"\"\n    paren_group_string := \"\"\n  \
    \  paren_group_string := \"\"\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n\
    \  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuskxhubs_test.go:76:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ if paren_group_open {\n                fmt.Println(\"Error: unexpected open\
    \ paren group\")\n                fmt.Println(\"Input:\", paren_string)\n    \
    \            fmt.Println(\"Expected:\", paren_group_string)\n                fmt.Println(\"\
    Actual:\", paren_group_string)\n                panic(\"unexpected open paren\
    \ group\")\n            }\n            paren_group_open = true\n            paren_group_string\
    \ += char\n        } else if char == ')' {\n            if paren_group_closed\
    \ {\n                fmt.Println(\"Error: unexpected close paren group\")\n  \
    \              fmt.Println(\"Input:\", paren_string)\n                fmt.Println(\"\
    Expected:\", paren_group_string)\n                fmt.Println(\"Actual:\", paren_group_string)\n\
    \                panic(\"unexpected close paren group\")\n            }\n    \
    \        paren_group_closed = true\n            paren_group_string += char\n \
    \       } else if char == ' ' {\n            if paren_group_open {\n         \
    \       paren_group_string += char\n            } else if paren_group_closed {\n\
    \                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n                paren_group_closed = false\n            } else {\n  \
    \              fmt.Println(\"Error: unexpected space\")\n                fmt.Println(\"\
    Input:\", paren_string)\n                fmt.Println(\"Expected:\", paren_group_string)\n\
    \                fmt.Println(\"Actual:\", paren_group_string)\n              \
    \  panic(\"unexpected space\")\n            }\n        } else {\n            paren_group_string\
    \ += char\n        }\n    }\n    if paren_group_open {\n        fmt.Println(\"\
    Error: unexpected open paren group\")\n        fmt.Println(\"Input:\", paren_string)\n\
    \        fmt.Println(\"Expected:\", paren_group_string)\n        fmt.Println(\"\
    Actual:\", paren_group_string)\n        panic(\"unexpected open paren group\"\
    )\n    }\n    if paren_group_closed {\n        fmt.Println(\"Error: unexpected\
    \ close paren group\")\n        fmt.Println(\"Input:\", paren_string)\n      \
    \  fmt.Println(\"Expected:\", paren_group_string)\n        fmt.Println(\"Actual:\"\
    , paren_group_string)\n        panic(\"unexpected close paren group\")\n    }\n\
    \    paren_group_strings = append(paren_group\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf_mpgsdp_test.go:73:45: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074008
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := make([]string, 0)\n    stack := make([]string,\
    \ 0)\n    open_braces := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type := 0\n    brace_type\
    \ := 0\n    brace_type := 0\n    brace_type := 0\n    bra\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpre1ad6uy_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_group := \"\"\n\
    \    paren_group_open := false\n    for _, char := range paren_string {\n    \
    \    if char == '(' {\n            if paren_group_open {\n                fmt.Println(\"\
    Found nested paren group\")\n                fmt.Println(paren_group)\n      \
    \          fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_group_open)\n                fmt.Println(paren_group_open)\n\
    \                fmt.Println(paren_\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiv7kl6wr_test.go:67:35: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    brace_count := 0\n    open_count := 0\n    close_count := 0\n \
    \   for _, character := range paren_string {\n        if character == '(' {\n\
    \            open_count++\n            paren_group_string += character\n     \
    \   } else if character == ')' {\n            close_count++\n            paren_group_string\
    \ += character\n        } else if character == ' ' {\n            if open_count\
    \ > close_count {\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_string = \"\"\n           \
    \     open_count = 0\n                close_count = 0\n            }\n       \
    \ } else {\n            if open_count > close_count {\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                open_count = 0\n                close_count = 0\n  \
    \          }\n            paren_group_string += character\n        }\n    }\n\
    \    if open_count > close_count {\n        paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_rlpfut_test.go:17:5: brace_count declared but not used

    /tmp/tmpx_rlpfut_test.go:23:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpx_rlpfut_test.go:26:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpx_rlpfut_test.go:41:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Your code here\n    paren_groups = make([]string,\
    \ 0)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphyvgyzoi_test.go:56:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := make([]string, 0)\n    paren_group :=\
    \ \"\"\n    paren_group_is_open := false\n    paren_group_is_closed := false\n\
    \    paren_group_is_nested := false\n    paren_group_is_unbalanced := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_unclosed := false\n\
    \    paren_group_is_unclosed := false\n    paren_group_is_un\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmj_sov3_test.go:67:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            if paren_group_open {\n                paren_group_closed--\n\
    \            } else {\n                paren_group_open = true\n             \
    \   paren_group_count++\n            }\n        } else if char == ')' {\n    \
    \        if paren_group_closed {\n                paren_group_open--\n       \
    \     } else {\n                paren_group_closed = true\n                paren_group_count--\n\
    \            }\n        } else if char == ' ' {\n            if paren_group_open\
    \ && paren_group_closed {\n                paren_group_string = paren_group_string[:len(paren_group_string)-1]\n\
    \                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n                paren_group_closed = false\n                paren_group_count\
    \ = 0\n            }\n        } else {\n            paren_group_string = append(paren_group_string,\
    \ char)\n        }\n    }\n    if paren_group_open {\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_30kza72_test.go:23:17: invalid operation: paren_group_closed-- (non-numeric
    type bool)

    /tmp/tmp_30kza72_test.go:30:17: invalid operation: paren_group_open-- (non-numeric
    type bool)

    /tmp/tmp_30kza72_test.go:45:41: first argument to append must be a slice; have
    paren_group_string (variable of type string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\
    \n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string += \"\
    )\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string +=\
    \ \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvtu_s7s_test.go:80:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    for _, character := range paren_string\
    \ {\n        if character == \"(\" {\n            paren_group_open = true\n  \
    \      } else if character == \")\" {\n            if paren_group_open {\n   \
    \             paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n            } else {\n                fmt.Printf(\"Unmatched closing\
    \ paren %v\\n\", character)\n            }\n        } else {\n            paren_group_string\
    \ += character\n        }\n    }\n    if paren_group_open {\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdykwgf5v_test.go:19:25: invalid operation: character == "(" (mismatched
    types rune and untyped string)

    /tmp/tmpdykwgf5v_test.go:21:32: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmpdykwgf5v_test.go:30:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a slice to hold the result\n    result\
    \ := make([]string, 0)\n\n    // Iterate over each character in the input string\n\
    \    for _, c := range paren_string {\n        // If the character is a left paren,\
    \ add it to the result slice\n        if c == '(' {\n            result = append(result,\
    \ c)\n        }\n\n        // If the character is a right paren, remove it from\
    \ the result slice\n        if c == ')' {\n            result = removeElementFromSlice(result,\
    \ c)\n        }\n    }\n\n    // Return the result slice\n    return result\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ooh7bqw_test.go:22:37: cannot use c (variable of type rune) as type string
    in argument to append

    /tmp/tmp7ooh7bqw_test.go:27:22: undefined: removeElementFromSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make([]string, 0)\n    paren_groups =\
    \ append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren_groups, paren_string)\n    paren_groups\
    \ = append(paren_groups, paren_string)\n    paren_groups = append(paren_groups,\
    \ paren_string)\n    paren_groups = append(paren\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphobsgs_v_test.go:54:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074004
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := make([]string, 0)\n    stack := make([]string,\
    \ 0)\n    stack := append(stack, paren_string)\n    depth := 0\n    depth := 0\n\
    \    for len(stack) > 0 {\n        depth += 1\n        result := append(result,\
    \ stack[len(stack)-1])\n        stack = stack[:len(stack)-1]\n    }\n    return\
    \ result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate :=\
    \ separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"()\",\
    \ \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected:\
    \ []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"\
    ( ) (( )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajksevd0_test.go:17:11: no new variables on left side of :=

    /tmp/tmpajksevd0_test.go:19:11: no new variables on left side of :=

    /tmp/tmpajksevd0_test.go:22:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_regex := regexp.MustCompile(`\\((?P<paren_group>[^\\\
    (\\)]+)\\)`)\n    paren_groups := paren_group_regex.FindAllStringSubmatch(paren_string,\
    \ -1)\n    result := make([]string, len(paren_groups))\n    for index, paren_group\
    \ := range paren_groups {\n        result[index] = paren_group[0]\n    }\n   \
    \ return result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0zwnguhl_test.go:15:26: undefined: regexp

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups := []string{}\n    paren_stacks := [][]string{}\n\
    \    paren_stack := []string{}\n    paren_stack_size := 0\n    paren_stack_max\
    \ := 0\n    paren_stack_max += len(paren_string)\n    for i := 0; i < len(paren_string);\
    \ i++ {\n        switch paren_string[i] {\n        case ')':\n            if paren_stack[paren_stack_size]\
    \ == \"\" {\n                paren_stack[paren_stack_size] = paren_string[i]\n\
    \                paren_stack_size++\n            } else {\n                paren_stack[paren_stack_size]\
    \ = paren_stack[paren_stack_size] + \"(\" + paren_string[i] + \")\"\n        \
    \        paren_stack_size++\n            }\n            if paren_stack_size ==\
    \ paren_stack_max {\n                paren_stacks = append(paren_stacks, paren_stack)\n\
    \                paren_stack = []string{}\n                paren_stack_size =\
    \ 0\n            }\n        case ')':\n            if paren_stack[paren_stack_size]\
    \ == \"\" {\n                paren_stack[paren_stack_size] = paren_string[i]\n\
    \                paren_stack_size++\n            } else {\n                paren_stack[paren_stack_size]\
    \ = paren_stack[paren_stack_size] + \"(\" + paren_string[i] + \")\"\n        \
    \        paren_stack_size++\n            }\n            if paren_stack_size ==\
    \ paren_stack_max {\n                paren_stacks = append(paren_stacks, paren_stack)\n\
    \                paren_stack = []string{}\n                paren_stack_size =\
    \ 0\n            }\n        default:\n            if paren_stack[paren_stack_size]\
    \ == \"\" {\n                paren_stack[paren_stack_size] = paren_string[i]\n\
    \                paren_stack_size++\n            } else {\n                paren_stack[paren_stack_size]\
    \ = paren_stack[paren_stack_size] + paren_string[i]\n                paren_stack_size++\n\
    \            }\n        }\n    }\n    for _, paren_stack := range paren_stacks\
    \ {\n        paren_groups = append(paren_groups, paren_stack...)\n    }\n    return\
    \ paren_groups\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate\
    \ := separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual:\
    \ candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n \
    \    { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"()\", \"\
    (())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmyax41l7_test.go:25:49:\
    \ cannot use paren_string[i] (value of type byte) as type string in assignment\n\
    /tmp/tmpmyax41l7_test.go:28:49: invalid operation: paren_stack[paren_stack_size]\
    \ + \"(\" + paren_string[i] (mismatched types string and byte)\n/tmp/tmpmyax41l7_test.go:36:14:\
    \ duplicate case ')' (constant 41 of type byte) in expression switch\n\t/tmp/tmpmyax41l7_test.go:23:14:\
    \ previous case\n/tmp/tmpmyax41l7_test.go:38:49: cannot use paren_string[i] (value\
    \ of type byte) as type string in assignment\n/tmp/tmpmyax41l7_test.go:41:49:\
    \ invalid operation: paren_stack[paren_stack_size] + \"(\" + paren_string[i] (mismatched\
    \ types string and byte)\n/tmp/tmpmyax41l7_test.go:51:49: cannot use paren_string[i]\
    \ (value of type byte) as type string in assignment\n/tmp/tmpmyax41l7_test.go:54:49:\
    \ invalid operation: paren_stack[paren_stack_size] + paren_string[i] (mismatched\
    \ types string and byte)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_type := \"\"\n\
    \    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n \
    \   brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type\
    \ := \"\"\n    brace_type := \"\"\n    brace_type := \"\"\n    brace_type := \"\
    \"\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfyab_l0d_test.go:88:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    paren_string\
    \ += \")\"\n    paren_string = strings.Trim(paren_string, \")\")\n    paren_string\
    \ = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"\
    (\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \")\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string\
    \ = strings.Replace(paren_string, \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \"\
    )\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \")\", \")\", -1)\n    paren_string\
    \ = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"\
    (\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \")\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string\
    \ = strings.Replace(paren_string, \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \"\
    )\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \")\", \")\", -1)\n    paren_string\
    \ = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"\
    (\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \")\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n    paren_string\
    \ = strings.Replace(paren_string, \")\", \")\", -1)\n    paren_string = strings.Replace(paren_string,\
    \ \"(\", \"(\", -1)\n    paren_string = strings.Replace(paren_string, \")\", \"\
    )\", -1)\n    paren_string = strings.Replace(paren_string, \"(\", \"(\", -1)\n\
    \    paren_string = strings.Replace(paren_string, \")\", \")\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq_z756g1_test.go:48:55: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_groups = make(map[string][]string)\n    paren_stack\
    \ = make([]string, 0)\n    paren_stack = append(paren_stack, paren_string)\n \
    \   paren_stack = append(paren_stack, \"()\")\n    paren_stack = append(paren_stack,\
    \ \"(())\")\n    paren_stack = append(paren_stack, \"(()())\")\n    paren_stack\
    \ = append(paren_stack, \"()()\")\n    paren_stack = append(paren_stack, \"(())()\"\
    )\n    paren_stack = append(paren_stack, \"(()())()\")\n    paren_stack = append(paren_stack,\
    \ \"()()()\")\n    paren_stack = append(paren_stack, \"(())()()\")\n    paren_stack\
    \ = append(paren_stack, \"(()())()()\")\n    paren_stack = append(paren_stack,\
    \ \"()()()()\")\n    paren_stack = append(paren_stack, \"(())()()()\")\n    paren_stack\
    \ = append(paren_stack, \"(()())()()()\")\n    paren_stack = append(paren_stack,\
    \ \"()()()()()\")\n    paren_stack = append(paren_stack, \"(())()()()()\")\n \
    \   paren_stack = append(paren_stack, \"(()())()()()()\")\n    paren_stack = append(paren_stack,\
    \ \"()()()()()()\")\n    paren_stack = append(paren_stack, \"(())()()()()()\"\
    )\n    paren_stack = append(paren_stack, \"(()())()()()()()\")\n    paren_stack\
    \ = append(paren_stack, \"()()()()()()()()\")\n    paren_stack = append(paren_stack,\
    \ \"(())()()()()()()()\")\n    paren_stack = append(paren_stack, \"(()())()()()()()()\"\
    )\n    paren_stack = append(paren_stack, \"()()()()()()()()()\")\n    paren_stack\
    \ = append(paren_stack, \"(())()()()()()()()()\")\n    paren_stack = append(paren_stack,\
    \ \"(()())()()()()()()()\")\n    paren_stack = append(paren_stack, \"()()()()()()()()()()\"\
    )\n    paren_stack = append(paren_stack, \"(())()()()()()()()()()\")\n    paren_stack\
    \ = append(\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbkv4qeyb_test.go:45:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_count\
    \ := 0\n    paren_group_string := \"\"\n    paren_group_open_brace := false\n\
    \    for _, character := range paren_string {\n        if character == '(' {\n\
    \            if paren_group_open_brace {\n                fmt.Printf(\"Found a\
    \ nested paren group. Closing group %v\\n\", paren_group_string)\n           \
    \     paren_group_count -= 1\n                if paren_group_count == 0 {\n  \
    \                  paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                }\n                paren_group_open_brace = false\n         \
    \       paren_group_string = \"\"\n            } else {\n                paren_group_open_brace\
    \ = true\n                paren_group_count += 1\n            }\n        } else\
    \ if character == ')' {\n            if paren_group_open_brace {\n           \
    \     fmt.Printf(\"Found a nested paren group. Closing group %v\\n\", paren_group_string)\n\
    \                paren_group_count -= 1\n                if paren_group_count\
    \ == 0 {\n                    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                }\n                paren_group_open_brace\
    \ = false\n                paren_group_string = \"\"\n            } else {\n \
    \               paren_group_open_brace = false\n                paren_group_count\
    \ += 1\n            }\n        } else {\n            paren_group_string += string(character)\n\
    \        }\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Found a nested paren group. Closing group \nFound a nested paren group.\
    \ Closing group \nFound a nested paren group. Closing group  \nFound a nested\
    \ paren group. Closing group \nFound a nested paren group. Closing group  \nFound\
    \ a nested paren group. Closing group  \nFound a nested paren group. Closing group\
    \ \nFound a nested paren group. Closing group \nFound a nested paren group. Closing\
    \ group \nFound a nested paren group. Closing group \nFound a nested paren group.\
    \ Closing group  \nFound a nested paren group. Closing group  \nFound a nested\
    \ paren group. Closing group \nFound a nested paren group. Closing group  \nFound\
    \ a nested paren group. Closing group \nFound a nested paren group. Closing group\
    \ \nFound a nested paren group. Closing group \nFound a nested paren group. Closing\
    \ group \nFound a nested paren group. Closing group \nFound a nested paren group.\
    \ Closing group  \nFound a nested paren group. Closing group  \nFound a nested\
    \ paren group. Closing group   \nFound a nested paren group. Closing group   \n\
    --- FAIL: TestSeparate_Paren_Groups (0.00s)\n    --- FAIL: TestSeparate_Paren_Groups/test_num__0\
    \ (0.00s)\n        tmps6kzfk1e_test.go:69: expected '[(()()) ((())) () ((())()())]',\
    \ got '[]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__1 (0.00s)\n    \
    \    tmps6kzfk1e_test.go:69: expected '[() (()) ((())) (((())))]', got '[  ]'\n\
    \    --- FAIL: TestSeparate_Paren_Groups/test_num__2 (0.00s)\n        tmps6kzfk1e_test.go:69:\
    \ expected '[(()(())((())))]', got '[]'\n    --- FAIL: TestSeparate_Paren_Groups/test_num__3\
    \ (0.00s)\n        tmps6kzfk1e_test.go:69: expected '[() (()) (()())]', got '[\
    \   ]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_string += \"(\"\n    paren_group_open = true\n    for _, character\
    \ := range paren_string {\n        if paren_group_open {\n            if character\
    \ == \")\" {\n                paren_group_open = false\n                paren_group_closed\
    \ = true\n                paren_group_string += \")\"\n            } else if character\
    \ == \" \" {\n                paren_group_string += \" \"\n            } else\
    \ {\n                paren_group_string += character\n            }\n        }\
    \ else if paren_group_closed {\n            if character == \" \" {\n        \
    \        paren_group_string += \" \"\n            } else {\n                paren_group_string\
    \ += character\n            }\n        } else {\n            if character == \"\
    \ \" {\n                paren_group_string += \" \"\n            } else {\n  \
    \              paren_group_string += character\n            }\n        }\n   \
    \ }\n    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpius9k9a3_test.go:23:29: invalid operation: character == ")" (mismatched
    types rune and untyped string)

    /tmp/tmpius9k9a3_test.go:27:36: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpius9k9a3_test.go:30:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpius9k9a3_test.go:33:29: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpius9k9a3_test.go:36:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpius9k9a3_test.go:39:29: invalid operation: character == " " (mismatched
    types rune and untyped string)

    /tmp/tmpius9k9a3_test.go:42:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if character == '(' {\n \
    \           if paren_group_open {\n                fmt.Println(\"Error: unexpected\
    \ open paren group\")\n                return nil\n            }\n           \
    \ paren_group_open = true\n            paren_group_string += character\n     \
    \   } else if character == ')' {\n            if paren_group_closed {\n      \
    \          fmt.Println(\"Error: unexpected close paren group\")\n            \
    \    return nil\n            }\n            paren_group_closed = true\n      \
    \      paren_group_string += character\n        } else if character == ' ' {\n\
    \            if paren_group_open {\n                paren_group_string += character\n\
    \            } else if paren_group_closed {\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open = false\n                paren_group_closed\
    \ = false\n            } else {\n                fmt.Println(\"Error: unexpected\
    \ space\")\n                return nil\n            }\n        } else {\n    \
    \        paren_group_string += character\n        }\n    }\n    if paren_group_open\
    \ {\n        fmt.Println(\"Error: unexpected open paren group\")\n        return\
    \ nil\n    }\n    if paren_group_closed {\n        fmt.Println(\"Error: unexpected\
    \ close paren group\")\n        return nil\n    }\n    paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqwbt0vdm_test.go:26:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpqwbt0vdm_test.go:33:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpqwbt0vdm_test.go:36:17: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpqwbt0vdm_test.go:47:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    // Initialize a stack to keep track of which parenthesis\
    \ groups are currently open.\n    stack := make([]bool, len(paren_string))\n \
    \   // Initialize a result list to hold the result\n    result := make([]string,\
    \ 0)\n    // Iterate over the input string and add each parenthesis group to the\
    \ result list\n    for i, c := range paren_string {\n        // If the current\
    \ character is a left parenthesis, push it to the stack\n        if c == '(' {\n\
    \            stack[i] = true\n        }\n        // If the current character is\
    \ a right parenthesis, pop the stack until we reach a left parenthesis\n     \
    \   // or reach the end of the stack\n        if c == ')' {\n            for j\
    \ := len(stack) - 1; j >= 0; j-- {\n                if stack[j] {\n          \
    \          stack[j] = false\n                    break\n                }\n  \
    \          }\n        }\n        // If the current character is a left parenthesis\
    \ and stack is empty, add it to the result list\n        if c == '(' && len(stack)\
    \ == 0 {\n            result = append(result, c)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate :=\
    \ separate_paren_groups\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []string{\"(()())\", \"((()))\", \"()\",\
    \ \"((())()())\"} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected:\
    \ []string{\"()\", \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"\
    ( ) (( )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74_wy8rk_test.go:37:37: cannot use c (variable of type rune) as type string
    in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  for _, character := range paren_string {\n        if character == '(' {\n \
    \           if paren_group_open {\n                fmt.Println(\"Found open brace\
    \ without closing brace in string\")\n            }\n            paren_group_open\
    \ = true\n            paren_group_string += character\n        } else if character\
    \ == ')' {\n            if paren_group_closed {\n                fmt.Println(\"\
    Found closed brace without opening brace in string\")\n            }\n       \
    \     paren_group_closed = true\n            paren_group_string += character\n\
    \        } else if character == ' ' {\n            if paren_group_open && paren_group_closed\
    \ {\n                fmt.Println(\"Found space in string\")\n            }\n \
    \           paren_group_string += character\n        } else {\n            paren_group_string\
    \ += character\n        }\n    }\n    if paren_group_open {\n        fmt.Println(\"\
    Found open brace without closing brace in string\")\n    }\n    if paren_group_closed\
    \ {\n        fmt.Println(\"Found closed brace without opening brace in string\"\
    )\n    }\n    paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpebsj1i31_test.go:25:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpebsj1i31_test.go:31:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpebsj1i31_test.go:36:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    /tmp/tmpebsj1i31_test.go:38:13: invalid operation: paren_group_string += character
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := make([]string, 0)\n    paren_group_string\
    \ := \"\"\n    paren_group_open := false\n    paren_group_closed := false\n  \
    \  paren_group_count := 0\n    for _, character := range paren_string {\n    \
    \    if character == '(' {\n            if paren_group_open {\n              \
    \  fmt.Printf(\"Error: unexpected open paren group at position %d\\n\", paren_group_count)\n\
    \                fmt.Printf(\"Expected: \\\"(\\\" at position %d\\n\", paren_group_count)\n\
    \                fmt.Printf(\"Actual: \\\"%s\\\" at position %d\\n\", paren_group_string,\
    \ paren_group_count)\n                panic(\"unexpected open paren group\")\n\
    \            }\n            paren_group_open = true\n            paren_group_count\
    \ += 1\n            paren_group_string += character\n        } else if character\
    \ == ')' {\n            if paren_group_closed {\n                fmt.Printf(\"\
    Error: unexpected close paren group at position %d\\n\", paren_group_count)\n\
    \                fmt.Printf(\"Expected: \\\")\\\" at position %d\\n\", paren_group_count)\n\
    \                fmt.Printf(\"Actual: \\\"%s\\\" at position %d\\n\", paren_group_string,\
    \ paren_group_count)\n                panic(\"unexpected close paren group\")\n\
    \            }\n            paren_group_closed = true\n            paren_group_string\
    \ += character\n        } else if character == ' ' {\n            if paren_group_open\
    \ {\n                paren_group_string += character\n            } else if paren_group_closed\
    \ {\n                paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \                paren_group_string = \"\"\n                paren_group_open =\
    \ false\n                paren_group_closed = false\n                paren_group_count\
    \ = 0\n            } else {\n                fmt.Printf(\"Error: unexpected space\
    \ at position %d\\n\", paren_group_count)\n                fmt.Printf(\"Expected:\
    \ \\\"\\\" at position %d\\n\", paren_group_count)\n                fmt.Printf(\"\
    Actual: \\\"%s\\\" at position %d\\n\", paren_group_string, paren_group_count)\n\
    \                panic(\"unexpected space\")\n            }\n        } else {\n\
    \            if paren_group_open {\n                paren_group_string += character\n\
    \            } else if paren_group_closed {\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open = false\n                paren_group_closed\
    \ = false\n                paren_group_count = 0\n            } else {\n     \
    \           fmt.Printf(\"Error: unexpected character at position %d\\n\", paren_group_count)\n\
    \                fmt.Printf(\"Expe\nfunc TestSeparate_Paren_Groups(t *testing.T)\
    \ {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"() (()) ((()))\
    \ (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"(((())))\"}\
    \ },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"(()(())((())))\"\
    } },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected: []string{\"\
    ()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyliqhxtx_test.go:66:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074009
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    result := []string{}\n    stack := []string{}\n    open_braces\
    \ := 0\n    close_braces := 0\n    brace_count := 0\n    brace_count := 0\n  \
    \  for _, char := range paren_string {\n        if char == '(' {\n           \
    \ open_braces++\n            stack = append(stack, char)\n        } else if char\
    \ == ')' {\n            close_braces++\n            if open_braces > close_braces\
    \ {\n                open_braces--\n                close_braces--\n         \
    \   }\n            if open_braces == close_braces {\n                brace_count++\n\
    \            }\n            if open_braces == 0 && close_braces == 0 {\n     \
    \           brace_count--\n            }\n            if open_braces > close_braces\
    \ {\n                open_braces--\n                close_braces--\n         \
    \   }\n            if open_braces == 0 && close_braces == 0 {\n              \
    \  brace_count--\n            }\n            if open_braces == close_braces {\n\
    \                brace_count--\n            }\n            if open_braces == 0\
    \ && close_braces == 0 {\n                brace_count--\n            }\n     \
    \       if open_braces == close_braces {\n                brace_count--\n    \
    \        }\n            if open_braces == 0 && close_braces == 0 {\n         \
    \       brace_count--\n            }\n            if open_braces == close_braces\
    \ {\n                brace_count--\n            }\n            if open_braces\
    \ == 0 && close_braces == 0 {\n                brace_count--\n            }\n\
    \            if open_braces == close_braces {\n                brace_count--\n\
    \            }\n            if open_braces == 0 && close_braces == 0 {\n     \
    \           brace_count--\n            }\n            if open_braces == close_braces\
    \ {\n                brace_count--\n            }\n            if open_braces\
    \ == 0 && close_braces == 0 {\n                brace_count--\n            }\n\
    \            if open_braces == close_braces {\n                brace_count--\n\
    \            }\n            if open_braces == 0 && close_braces == 0 {\n     \
    \           brace_count--\n            }\n            if open_braces == close_braces\
    \ {\n                brace_count--\n            }\n            if open_braces\
    \ == 0 && close_braces == 0 {\n                brace_count--\n            }\n\
    \            if open_braces == close_braces {\n                brace_count--\n\
    \            }\n            if open_braces == 0 && close_braces == 0 {\n     \
    \           brace_count--\n            }\n            if open_braces == close_brace\n\
    func TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo0e05xzd_test.go:93:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_count\
    \ := 0\n    paren_group_string := \"\"\n    paren_group_open := false\n    for\
    \ _, char := range paren_string {\n        if char == '(' {\n            if paren_group_open\
    \ {\n                fmt.Println(\"Found open paren group\", paren_group_count,\
    \ paren_group_string)\n                paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n                paren_group_count = 0\n               \
    \ paren_group_string = \"\"\n                paren_group_open = false\n      \
    \      }\n            paren_group_open = true\n        } else if char == ')' {\n\
    \            if paren_group_open {\n                paren_group_open = false\n\
    \                paren_group_string = paren_group_string + char\n            \
    \    paren_group_count++\n            } else {\n                fmt.Println(\"\
    Found close paren group\", paren_group_count, paren_group_string)\n          \
    \      paren_group_strings = append(paren_group_strings, paren_group_string)\n\
    \            }\n        } else {\n            paren_group_string = paren_group_string\
    \ + char\n        }\n    }\n    if paren_group_open {\n        fmt.Println(\"\
    Found open paren group\", paren_group_count, paren_group_string)\n        paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n    }\n    return paren_group_strings\n\
    }\n\nfunc TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9vmld8s5_test.go:32:38: invalid operation: paren_group_string + char (mismatched
    types string and rune)

    /tmp/tmp9vmld8s5_test.go:39:34: invalid operation: paren_group_string + char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \")\"\n    paren_string += \"(\"\n \
    \   paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\
    \n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string += \"\
    (\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string +=\
    \ \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8clhzg06_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 1
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n\
    \    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"\
    {}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    paren_string\
    \ += \"{}\"\n    paren_string += \"{}\"\n    paren_string += \"{}\"\n    \nfunc\
    \ TestSeparate_Paren_Groups(t *testing.T) {\n  candidate := separate_paren_groups\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []string{\"(()())\", \"((()))\", \"()\", \"((())()())\"} },\n   \
    \  { actual: candidate(\"() (()) ((())) (((())))\"), expected: []string{\"()\"\
    , \"(())\", \"((()))\", \"(((())))\"} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []string{\"(()(())((())))\"} },\n     { actual: candidate(\"( ) ((\
    \ )) (( )( ))\"), expected: []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8bpr93_n_test.go:89:6: expected ''('', found TestSeparate_Paren_Groups

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074002
- exit_code: 2
  program: "package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string containing multiple groups of\
    \ nested parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n//\
    \ []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string\
    \ string) []string {\n    paren_group_strings := []string{}\n    paren_group_string\
    \ := \"\"\n    paren_group_open_brace := false\n    paren_group_close_brace :=\
    \ false\n    paren_group_string += paren_string\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            if paren_group_open_brace {\n     \
    \           fmt.Printf(\"%v\", paren_group_string)\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open_brace = false\n                paren_group_close_brace\
    \ = false\n            }\n            paren_group_open_brace = true\n        }\
    \ else if char == ')' {\n            if paren_group_close_brace {\n          \
    \      fmt.Printf(\"%v\", paren_group_string)\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open_brace = false\n                paren_group_close_brace\
    \ = false\n            }\n            paren_group_close_brace = true\n       \
    \ } else if char == ' ' {\n            if paren_group_open_brace {\n         \
    \       fmt.Printf(\"%v\", paren_group_string)\n                paren_group_strings\
    \ = append(paren_group_strings, paren_group_string)\n                paren_group_string\
    \ = \"\"\n                paren_group_open_brace = false\n                paren_group_close_brace\
    \ = false\n            }\n        } else {\n            paren_group_string +=\
    \ char\n        }\n    }\n    if paren_group_open_brace {\n        fmt.Printf(\"\
    %v\", paren_group_string)\n        paren_group_strings = append(paren_group_strings,\
    \ paren_group_string)\n    }\n    return paren_group_strings\n}\n\nfunc TestSeparate_Paren_Groups(t\
    \ *testing.T) {\n  candidate := separate_paren_groups\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []string{\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []string{\"()\", \"(())\", \"((()))\", \"\
    (((())))\"} },\n     { actual: candidate(\"(()(())((())))\"), expected: []string{\"\
    (()(())((())))\"} },\n     { actual: candidate(\"( ) (( )) (( )( ))\"), expected:\
    \ []string{\"()\", \"(())\", \"(()())\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwkd2a52_test.go:48:13: invalid operation: paren_group_string += char
    (mismatched types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074010
