name: HumanEval_80_is_happy
language: go_test.go
prompt: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ You are given a string s.\n// Your task is to check if the string is hapgo or\
  \ not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>> is_happy(aa)\n\
  // false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n// false\n// >>>\
  \ is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc is_happy(s string)\
  \ bool {\n"
tests: "func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
  aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true },\n\
  \     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
  adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false },\n\
  \     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual: candidate(\"\
  iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(s) < 3 {\n        return false\n    }\n    lastLetter :=\
    \ s[len(s)-1]\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1]\
    \ {\n            return false\n        }\n    }\n    return lastLetter == s[len(s)-2]\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    \n    lastIndex :=\
    \ len(s) - 3\n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n",
  "    if len(s) < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n\
    \    lastLetters := make([]string, lastIndex)\n    for i := 0; i < lastIndex;\
    \ i++ {\n        lastLetters[i] = s[i+3]\n    }\n    return len(lastLetters) ==\
    \ 1 && len(lastLetters[0]) == 1 && lastLetters[0] != s[lastIndex]\n}\n", "   \
    \ if len(s) < 3 {\n        return false\n    }\n    \n    lastLetter := s[len(s)-1]\n\
    \    \n    for i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1] {\n    \
    \        return false\n        }\n    }\n    \n    return lastLetter == s[len(s)-2]\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    \n    lastIndex :=\
    \ len(s) - 3\n    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] != s[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n",
  "    if len(s) < 3 {\n        return false\n    }\n    \n    last3 := s[len(s)-3:]\n\
    \    \n    for i := 0; i < len(last3); i++ {\n        if last3[i] != last3[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI appreciate your efforts, but this does not answer\
    \ the question. He wants to know if there is a way to do this without using any\
    \ loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this does not answer\
    \ the question. He wants to know if there is a way to do this without using any\
    \ loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this does not answer\
    \ the question. He wants to know if there is a way to do this without using any\
    \ loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this does not answer\
    \ the question. He wants to know if there is a way to do this without using any\
    \ loops.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this does not answer\
    \ the question. He wants to know if there is a way to do this without using any\
    \ loops.\n<|/ c |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n \
    \   \"strings\"\n)\n", "    if len(s) < 3 {\n        return false\n    }\n   \
    \ result := true\n    for i := 0; i < len(s); i++ {\n        if s[i] == s[i+1]\
    \ {\n            result = false\n        }\n    }\n    return result\n}\n", " \
    \   if len(s) < 3 {\n        return false\n    }\n    lastIndex := len(s) - 1\n\
    \    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n", "    if len(s) < 3\
    \ {\n        return false\n    }\n    count := 0\n    for _, v := range s {\n\
    \        if v != s[count] {\n            return false\n        }\n        count++\n\
    \        if count == 3 {\n            count = 0\n        }\n    }\n    return\
    \ true\n}\n", "    if len(s) < 3 {\n        return false\n    }\n    last3 :=\
    \ s[len(s)-3:]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    for _, v := range last3 {\n        if v != last3[len(last3)-1] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    if len(s) <\
    \ 3 {\n        return false\n    }\n    \n    lastLetter := s[0]\n    \n    for\
    \ i := 1; i < len(s); i++ {\n        if s[i] != lastLetter {\n            return\
    \ false\n        }\n        lastLetter = s[i]\n    }\n    \n    return true\n\
    }\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n", "    if len(s) < 3 {\n        return\
    \ false\n    }\n    chars := make([]string, len(s))\n    for i := range chars\
    \ {\n        chars[i] = s[i]\n    }\n    chars = append(chars, chars...)\n   \
    \ sort.Strings(chars)\n    for i := 0; i < len(chars)-3; i++ {\n        if chars[i]\
    \ != chars[i+1] {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    \n    lastIndex :=\
    \ len(s) - 1\n    \n    for i := 0; i < lastIndex; i++ {\n        if s[i] == s[i+1]\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n",
  "    if len(s) < 3 {\n        return false\n    }\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n  \
    \  }\n    \n    return true\n}\n", "    if len(s) < 3 {\n        return false\n\
    \    }\n    result := true\n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ != s[i] {\n            result = false\n            break\n        }\n    }\n\
    \    return result\n}\n", "    if len(s) < 3 {\n        return false\n    }\n\
    \    lastLetter := s[0]\n    result := true\n    for _, letter := range s[1:]\
    \ {\n        if letter == lastLetter {\n            result = false\n        }\
    \ else {\n            lastLetter = letter\n        }\n    }\n    return result\n\
    }\n", "    if len(s) < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n\
    \    letters := make(map[rune]bool)\n    for _, letter := range last3 {\n    \
    \    letters[letter] = true\n    }\n    for _, letter := range s {\n        if\
    \ letters[letter] {\n            return false\n        }\n        letters[letter]\
    \ = true\n    }\n    return true\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", " \
    \   if len(s) < 3 {\n        return false\n    }\n    last3 := s[len(s)-3:]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n\
    \    last3 := last3[:len(last3)/3]\n    last3 := last3[:len(last3)/3]\n    last3\
    \ := last3[:len(last3)/3]", "    if len(s) < 3 {\n        return false\n    }\n\
    \    last3 := s[len(s)-3:]\n    letters := make(map[rune]bool)\n    for _, c :=\
    \ range last3 {\n        letters[c] = true\n    }\n    for i := 0; i < len(s)-3;\
    \ i++ {\n        if letters[s[i]] == true {\n            return false\n      \
    \  }\n    }\n    return true\n}\n</code>\n<|/ a tags=string,go |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n", " \
    \   if len(s) < 3 {\n        return false\n    }\n    result := true\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == s[i+1] {\n            result =\
    \ false\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
