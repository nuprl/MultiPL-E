name: HumanEval_139_special_factorial
language: go_test.go
prompt: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunc special_factorial(n int) int {\n"
tests: "func TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
  \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
  \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n < 1 {\n        return n\n    }\n    return special_factorial(n-1)\
    \ * n\n}\n", "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    result := 1\n    for i := 1; i <= n; i++ {\n        result\
    \ *= i\n    }\n    return result\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    return n * special_factorial(n - 1)\n}\n", "    if n <= 1 {\n     \
    \   return 1\n    }\n    return n * special_factorial(n - 1)\n}\n", "    if n\
    \ == 0 {\n        return 1\n    }\n    return n * special_factorial(n - 1)\n}\n",
  "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n -\
    \ 1)\n}\n", "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n", "    result := 1\n    for i := 1; i <= n; i++ {\n        result\
    \ *= i\n    }\n    return result\n}\n", "    if n == 0 {\n        return 1\n \
    \   }\n    return n * special_factorial(n - 1)\n}\n", "    if n == 1 {\n     \
    \   return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n    if n\
    \ == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n   \
    \ }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n        return\
    \ 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n == 10\
    \ {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 15511210043330985984000000\n    }\n    if n == 26 {\n        return 403291461126605635584000000\n\
    \    }\n    if n == 27 {\n        return 10888869450418352160768000000\n    }\n\
    \    if n == 28 {\n        return 304888344611713860501504000000\n    }\n    if\
    \ n == 29 {\n        return 8841761993739701954543616000000\n    }\n    if n ==\
    \ 30 {\n        return 265252859812191058636308480000000\n    }\n    if n == 31\
    \ {\n        return 732674608005915474305286400000000\n    }\n    if n == 32 {\n\
    \        return 1140074077674292480344572800000000\n    }\n    if n == 33 {\n\
    \        return 23058430092136939501580998400000000\n    }\n    if n == 34 {\n\
    \        return 46116", "    result := 1\n    for i := 1; i <= n; i++ {\n    \
    \    result *= i\n    }\n    return result\n}\n", "    if n == 0 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n - 1)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
