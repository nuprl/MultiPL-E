language: go_test.go
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /=\
    \ 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n  \
    \  }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7aemokmx_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    switch decimal {\n\
    \    case 0:\n        result = \"0\"\n    case 1:\n        result = \"1\"\n  \
    \  default:\n        fmt.Println(\"Invalid input\")\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\n--- FAIL: TestDecimal_To_Binary\
    \ (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0 (0.00s)\n        tmpyd0o6e6r_test.go:48:\
    \ expected 'db0db', got '0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n\
    \        tmpyd0o6e6r_test.go:48: expected 'db100000db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpyd0o6e6r_test.go:48: expected\
    \ 'db1100111db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmpyd0o6e6r_test.go:48: expected 'db1111db', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    switch decimal {\n    case\
    \ 0:\n        result += \"0\"\n    case 1:\n        result += \"1\"\n    }\n \
    \   return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp3jq8t23y_test.go:49: expected 'db0db', got '0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp3jq8t23y_test.go:49:\
    \ expected 'db100000db', got '0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp3jq8t23y_test.go:49: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp3jq8t23y_test.go:49:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    i := 0\n    for i <\
    \ decimal {\n        if decimal%2 == 0 {\n            result += fmt.Sprintf(\"\
    0\", decimal%2)\n        } else {\n            result += fmt.Sprintf(\"1\", decimal%2)\n\
    \        }\n        decimal /= 2\n        i++\n    }\n    return result + \"db\"\
    \n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpt_kgnwj5_test.go:24:34: fmt.Sprintf call has arguments but no formatting
    directives

    /tmp/tmpt_kgnwj5_test.go:26:34: fmt.Sprintf call has arguments but no formatting
    directives

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n            binaryString\
    \ += \"1\"\n        } else {\n            binaryString += \"0\"\n        }\n \
    \       decimal = decimal / 2\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db100000db', got 'db1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db1100111db', got 'db00011'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db1111db', got 'db000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimalToBinary := make([]int, 10)\n\
    \    decimalToBinary[decimal%10] = 1\n    decimalToBinary[10] = decimal%10\n \
    \   for i := 0; i < len(decimalToBinary); i++ {\n        binaryString += fmt.Sprintf(\"\
    %c\", decimalToBinary[i])\n    }\n    return binaryString + \"db\"\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out\
    \ of range [10] with length 10\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(0x56397b?)\n\t/tmp/tmp1scf0588_test.go:22\
    \ +0x4c\ncommand-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmp1scf0588_test.go:36\
    \ +0x42\ntesting.tRunner(0xc000003d40, 0x527f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %c\", decimal)\n    }\n    decimal = decimal / 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    decimal = decimal / 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%c\", decimal)\n    }\n\
    \    decimal = decimal / 2\n    if decimal \nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5h2gllxg_test.go:102:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    \n    result := \"\"\n    \n    for i :=\
    \ 0; i < decimal; i++ {\n        if i%2 == 0 {\n            result += \"1\"\n\
    \        } else {\n            result += \"0\"\n        }\n    }\n    \n    if\
    \ decimal > 0 {\n        result += \"db\"\n    }\n    \n    return result\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp2ftv1iel_test.go:54: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp2ftv1iel_test.go:54: expected\
    \ 'db100000db', got '10101010101010101010101010101010db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp2ftv1iel_test.go:54: expected 'db1100111db', got '1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp2ftv1iel_test.go:54:\
    \ expected 'db1111db', got '101010101010101db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(fmt.Sprintf(\"\
    %d\", decimal)); i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"\
    %d\", decimal%2)\n            decimal /= 2\n        } else {\n            result\
    \ += fmt.Sprintf(\"%d\", decimal%2)\n            decimal *= 2\n        }\n   \
    \ }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpewhs_59y_test.go:50: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpewhs_59y_test.go:50:\
    \ expected 'db100000db', got '0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpewhs_59y_test.go:50: expected 'db1100111db', got '1db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpewhs_59y_test.go:50:\
    \ expected 'db1111db', got '1db'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %c\", 1)\n        }\n    }\n    return \"db\" + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfdkpgtd_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    for ; i < decimal; i++ {\n   \
    \     if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        } else {\n            result += fmt.Sprintf(\"%c\", decimal/2)\n    \
    \    }\n    }\n    if decimal > 0 {\n        result += \"db\"\n    }\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp2kcgs8h6_test.go:50: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp2kcgs8h6_test.go:50: expected\
    \ 'db100000db', got '\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp2kcgs8h6_test.go:50:\
    \ expected 'db1100111db', got '3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp2kcgs8h6_test.go:50:\
    \ expected 'db1111db', got '\a\a\a\a\a\a\a\a\a\a\a\a\a\a\adb'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   binary += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        binary\
    \ += \"0\"\n    }\n    return binary + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmps8xqk7w5_test.go:46: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmps8xqk7w5_test.go:46:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmps8xqk7w5_test.go:46: expected 'db1100111db', got '10db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmps8xqk7w5_test.go:46:\
    \ expected 'db1111db', got '10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    result += \"\
    db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db0db', got '1db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db100000db', got '1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db1100111db', got '01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db1111db', got '01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    binary := make([]byte, 32)\n    for i := 0;\
    \ i < 32; i++ {\n        binary[i] = byte(decimal % 2)\n        decimal = decimal\
    \ >> 1\n    }\n    result += \"db\"\n    for i := 0; i < len(binary); i++ {\n\
    \        result += string(binary[i])\n    }\n    result += \"db\"\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp_xt1q013_test.go:49: expected 'db0db', got 'db\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmp_xt1q013_test.go:49: expected 'db100000db', got 'db\0\0\0\
    \0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp_xt1q013_test.go:49: expected\
    \ 'db1100111db', got 'db\x01\x01\x01\0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmp_xt1q013_test.go:49: expected 'db1111db', got 'db\x01\x01\x01\x01\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   } else {\n        for i := 0; i < decimal; i++ {\n            result += \"\
    0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpu9tpp7wo_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpu9tpp7wo_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    return result + \"db\"\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcqeihlg2_test.go:22:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    if\
    \ decimal > 0 {\n        for i := 0; i < decimal; i++ {\n            result +=\
    \ \"1\"\n        }\n    } else {\n        for i := 0; i < decimal; i++ {\n   \
    \         result += \"0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp9axm74zl_test.go:50: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp9axm74zl_test.go:50: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmp9axm74zl_test.go:50: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp9axm74zl_test.go:50: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"\
    1\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpg4hjmctw_test.go:45: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpg4hjmctw_test.go:45:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpg4hjmctw_test.go:45: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpg4hjmctw_test.go:45:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(fmt.Sprintf(\"\
    %d\", decimal)); i++ {\n        if decimal >= 2 {\n            result += fmt.Sprintf(\"\
    %d\", decimal)\n            decimal -= 2\n        } else {\n            result\
    \ += fmt.Sprintf(\"0\", decimal)\n            decimal = 0\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpgzgtt9y4_test.go:26:34: fmt.Sprintf call has arguments but no formatting
    directives

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7s5bx8_9_test.go:21:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   binary += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        binary\
    \ += \"0\"\n    }\n    return binary + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmps8xqk7w5_test.go:46: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmps8xqk7w5_test.go:46:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmps8xqk7w5_test.go:46: expected 'db1100111db', got '10db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmps8xqk7w5_test.go:46:\
    \ expected 'db1111db', got '10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    binary := make([]byte, 32)\n    for i := 0;\
    \ i < len(binary); i++ {\n        binary[i] = byte(decimal % 2)\n        decimal\
    \ /= 2\n    }\n    result += \"db\" + string(binary)\n    return result\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpympdj67a_test.go:45: expected 'db0db', got 'db\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpympdj67a_test.go:45: expected 'db100000db', got 'db\0\0\0\
    \0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpympdj67a_test.go:45: expected 'db1100111db', got 'db\x01\
    \x01\x01\0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpympdj67a_test.go:45:\
    \ expected 'db1111db', got 'db\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        if decimal > 0 {\n            result += strconv.Itoa(decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += strconv.Itoa((decimal%2)+1)\n\
    \            decimal /= 2\n        }\n    }\n    return \"db\" + result + \"db\"\
    \n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkrb7rnd_test.go:21:25: undefined: strconv

    /tmp/tmpgkrb7rnd_test.go:23:23: undefined: strconv

    /tmp/tmpgkrb7rnd_test.go:26:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    default:\n        fmt.Println(\"\
    Invalid input\")\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\n--- FAIL: TestDecimal_To_Binary\
    \ (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0 (0.00s)\n        tmpk2fagyxg_test.go:47:\
    \ expected 'db0db', got '0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n\
    \        tmpk2fagyxg_test.go:47: expected 'db100000db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpk2fagyxg_test.go:47: expected\
    \ 'db1100111db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmpk2fagyxg_test.go:47: expected 'db1111db', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimal %= 2\n    if decimal > 0 {\n\
    \        binaryString += \"1\"\n        decimal--\n    }\n    for i := 0; i <\
    \ decimal; i++ {\n        binaryString += \"0\"\n    }\n    return binaryString\
    \ + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp94kfbvj5_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp94kfbvj5_test.go:47:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp94kfbvj5_test.go:47: expected 'db1100111db', got '1db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp94kfbvj5_test.go:47:\
    \ expected 'db1111db', got '1db'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 != 0 {\n        binary[i] = '0'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 19 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpkebb7t3d_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpkebb7t3d_test.go:42\
    \ +0x5cc\ntesting.tRunner(0xc000103380, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    result += \"\
    db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db0db', got '1db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db100000db', got '1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db1100111db', got '01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db1111db', got '01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Write your code here\n    result := \"\"\n    for i := 0; i\
    \ < decimal; i++ {\n        if decimal % 2 == 0 {\n            result += \"1\"\
    \n        } else {\n            result += \"0\"\n        }\n    }\n    return\
    \ \"db\" + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n\
    \  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpy0wvehdl_test.go:47: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpy0wvehdl_test.go:47:\
    \ expected 'db100000db', got 'db11111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpy0wvehdl_test.go:47: expected\
    \ 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpy0wvehdl_test.go:47:\
    \ expected 'db1111db', got 'db000000000000000db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    binaryString\
    \ += fmt.Sprintf(\"%0*d\", decimal, decimal)\n    binaryString += \"db\"\n   \
    \ return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmp5o89a_9q_test.go:42: expected 'db100000db', got 'db00000000000000000000000000000032db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp5o89a_9q_test.go:42:\
    \ expected 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp5o89a_9q_test.go:42:\
    \ expected 'db1111db', got 'db000000000000015db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    for i := 0; i < decimal; i++ {\n   \
    \     binaryString += \"0\"\n    }\n    for i := decimal - 1; i >= 0; i-- {\n\
    \        binaryString += \"1\"\n    }\n    return \"db\" + binaryString\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpunttpy3f_test.go:45: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpunttpy3f_test.go:45:\
    \ expected 'db100000db', got 'db0000000000000000000000000000000011111111111111111111111111111111'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpunttpy3f_test.go:45:\
    \ expected 'db1100111db', got 'db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpunttpy3f_test.go:45:\
    \ expected 'db1111db', got 'db000000000000000111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := decimal; i < 32; i++ {\n\
    \        result += \"1\"\n    }\n    result += \"db\"\n    return result\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db0db', got '11111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8bhzxf03_test.go:47:\
    \ expected 'db100000db', got '11111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp8bhzxf03_test.go:47: expected\
    \ 'db1100111db', got '01111111111111111111111111111111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db1111db', got '01111111111111111111111111111111db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n        decimal--\n    }\n    for i := 0; i < decimal; i++\
    \ {\n        result += \"0\"\n    }\n    result += \"db\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp_rzr9kxc_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp_rzr9kxc_test.go:48:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp_rzr9kxc_test.go:48: expected 'db1100111db', got '1db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp_rzr9kxc_test.go:48:\
    \ expected 'db1111db', got '1db'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    for ; decimal > 0; decimal = decimal\
    \ / 2 {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%c\"\
    , int(decimal))\n        } else {\n            result += fmt.Sprintf(\"%c\", int(decimal))\n\
    \            result += fmt.Sprintf(\"%c\", int(decimal))\n        }\n        i++\n\
    \    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpigltb594_test.go:50: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpigltb594_test.go:50:\
    \ expected 'db100000db', got ' \x10\b\x04\x02\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpigltb594_test.go:50: expected 'db1100111db', got 'gg33\x19\
    \x19\f\x06\x03\x03\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmpigltb594_test.go:50: expected 'db1111db', got '\x0F\x0F\a\
    \a\x03\x03\x01\x01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        i++\n        decimal = decimal / 2\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '0'\n        i++\n        decimal\
    \ = decimal / 2\n    }\n    binary[i] = 'b'\n    i++\n    return string(binary)\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpz41sp9ks_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpz41sp9ks_test.go:43\
    \ +0x5ec\ntesting.tRunner(0xc00011b1e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    j := 0\n    for ;\
    \ i < 32; i++ {\n        binary[i] = byte(decimal % 2)\n        decimal /= 2\n\
    \    }\n    for ; i < 32; i++ {\n        binary[i] = byte(decimal % 2)\n     \
    \   decimal /= 2\n    }\n    binary[j] = 'd'\n    binary[j+1] = 'b'\n    return\
    \ string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp4vv4wtg6_test.go:51: expected 'db0db', got 'db\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmp4vv4wtg6_test.go:51: expected 'db100000db', got 'db\0\0\0\
    \x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp4vv4wtg6_test.go:51: expected 'db1100111db', got 'db\x01\
    \0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp4vv4wtg6_test.go:51: expected\
    \ 'db1111db', got 'db\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    for i := 0; i < decimal; i++ {\n        if\
    \ decimal % 2 == 0 {\n            binary += \"1\"\n        } else {\n        \
    \    binary += \"0\"\n        }\n        decimal = decimal / 2\n    }\n    return\
    \ binary\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpiwa4shac_test.go:47: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpiwa4shac_test.go:47: expected\
    \ 'db100000db', got '1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpiwa4shac_test.go:47: expected 'db1100111db', got '00011'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpiwa4shac_test.go:47:\
    \ expected 'db1111db', got '000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimalToBinary := make([]int, 10)\n    decimalToBinary[0]\
    \ = 1\n    decimalToBinary[1] = 1\n    decimalToBinary[2] = 1\n    decimalToBinary[3]\
    \ = 1\n    decimalToBinary[4] = 1\n    decimalToBinary[5] = 1\n    decimalToBinary[6]\
    \ = 1\n    decimalToBinary[7] = 1\n    decimalToBinary[8] = 1\n    decimalToBinary[9]\
    \ = 1\n    decimalToBinary[10] = 1\n    decimalToBinary[11] = 1\n    decimalToBinary[12]\
    \ = 1\n    decimalToBinary[13] = 1\n    decimalToBinary[14] = 1\n    decimalToBinary[15]\
    \ = 1\n    decimalToBinary[16] = 1\n    decimalToBinary[17] = 1\n    decimalToBinary[18]\
    \ = 1\n    decimalToBinary[19] = 1\n    decimalToBinary[20] = 1\n    decimalToBinary[21]\
    \ = 1\n    decimalToBinary[22] = 1\n    decimalToBinary[23] = 1\n    decimalToBinary[24]\
    \ = 1\n    decimalToBinary[25] = 1\n    decimalToBinary[26] = 1\n    decimalToBinary[27]\
    \ = 1\n    decimalToBinary[28] = 1\n    decimalToBinary[29] = 1\n    decimalToBinary[30]\
    \ = 1\n    decimalToBinary[31] = 1\n    decimalToBinary[32] = 1\n    decimalToBinary[33]\
    \ = 1\n    decimalToBinary[34] = 1\n    decimalToBinary[35] = 1\n    decimalToBinary[36]\
    \ = 1\n    decimalToBinary[37] = 1\n    decimalToBinary[38] = 1\n    decimalToBinary[39]\
    \ = 1\n    decimalToBinary[40] = 1\n    decimalToBinary[41] = 1\n    decimalToBinary[42]\
    \ = 1\n    decimalToBinary[43] = 1\n    decimalToBinary[44] = 1\n    decimalToBinary[45]\
    \ = 1\n    decimalToBinary[46] = 1\n    decimalToBinary[47] = 1\n    decimalToBinary[48]\
    \ = 1\n    decimalToBinary[49] = 1\n    decimalToBinary[50] = 1\n    decimalToBinary[51]\
    \ = 1\n    decimalToBinary[52] = 1\n    decimalToBinary[53] = 1\n    decimalToBinary[54]\
    \ = 1\n    decimalToBinary[55] = 1\n    decimalToBinary[56] = 1\n    decimalToBinary[57]\
    \ = 1\n    decimalToBinary[58] = 1\n    decimalToBinary[59] = 1\n    decimalToBinary[60]\
    \ = 1\n    decimalToBinary[61] = 1\n    decimalToBinary[62] = 1\n    decimalToBinary\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmqqfmxx2_test.go:85:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if i%2 == 0 {\n            binaryString += \"\
    1\"\n        } else {\n            binaryString += \"0\"\n        }\n    }\n \
    \   return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpgfd1q_zy_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpgfd1q_zy_test.go:47:\
    \ expected 'db100000db', got 'db10101010101010101010101010101010'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpgfd1q_zy_test.go:47: expected\
    \ 'db1100111db', got 'db1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpgfd1q_zy_test.go:47:\
    \ expected 'db1111db', got 'db101010101010101'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    for i := 0; i < len(binary); i++\
    \ {\n        binary[i] = byte(decimal % 2)\n        decimal /= 2\n    }\n    return\
    \ string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpz_qn8k49_test.go:43: expected 'db0db', got '\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpz_qn8k49_test.go:43: expected 'db100000db', got '\0\0\0\0\
    \0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpz_qn8k49_test.go:43: expected 'db1100111db', got '\x01\x01\
    \x01\0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpz_qn8k49_test.go:43: expected\
    \ 'db1111db', got '\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   } else {\n        for i := 0; i < decimal; i++ {\n            result += \"\
    0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpu9tpp7wo_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpu9tpp7wo_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n            binaryString\
    \ += \"1\"\n        } else {\n            binaryString += \"0\"\n        }\n \
    \       decimal = decimal / 2\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db100000db', got 'db1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db1100111db', got 'db00011'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db1111db', got 'db000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        if decimal > 0 {\n            result += strconv.Itoa((decimal\
    \ % 2) + 1)\n        }\n        decimal /= 2\n    }\n    return \"db\" + result\
    \ + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpva1db0l3_test.go:21:25: undefined: strconv

    /tmp/tmpva1db0l3_test.go:23:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 1 {\n    \
    \    result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 2 {\n   \
    \     result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 3 {\n  \
    \      result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 4 {\n \
    \       result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 5 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 6 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 7 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 8 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 9 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 10 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 11 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 12 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 13 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 14 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 15 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 16 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 17 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 18 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 19 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 20 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 21 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 22 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 23 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 24 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 25 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 26 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 27 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 28 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 29 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnpwjc5o6_test.go:110:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(fmt.Sprintf(\"\
    %d\", decimal)); i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"\
    %d\", decimal%2)\n            decimal /= 2\n        } else {\n            result\
    \ += fmt.Sprintf(\"%d\", decimal%2)\n            decimal *= 2\n        }\n   \
    \ }\n    return \"db\" + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpdmtj6bh0_test.go:49: expected 'db100000db', got 'db0db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpdmtj6bh0_test.go:49:\
    \ expected 'db1100111db', got 'db1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmpdmtj6bh0_test.go:49: expected 'db1111db', got 'db1db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimalString := fmt.Sprintf(\"%d\"\
    , decimal)\n    for i := 0; i < len(decimalString); i++ {\n        if decimalString[i]\
    \ == '1' {\n            binaryString += \"1\"\n        } else {\n            binaryString\
    \ += \"0\"\n        }\n    }\n    return binaryString + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpzltlxwmu_test.go:47: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpzltlxwmu_test.go:47:\
    \ expected 'db100000db', got '00db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpzltlxwmu_test.go:47: expected 'db1100111db', got '100db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpzltlxwmu_test.go:47:\
    \ expected 'db1111db', got '10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimalString := fmt.Sprintf(\"%d\"\
    , decimal)\n    decimalLen := len(decimalString)\n    binaryLen := decimalLen\
    \ * 2\n    for i := 0; i < decimalLen; i++ {\n        binaryString += fmt.Sprintf(\"\
    %d\", decimalString[i*2] == '1')\n    }\n    binaryString += \"db\"\n    for i\
    \ := decimalLen - 1; i >= 0; i-- {\n        binaryString += fmt.Sprintf(\"%d\"\
    , decimalString[i*2+1] == '1')\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqsiuybyc_test.go:22:5: binaryLen declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    switch decimal {\n    case 0:\n    \
    \    binaryString = \"0\"\n    case 1:\n        binaryString = \"1\"\n    default:\n\
    \        binaryString = \"db\" + fmt.Sprintf(\"%0*d\", decimal, decimal)\n   \
    \ }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n\
    \  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpduidksgr_test.go:47: expected 'db0db', got '0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpduidksgr_test.go:47:\
    \ expected 'db100000db', got 'db00000000000000000000000000000032'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpduidksgr_test.go:47: expected\
    \ 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpduidksgr_test.go:47:\
    \ expected 'db1111db', got 'db000000000000015'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    if\
    \ decimal > 0 {\n        result += \"1\"\n    }\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpjd1c9syu_test.go:47: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpjd1c9syu_test.go:47: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpjd1c9syu_test.go:47: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpjd1c9syu_test.go:47: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    binary := \"\"\n    for i := 0; i < decimal;\
    \ i++ {\n        binary += \"0\"\n    }\n    for i := decimal; i > 0; i-- {\n\
    \        binary += \"1\"\n    }\n    result += \"db\" + binary + \"db\"\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp489jmex2_test.go:47: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp489jmex2_test.go:47:\
    \ expected 'db100000db', got 'db0000000000000000000000000000000011111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp489jmex2_test.go:47:\
    \ expected 'db1100111db', got 'db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp489jmex2_test.go:47:\
    \ expected 'db1111db', got 'db000000000000000111111111111111db'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    if\
    \ decimal > 0 {\n        result += \"1\"\n    }\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"db\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpkhiej8j1_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpkhiej8j1_test.go:48:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpkhiej8j1_test.go:48: expected 'db1100111db', got '10db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpkhiej8j1_test.go:48:\
    \ expected 'db1111db', got '10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    default:\n        result +=\
    \ \"0\"\n    }\n    for i := 0; i < decimal; i++ {\n        result += \"1\"\n\
    \    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpkirg9zc8_test.go:51: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpkirg9zc8_test.go:51:\
    \ expected 'db100000db', got '011111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpkirg9zc8_test.go:51: expected\
    \ 'db1100111db', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpkirg9zc8_test.go:51:\
    \ expected 'db1111db', got '0111111111111111db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '0'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmplh69y52t_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmplh69y52t_test.go:42\
    \ +0x5ec\ntesting.tRunner(0xc0000da340, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /=\
    \ 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n  \
    \  }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7aemokmx_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        binaryString += \"0\"\n    }\n    for i := decimal;\
    \ i > 0; i-- {\n        binaryString += \"1\"\n    }\n    return binaryString\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpszdmco2p_test.go:46: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpszdmco2p_test.go:46:\
    \ expected 'db100000db', got 'db0000000000000000000000000000000011111111111111111111111111111111'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpszdmco2p_test.go:46:\
    \ expected 'db1100111db', got 'db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpszdmco2p_test.go:46:\
    \ expected 'db1111db', got 'db000000000000000111111111111111'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    default:\n        result +=\
    \ \"0\"\n    }\n    result += \"db\"\n    for i := 0; i < decimal; i++ {\n   \
    \     result += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpm_xxrutf_test.go:51: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpm_xxrutf_test.go:51:\
    \ expected 'db100000db', got '0db00000000000000000000000000000000'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpm_xxrutf_test.go:51: expected\
    \ 'db1100111db', got '0db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpm_xxrutf_test.go:51:\
    \ expected 'db1111db', got '0db000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"1\"\n    }\n    for i := decimal;\
    \ i < 32; i++ {\n        result += \"0\"\n    }\n    result += \"db\"\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpbgrsmd4q_test.go:48: expected 'db0db', got '00000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpbgrsmd4q_test.go:48:\
    \ expected 'db100000db', got '00000000000000000000000000000000db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpbgrsmd4q_test.go:48: expected\
    \ 'db1100111db', got '10000000000000000000000000000000db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmpbgrsmd4q_test.go:48: expected 'db1111db', got '10000000000000000000000000000000db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n            binaryString\
    \ += \"1\"\n        } else {\n            binaryString += \"0\"\n        }\n \
    \       decimal = decimal / 2\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db100000db', got 'db1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db1100111db', got 'db00011'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db1111db', got 'db000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7s5bx8_9_test.go:21:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := decimal - 1; i >= 0; i--\
    \ {\n        result += \"1\"\n    }\n    return \"db\" + result + \"db\"\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpx0zwfn38_test.go:46: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpx0zwfn38_test.go:46:\
    \ expected 'db100000db', got 'dbdb'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpx0zwfn38_test.go:46: expected 'db1100111db', got 'db01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpx0zwfn38_test.go:46:\
    \ expected 'db1111db', got 'db01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := decimal; i < 32; i++ {\n\
    \        result += \"1\"\n    }\n    result += \"db\"\n    return result\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db0db', got '11111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8bhzxf03_test.go:47:\
    \ expected 'db100000db', got '11111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp8bhzxf03_test.go:47: expected\
    \ 'db1100111db', got '01111111111111111111111111111111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db1111db', got '01111111111111111111111111111111db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    i := 0\n    for i <\
    \ decimal {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"\
    %c\", 0)\n        } else {\n            result += fmt.Sprintf(\"%c\", 1)\n   \
    \     }\n        decimal = decimal / 2\n        i++\n    }\n    return result\
    \ + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpr8xtqiid_test.go:50: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpr8xtqiid_test.go:50:\
    \ expected 'db100000db', got '\0\0\0\0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpr8xtqiid_test.go:50: expected 'db1100111db', got '\x01\x01\
    \x01\0\0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n       \
    \ tmpr8xtqiid_test.go:50: expected 'db1111db', got '\x01\x01\x01db'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            binary += \"1\"\n            decimal\
    \ -= 1\n        } else {\n            binary += \"0\"\n        }\n    }\n    return\
    \ binary + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzwm3ffr_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(fmt.Sprintf(\"\
    %d\", decimal)); i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"\
    %d\", decimal%2)\n            decimal /= 2\n        } else {\n            result\
    \ += fmt.Sprintf(\"%d\", decimal%2)\n            decimal *= 2\n        }\n   \
    \ }\n    return \"db\" + result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp51gl6hdn_test.go:49: expected 'db0db', got 'db0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp51gl6hdn_test.go:49:\
    \ expected 'db100000db', got 'db0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp51gl6hdn_test.go:49: expected 'db1100111db', got 'db1'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp51gl6hdn_test.go:49:\
    \ expected 'db1111db', got 'db1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    for i := 0; i < len(binary); i++\
    \ {\n        binary[i] = byte(decimal % 2)\n        decimal /= 2\n    }\n    binary[0]\
    \ = 'b'\n    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpxdiattp9_test.go:44: expected 'db0db', got 'b\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpxdiattp9_test.go:44: expected 'db100000db', got 'b\0\0\0\
    \0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpxdiattp9_test.go:44: expected 'db1100111db', got 'b\x01\x01\
    \0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpxdiattp9_test.go:44: expected\
    \ 'db1111db', got 'b\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp_acdk6en_test.go:40: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp_acdk6en_test.go:40: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmp_acdk6en_test.go:40: expected 'db1100111db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp_acdk6en_test.go:40: expected\
    \ 'db1111db', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7s5bx8_9_test.go:21:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   binary += \"1\"\n    }\n    for decimal > 0 {\n        binary += \"0\"\n \
    \       decimal -= 1\n    }\n    return binary + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpktemma7q_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpktemma7q_test.go:47:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpktemma7q_test.go:47: expected 'db1100111db', got '10db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpktemma7q_test.go:47:\
    \ expected 'db1111db', got '10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %c\", decimal%2)\n            decimal *= 2\n        }\n    }\n    return \"db\"\
    \ + result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6t6m9l2d_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(fmt.Sprintf(\"\
    %d\", decimal)); i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"\
    %d\", decimal%2)\n            decimal /= 2\n        } else {\n            result\
    \ += \"0\"\n        }\n    }\n    result += \"db\"\n    return result\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuqlma3xp_test.go:49: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuqlma3xp_test.go:49:\
    \ expected 'db100000db', got '0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpuqlma3xp_test.go:49: expected 'db1100111db', got '1db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuqlma3xp_test.go:49:\
    \ expected 'db1111db', got '1db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    for {\n        if decimal < 2\
    \ {\n            break\n        }\n        decimal /= 2\n        result += fmt.Sprintf(\"\
    %c\", decimal%2)\n        i++\n    }\n    result += \"db\"\n    for i := 0; i\
    \ < i; i++ {\n        result += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp7tvtm57l_test.go:52: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp7tvtm57l_test.go:52:\
    \ expected 'db100000db', got '\0\0\0\0\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp7tvtm57l_test.go:52: expected 'db1100111db', got '\x01\x01\
    \0\0\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n   \
    \     tmp7tvtm57l_test.go:52: expected 'db1111db', got '\x01\x01\x01db'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    temp := decimal % 2\n    for i := 0; i < len(strconv.Itoa(decimal));\
    \ i++ {\n        if temp == 0 {\n            result += \"0\"\n        } else {\n\
    \            result += \"1\"\n        }\n        temp = temp / 2\n    }\n    return\
    \ \"db\" + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n\
    \  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ertrxbc_test.go:21:25: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    decimal /= 2\n    for i := 0; i <\
    \ decimal; i++ {\n        result += \"1\"\n    }\n    result += \"db\"\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp89f9s_x2_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp89f9s_x2_test.go:48:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp89f9s_x2_test.go:48: expected 'db1100111db', got '0db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp89f9s_x2_test.go:48:\
    \ expected 'db1111db', got '0db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := decimal; i < 32; i++ {\n\
    \        result += \"1\"\n    }\n    result += \"db\"\n    return result\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db0db', got '11111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8bhzxf03_test.go:47:\
    \ expected 'db100000db', got '11111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp8bhzxf03_test.go:47: expected\
    \ 'db1100111db', got '01111111111111111111111111111111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmp8bhzxf03_test.go:47: expected 'db1111db', got '01111111111111111111111111111111db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    binary := make([]byte, 32)\n    for i :=\
    \ 0; i < len(binary); i++ {\n        binary[i] = '0'\n    }\n    binary := append(binary,\
    \ 'b')\n    binary := append(binary, decimal)\n    binary := append(binary, 'b')\n\
    \    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n\
    \  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kpab9ao_test.go:24:12: no new variables on left side of :=

    /tmp/tmp2kpab9ao_test.go:25:12: no new variables on left side of :=

    /tmp/tmp2kpab9ao_test.go:25:30: cannot use decimal (variable of type int) as type
    byte in argument to append

    /tmp/tmp2kpab9ao_test.go:26:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    result += \"db\"\n    for i := 0; i < decimal;\
    \ i++ {\n        if i%2 == 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        } else {\n            result += fmt.Sprintf(\"%c\", decimal/2)\n    \
    \    }\n    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpye6_l0zq_test.go:48: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpye6_l0zq_test.go:48:\
    \ expected 'db100000db', got 'db\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\
    \0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10\0\x10db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpye6_l0zq_test.go:48: expected 'db1100111db', got 'db\x01\
    3\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x01\
    3\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x01\
    3\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x013\x01\
    3\x013\x013\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmpye6_l0zq_test.go:48: expected 'db1111db', got 'db\x01\a\x01\a\x01\a\
    \x01\a\x01\a\x01\a\x01\a\x01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%d\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %d\", decimal%2)\n            decimal *= 2\n        }\n    }\n    return \"db\"\
    \ + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn6bjoqhw_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n            binaryString\
    \ += \"1\"\n        } else {\n            binaryString += \"0\"\n        }\n \
    \       decimal /= 2\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp67x4bp0y_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp67x4bp0y_test.go:48:\
    \ expected 'db100000db', got 'db1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp67x4bp0y_test.go:48: expected 'db1100111db', got 'db00011'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp67x4bp0y_test.go:48:\
    \ expected 'db1111db', got 'db000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    default:\n        for i :=\
    \ 0; i < decimal; i++ {\n            result += \"0\"\n        }\n    }\n    result\
    \ += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmposrksybb_test.go:50: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmposrksybb_test.go:50:\
    \ expected 'db100000db', got '00000000000000000000000000000000db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmposrksybb_test.go:50: expected\
    \ 'db1100111db', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmposrksybb_test.go:50:\
    \ expected 'db1111db', got '000000000000000db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpggpok04y_test.go:47: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpggpok04y_test.go:47: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpggpok04y_test.go:47: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpggpok04y_test.go:47: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        }\n        decimal = decimal/2\n    }\n    return \"db\" + result + \"\
    db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9xru2cwr_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    decimal /= 2\n\
    \    for i := 0; i < decimal; i++ {\n        result += \"1\"\n    }\n    result\
    \ += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp5krg5kvo_test.go:49: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp5krg5kvo_test.go:49:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp5krg5kvo_test.go:49: expected 'db1100111db', got '0db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp5krg5kvo_test.go:49:\
    \ expected 'db1111db', got '0db'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %c\", decimal%2)\n            decimal *= 2\n        }\n    }\n    return \"db\"\
    \ + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkhu5g09_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /=\
    \ 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n  \
    \  }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result\
    \ += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n    if decimal > 0\
    \ {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\", decimal)\n    }\n\
    \    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"%d\"\
    , decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n        result += fmt.Sprintf(\"\
    %d\", decimal)\n    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7aemokmx_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if i%2 == 0 {\n            binaryString += \"\
    1\"\n        } else {\n            binaryString += \"0\"\n        }\n    }\n \
    \   return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpgfd1q_zy_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpgfd1q_zy_test.go:47:\
    \ expected 'db100000db', got 'db10101010101010101010101010101010'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpgfd1q_zy_test.go:47: expected\
    \ 'db1100111db', got 'db1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpgfd1q_zy_test.go:47:\
    \ expected 'db1111db', got 'db101010101010101'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   } else {\n        for i := 0; i < decimal; i++ {\n            result += \"\
    0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpu9tpp7wo_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpu9tpp7wo_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    i := 0\n    for {\n\
    \        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            break\n        }\n  \
    \      i++\n    }\n    result += \"db\"\n    for i := 0; i < i; i++ {\n      \
    \  result += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp32ndcs24_test.go:54: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp32ndcs24_test.go:54:\
    \ expected 'db100000db', got '\0\0\0\0\0\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp32ndcs24_test.go:54: expected 'db1100111db', got '\x01\x01\
    \x01\0\0\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmp32ndcs24_test.go:54: expected 'db1111db', got '\x01\x01\x01\x01db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    temp := decimal\n \
    \   for temp > 0 {\n        result += \"0\"\n        temp--\n    }\n    for temp\
    \ > 0 {\n        result += \"1\"\n        temp--\n    }\n    result += \"db\"\n\
    \    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpn9gtly_z_test.go:50: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpn9gtly_z_test.go:50:\
    \ expected 'db100000db', got '00000000000000000000000000000000db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpn9gtly_z_test.go:50: expected\
    \ 'db1100111db', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpn9gtly_z_test.go:50:\
    \ expected 'db1111db', got '000000000000000db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Write your code here\n    \n    \n    return \"\"\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmphiiaqfea_test.go:41: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmphiiaqfea_test.go:41: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmphiiaqfea_test.go:41: expected 'db1100111db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmphiiaqfea_test.go:41: expected\
    \ 'db1111db', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    for i := 0; i < decimal;\
    \ i++ {\n        if decimal % 2 == 0 {\n            result += \"1\"\n        }\
    \ else {\n            result += \"0\"\n        }\n    }\n    if decimal > 0 {\n\
    \        result += \"db\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp3jy257fq_test.go:50: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp3jy257fq_test.go:50: expected\
    \ 'db100000db', got '11111111111111111111111111111111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp3jy257fq_test.go:50: expected 'db1100111db', got '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp3jy257fq_test.go:50:\
    \ expected 'db1111db', got '000000000000000db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    temp := decimal\n    for temp > 0 {\n    \
    \    result += \"0\"\n        temp--\n    }\n    for temp > 0 {\n        result\
    \ += \"1\"\n        temp--\n    }\n    return \"db\" + result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8if39vh__test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8if39vh__test.go:48:\
    \ expected 'db100000db', got 'db00000000000000000000000000000000'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp8if39vh__test.go:48: expected\
    \ 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp8if39vh__test.go:48:\
    \ expected 'db1111db', got 'db000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    for i := 0; i < decimal; i++ {\n   \
    \     if decimal % 2 == 0 {\n            binaryString += \"1\"\n        } else\
    \ {\n            binaryString += \"0\"\n        }\n        decimal = decimal /\
    \ 2\n    }\n    return binaryString + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp4s5hqa8s_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp4s5hqa8s_test.go:47:\
    \ expected 'db100000db', got '1111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp4s5hqa8s_test.go:47: expected 'db1100111db', got '00011db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp4s5hqa8s_test.go:47:\
    \ expected 'db1111db', got '000db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   } else {\n        for i := 0; i < decimal; i++ {\n            result += \"\
    0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpu9tpp7wo_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpu9tpp7wo_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n        decimal /= 2\n    }\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuqw38je5_test.go:47: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuqw38je5_test.go:47: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpuqw38je5_test.go:47: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuqw38je5_test.go:47: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        binaryString += \"0\"\n    }\n    binaryString += \"1\"\n   \
    \ return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpap7wi9m0_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpap7wi9m0_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpap7wi9m0_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpap7wi9m0_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '0'\n        decimal /= 2\n        i++\n    }\n    for\
    \ decimal%2 == 1 {\n        binary[i] = '1'\n        decimal /= 2\n        i++\n\
    \    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpw5pigl5n_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpw5pigl5n_test.go:42\
    \ +0x5ec\ntesting.tRunner(0xc0000cc4e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '0'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '1'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpp9udcie4_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpp9udcie4_test.go:42\
    \ +0x5ec\ntesting.tRunner(0xc000103520, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"1\"\n    }\n    for i := decimal;\
    \ i < 32; i++ {\n        result += \"0\"\n    }\n    result += \"db\"\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpbgrsmd4q_test.go:48: expected 'db0db', got '00000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpbgrsmd4q_test.go:48:\
    \ expected 'db100000db', got '00000000000000000000000000000000db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpbgrsmd4q_test.go:48: expected\
    \ 'db1100111db', got '10000000000000000000000000000000db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmpbgrsmd4q_test.go:48: expected 'db1111db', got '10000000000000000000000000000000db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \            decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %c\", 1)\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1uq0vfww_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    binaryString\
    \ += fmt.Sprintf(\"%0*d\", decimal, decimal)\n    return binaryString\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpv6rh2lsr_test.go:41: expected 'db0db', got 'db0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpv6rh2lsr_test.go:41:\
    \ expected 'db100000db', got 'db00000000000000000000000000000032'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmpv6rh2lsr_test.go:41: expected\
    \ 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpv6rh2lsr_test.go:41:\
    \ expected 'db1111db', got 'db000000000000015'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    for ; decimal > 0; decimal = decimal\
    \ / 2 {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%c\"\
    , decimal)\n        } else {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        }\n        i++\n    }\n    result += \"db\"\n    for ; decimal > 0; decimal\
    \ = decimal / 2 {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"\
    %c\", decimal)\n        } else {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        }\n        i++\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpm0n8iyj9_test.go:57: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpm0n8iyj9_test.go:57:\
    \ expected 'db100000db', got ' \x10\b\x04\x02\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpm0n8iyj9_test.go:57: expected 'db1100111db', got '\x01\x01\
    \x01\f\x06\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmpm0n8iyj9_test.go:57: expected 'db1111db', got '\x01\x01\x01\x01db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    result += \"db\"\n    for i := 0; i < decimal;\
    \ i++ {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%d\"\
    , decimal%2)\n        } else {\n            result += fmt.Sprintf(\"%d\", decimal%2)\n\
    \            result += fmt.Sprintf(\"%d\", decimal%2)\n        }\n        decimal\
    \ /= 2\n    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmppf4qh2s6_test.go:50: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmppf4qh2s6_test.go:50:\
    \ expected 'db100000db', got 'db0000db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmppf4qh2s6_test.go:50: expected 'db1100111db', got 'db11111100db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmppf4qh2s6_test.go:50:\
    \ expected 'db1111db', got 'db111111db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimalToBinary := make([]byte, 32)\n\
    \    decimalToBinary[decimal%32] = '0'\n    decimalToBinary[decimal%32+1] = '1'\n\
    \    for i := 0; i < len(decimalToBinary); i++ {\n        binaryString += string(decimalToBinary[i])\n\
    \    }\n    return \"db\" + binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpatu9gbrc_test.go:45: expected 'db0db', got 'db01\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpatu9gbrc_test.go:45: expected 'db100000db', got 'db01\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpatu9gbrc_test.go:45: expected 'db1100111db', got 'db\0\0\
    \0\0\0\0\001\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmpatu9gbrc_test.go:45: expected 'db1111db', got 'db\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\001\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    result += \"\
    db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db0db', got '1db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db100000db', got '1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db1100111db', got '01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db1111db', got '01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    for i := 0; i < len(result);\
    \ i++ {\n        decimal /= 2\n        if decimal > 0 {\n            result +=\
    \ fmt.Sprintf(\"%c\", decimal)\n        }\n    }\n    return \"db\" + result +\
    \ \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpodyrhed9_test.go:49: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpodyrhed9_test.go:49:\
    \ expected 'db100000db', got 'dbdb'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpodyrhed9_test.go:49: expected 'db1100111db', got 'db\x01\
    db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpodyrhed9_test.go:49:\
    \ expected 'db1111db', got 'db\x01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    binary := make([]byte, decimal)\n    for\
    \ i := 0; i < decimal; i++ {\n        binary[i] = '0'\n    }\n    binary[decimal-1]\
    \ = '1'\n    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmp6w7ziint_test.go:24\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmp6w7ziint_test.go:35\
    \ +0x33\ntesting.tRunner(0xc000199040, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '0'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmplh69y52t_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmplh69y52t_test.go:42\
    \ +0x5ec\ntesting.tRunner(0xc0000da340, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    }\n    result += \"db\"\n\
    \    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp165x3512_test.go:46: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp165x3512_test.go:46:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp165x3512_test.go:46: expected 'db1100111db', got 'db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp165x3512_test.go:46:\
    \ expected 'db1111db', got 'db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < 8; i++ {\n        if decimal >= 2 {\n            binaryString += \"1\"\
    \n            decimal -= 2\n        } else {\n            binaryString += \"0\"\
    \n        }\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp9yg4lvrm_test.go:48: expected 'db0db', got 'db00000000'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp9yg4lvrm_test.go:48:\
    \ expected 'db100000db', got 'db11111111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp9yg4lvrm_test.go:48: expected 'db1100111db', got 'db11111111'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp9yg4lvrm_test.go:48:\
    \ expected 'db1111db', got 'db11111110'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    for i := decimal; i > 0; i-- {\n\
    \        result += \"1\"\n    }\n    return \"db\" + result + \"db\"\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpvuerd3zo_test.go:46: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpvuerd3zo_test.go:46:\
    \ expected 'db100000db', got 'dbdb'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpvuerd3zo_test.go:46: expected 'db1100111db', got 'db01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpvuerd3zo_test.go:46:\
    \ expected 'db1111db', got 'db01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074390
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result\
    \ += \"0\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpopc6z5a3_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpopc6z5a3_test.go:46: expected 'db1100111db', got '10'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpopc6z5a3_test.go:46: expected\
    \ 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   }\n    decimal /= 2\n    if decimal > 0 {\n        for i := 0; i < decimal;\
    \ i++ {\n            result += \"0\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpzpcq0iai_test.go:51: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpzpcq0iai_test.go:51: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpzpcq0iai_test.go:51: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpzpcq0iai_test.go:51: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074390
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal);\
    \ i++ {\n        if decimal > 0 {\n            binary += \"1\"\n            decimal\
    \ -= 1\n        } else {\n            binary += \"0\"\n        }\n    }\n    return\
    \ binary + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzzwm3ffr_test.go:21:25: invalid argument: decimal (variable of type int)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    binary := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        binary += \"0\"\n    }\n    binary += \"\
    1\"\n    return binary\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp7a45t57l_test.go:45: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp7a45t57l_test.go:45:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp7a45t57l_test.go:45: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp7a45t57l_test.go:45:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    while(decimal != 0) {\n      \
    \  result += \"0\"\n        decimal = decimal / 2\n        i++\n    }\n    for\
    \ i := len(result) - 2; i >= 0; i-- {\n        if result[i] == \"1\" {\n     \
    \       result = \"0\" + result\n        } else {\n            result = \"1\"\
    \ + result\n        }\n    }\n    return \"db\" + result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5el65o48_test.go:21:25: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    switch decimal {\n    case 0:\n    \
    \    binaryString = \"0\"\n    case 1:\n        binaryString = \"1\"\n    }\n\
    \    return binaryString + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp_9s2knmp_test.go:45: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp_9s2knmp_test.go:45:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp_9s2knmp_test.go:45: expected 'db1100111db', got 'db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp_9s2knmp_test.go:45:\
    \ expected 'db1111db', got 'db'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%c\", decimal)\n    }\n    for i := 0; i < len(result);\
    \ i++ {\n        decimal /= 2\n        if decimal > 0 {\n            result +=\
    \ fmt.Sprintf(\"%c\", decimal)\n        }\n    }\n    return \"db\" + result +\
    \ \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpodyrhed9_test.go:49: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpodyrhed9_test.go:49:\
    \ expected 'db100000db', got 'dbdb'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpodyrhed9_test.go:49: expected 'db1100111db', got 'db\x01\
    db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpodyrhed9_test.go:49:\
    \ expected 'db1111db', got 'db\x01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 1 {\n    \
    \    result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 2 {\n   \
    \     result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 3 {\n  \
    \      result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 4 {\n \
    \       result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 5 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 6 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 7 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 8 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 9 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 10 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 11 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 12 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 13 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 14 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 15 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 16 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 17 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 18 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 19 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 20 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 21 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 22 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 23 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 24 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 25 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 26 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 27 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 28 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\n    }\n    if decimal > 29 {\n\
    \        result += fmt.Sprintf(\"%d\", decimal)\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnpwjc5o6_test.go:110:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"\
    1\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpg4hjmctw_test.go:45: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpg4hjmctw_test.go:45:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpg4hjmctw_test.go:45: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpg4hjmctw_test.go:45:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    for i :=\
    \ 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n            binaryString\
    \ += \"1\"\n        } else {\n            binaryString += \"0\"\n        }\n \
    \       decimal = decimal / 2\n    }\n    return binaryString\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db100000db', got 'db1111'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpuhhngrth_test.go:48: expected 'db1100111db', got 'db00011'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpuhhngrth_test.go:48:\
    \ expected 'db1111db', got 'db000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    switch decimal {\n\
    \    case 0:\n        result = \"0\"\n    case 1:\n        result = \"1\"\n  \
    \  default:\n        fmt.Println(\"Invalid input\")\n    }\n    return result\
    \ + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\nInvalid input\nInvalid input\n--- FAIL: TestDecimal_To_Binary\
    \ (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0 (0.00s)\n        tmp4guxj2kg_test.go:48:\
    \ expected 'db0db', got '0db'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmp4guxj2kg_test.go:48: expected 'db100000db', got 'db'\n \
    \   --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp4guxj2kg_test.go:48:\
    \ expected 'db1100111db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmp4guxj2kg_test.go:48: expected 'db1111db', got 'db'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        i++\n        decimal = decimal / 2\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '0'\n        i++\n        decimal\
    \ = decimal / 2\n    }\n    binary[i] = 'b'\n    i++\n    return string(binary)\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpz41sp9ks_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpz41sp9ks_test.go:43\
    \ +0x5ec\ntesting.tRunner(0xc00011b1e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    return result + \"db\"\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcqeihlg2_test.go:22:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal == 0 {\n\
    \        binary[i] = '0'\n        i++\n        decimal = decimal >> 1\n    }\n\
    \    for decimal == 1 {\n        binary[i] = '1'\n        i++\n        decimal\
    \ = decimal >> 1\n    }\n    binary[i] = 'b'\n    return string(binary)\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmpho80yqb3_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmpho80yqb3_test.go:42\
    \ +0x56c\ntesting.tRunner(0xc0000cc4e0, 0x528f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"\
    1\"\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp3xexb5l7_test.go:46: expected 'db0db', got '1db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp3xexb5l7_test.go:46:\
    \ expected 'db100000db', got '1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp3xexb5l7_test.go:46: expected 'db1100111db', got '01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp3xexb5l7_test.go:46:\
    \ expected 'db1111db', got '01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074391
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    temp := decimal\n    for temp > 0 {\n    \
    \    result += \"0\"\n        temp--\n    }\n    for temp > 0 {\n        result\
    \ += \"1\"\n        temp--\n    }\n    return \"db\" + result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8if39vh__test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8if39vh__test.go:48:\
    \ expected 'db100000db', got 'db00000000000000000000000000000000'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp8if39vh__test.go:48: expected\
    \ 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp8if39vh__test.go:48:\
    \ expected 'db1111db', got 'db000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal % 2 == 0 {\n\
    \        result += \"1\"\n    } else {\n        result += \"0\"\n    }\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpxhi37q0u_test.go:48: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpxhi37q0u_test.go:48:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpxhi37q0u_test.go:48: expected 'db1100111db', got '10'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpxhi37q0u_test.go:48:\
    \ expected 'db1111db', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    temp := decimal\n \
    \   for i := 0; i < 32; i++ {\n        if temp > 0 {\n            result += \"\
    1\"\n            temp--\n        } else {\n            result += \"0\"\n     \
    \   }\n    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp0scnso02_test.go:50: expected 'db0db', got '00000000000000000000000000000000db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp0scnso02_test.go:50:\
    \ expected 'db100000db', got '11111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp0scnso02_test.go:50: expected\
    \ 'db1100111db', got '11111111111111111111111111111111db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3\
    \ (0.00s)\n        tmp0scnso02_test.go:50: expected 'db1111db', got '11111111111111100000000000000000db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   for i := 0; i < decimal; i++ {\n            result += \"1\"\n        }\n \
    \   } else {\n        for i := 0; i < decimal; i++ {\n            result += \"\
    0\"\n        }\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpu9tpp7wo_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpu9tpp7wo_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpu9tpp7wo_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyphcuo4j_test.go:22:19: undefined: binary_to_decimal

    /tmp/tmpyphcuo4j_test.go:26:19: undefined: binary_to_decimal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '0'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '1'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'db'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ayz3l2y_test.go:31:17: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    i := 0\n    for ; decimal > 0; decimal = decimal/2\
    \ {\n        if decimal % 2 == 0 {\n            result += fmt.Sprintf(\"%c\",\
    \ decimal)\n        } else {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n\
    \        }\n        i++\n    }\n    return result + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp2d4limun_test.go:48: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp2d4limun_test.go:48:\
    \ expected 'db100000db', got ' \x10\b\x04\x02\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp2d4limun_test.go:48: expected 'db1100111db', got '\x01\x01\
    \x01\f\x06\x01\x01db'\n    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n\
    \        tmp2d4limun_test.go:48: expected 'db1111db', got '\x01\x01\x01\x01db'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    binaryString += \"db\"\n    binaryString\
    \ += fmt.Sprintf(\"%0*d\", decimal, decimal)\n    binaryString += \"db\"\n   \
    \ return binaryString\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmp5o89a_9q_test.go:42: expected 'db100000db', got 'db00000000000000000000000000000032db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp5o89a_9q_test.go:42:\
    \ expected 'db1100111db', got 'db0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp5o89a_9q_test.go:42:\
    \ expected 'db1111db', got 'db000000000000015db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    switch decimal {\n    case 0:\n        result\
    \ = \"0\"\n    case 1:\n        result = \"1\"\n    default:\n        result +=\
    \ \"0\"\n        for i := 0; i < decimal; i++ {\n            result += \"1\"\n\
    \        }\n    }\n    result += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp0rc_if7m_test.go:51: expected 'db0db', got '0db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp0rc_if7m_test.go:51:\
    \ expected 'db100000db', got '011111111111111111111111111111111db'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__2 (0.00s)\n        tmp0rc_if7m_test.go:51: expected\
    \ 'db1100111db', got '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp0rc_if7m_test.go:51:\
    \ expected 'db1111db', got '0111111111111111db'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimalString := fmt.Sprintf(\"%d\"\
    , decimal)\n    decimalLength := len(decimalString)\n    binaryLength := decimalLength\
    \ / 2\n    for i := 0; i < binaryLength; i++ {\n        binaryString += \"0\"\n\
    \    }\n    for i := decimalLength - 1; i >= 0; i-- {\n        binaryString +=\
    \ decimalString[i]\n    }\n    return binaryString + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwpws5zs_test.go:27:9: invalid operation: binaryString += decimalString[i]
    (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074391
- exit_code: 2
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    decimalToBinary(decimal, binary)\n\
    \    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n\
    \  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsi8e6o_j_test.go:20:5: undefined: decimalToBinary

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    switch decimal {\n    case\
    \ 0:\n        result += \"0\"\n    case 1:\n        result += \"1\"\n    }\n \
    \   return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp3jq8t23y_test.go:49: expected 'db0db', got '0'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp3jq8t23y_test.go:49:\
    \ expected 'db100000db', got '0'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp3jq8t23y_test.go:49: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp3jq8t23y_test.go:49:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    if decimal > 0 {\n    \
    \    result += \"1\"\n    }\n    return result\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpeocrmak2_test.go:46: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpeocrmak2_test.go:46: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpeocrmak2_test.go:46: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"1\"\n    }\n    for i := decimal - 1; i >= 0; i--\
    \ {\n        result += \"0\"\n    }\n    return \"db\" + result + \"db\"\n}\n\n\
    func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpqiyjfszn_test.go:46: expected 'db0db', got 'dbdb'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpqiyjfszn_test.go:46:\
    \ expected 'db100000db', got 'dbdb'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpqiyjfszn_test.go:46: expected 'db1100111db', got 'db10db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpqiyjfszn_test.go:46:\
    \ expected 'db1111db', got 'db10db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    binary := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        decimal--\n        binary = \"1\"\n    }\n    for i := 0; i <\
    \ decimal; i++ {\n        binary += \"0\"\n    }\n    result += binary\n    return\
    \ result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpojljyaew_test.go:49: expected 'db0db', got ''\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpojljyaew_test.go:49: expected\
    \ 'db100000db', got ''\n    --- FAIL: TestDecimal_To_Binary/test_num__2 (0.00s)\n\
    \        tmpojljyaew_test.go:49: expected 'db1100111db', got '1'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpojljyaew_test.go:49: expected\
    \ 'db1111db', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binaryString := \"\"\n    decimal %= 2\n    if decimal > 0 {\n\
    \        binaryString += \"1\"\n        decimal -= 1\n    }\n    for i := 0; i\
    \ < decimal; i++ {\n        binaryString += \"0\"\n    }\n    return binaryString\
    \ + \"db\"\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp8xah9gqh_test.go:47: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp8xah9gqh_test.go:47:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp8xah9gqh_test.go:47: expected 'db1100111db', got '1db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp8xah9gqh_test.go:47:\
    \ expected 'db1111db', got '1db'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    result += \"\
    db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db0db', got '1db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db100000db', got '1db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpnbbo4poz_test.go:45: expected 'db1100111db', got '01db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpnbbo4poz_test.go:45:\
    \ expected 'db1111db', got '01db'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    // Your code here\n    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    decimal /= 2\n\
    \    for i := 0; i < decimal; i++ {\n        result += \"1\"\n    }\n    result\
    \ += \"db\"\n    return result\n}\n\nfunc TestDecimal_To_Binary(t *testing.T)\
    \ {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\"\
    \ },\n     { actual: candidate(103), expected: \"db1100111db\" },\n     { actual:\
    \ candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp5krg5kvo_test.go:49: expected 'db0db', got 'db'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp5krg5kvo_test.go:49:\
    \ expected 'db100000db', got 'db'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp5krg5kvo_test.go:49: expected 'db1100111db', got '0db'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp5krg5kvo_test.go:49:\
    \ expected 'db1111db', got '0db'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '1'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 != 0 {\n        binary[i] = '0'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    return string(binary)\n}\n\nfunc TestDecimal_To_Binary(t\
    \ *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(0), expected: \"db0db\" },\n     { actual: candidate(32),\
    \ expected: \"db100000db\" },\n     { actual: candidate(103), expected: \"db1100111db\"\
    \ },\n     { actual: candidate(15), expected: \"db1111db\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\npanic: runtime error: index out\
    \ of range [32] with length 32 [recovered]\n\tpanic: runtime error: index out\
    \ of range [32] with length 32\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512640,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512640, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.decimal_to_binary(...)\n\t/tmp/tmp8d6om2m9_test.go:22\n\
    command-line-arguments_test.TestDecimal_To_Binary(0x0?)\n\t/tmp/tmp8d6om2m9_test.go:41\
    \ +0x533\ntesting.tRunner(0xc0000da340, 0x527f88)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n\
    \    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n \
    \   decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnkc5b_ds_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    for i := 0; i < len(binary); i++\
    \ {\n        binary[i] = byte(decimal % 2)\n        decimal /= 2\n    }\n    binary[0]\
    \ = 'b'\n    binary[len(binary)-1] = 'b'\n    return string(binary)\n}\n\nfunc\
    \ TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmpsoo0cqvr_test.go:45: expected 'db0db', got 'b\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0b'\n    --- FAIL: TestDecimal_To_Binary/test_num__1\
    \ (0.00s)\n        tmpsoo0cqvr_test.go:45: expected 'db100000db', got 'b\0\0\0\
    \0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0b'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmpsoo0cqvr_test.go:45: expected 'db1100111db', got 'b\x01\x01\
    \0\0\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0b'\n    --- FAIL:\
    \ TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmpsoo0cqvr_test.go:45: expected\
    \ 'db1111db', got 'b\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0b'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074391
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    for i := 0; i < decimal;\
    \ i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n    return result\n\
    }\n\nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDecimal_To_Binary (0.00s)\n    --- FAIL: TestDecimal_To_Binary/test_num__0\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db0db', got '1'\n    ---\
    \ FAIL: TestDecimal_To_Binary/test_num__1 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db100000db', got '1'\n    --- FAIL: TestDecimal_To_Binary/test_num__2\
    \ (0.00s)\n        tmp82rsg2ko_test.go:44: expected 'db1100111db', got '01'\n\
    \    --- FAIL: TestDecimal_To_Binary/test_num__3 (0.00s)\n        tmp82rsg2ko_test.go:44:\
    \ expected 'db1111db', got '01'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0\
    \ {\n        binary[i] = '0'\n        decimal = decimal / 2\n        i++\n   \
    \ }\n    for decimal%2 == 1 {\n        binary[i] = '1'\n        decimal = decimal\
    \ / 2\n        i++\n    }\n    binary[i] = 'db'\n    return string(binary)\n}\n\
    \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n  \
    \   { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
    \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ayz3l2y_test.go:31:17: illegal rune literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074390
- exit_code: 1
  program: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You will be given a number in decimal form and your task is to convert\
    \ it to\n// binary format. The function should return a string, with each character\
    \ representing a binary\n// number. Each character in the string will be '0' or\
    \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n// The extra characters are there to help with the\
    \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>>\
    \ decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int)\
    \ string {\n    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n     \
    \   result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= \nfunc TestDecimal_To_Binary(t *testing.T) {\n  candidate\
    \ := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"db0db\" },\n     { actual: candidate(32), expected: \"db100000db\" },\n  \
    \   { actual: candidate(103), expected: \"db1100111db\" },\n     { actual: candidate(15),\
    \ expected: \"db1111db\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpem5vjt3e_test.go:117:6: expected ''('', found TestDecimal_To_Binary

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074381
