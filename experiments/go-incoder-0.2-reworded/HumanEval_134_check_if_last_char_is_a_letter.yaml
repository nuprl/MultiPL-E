name: HumanEval_134_check_if_last_char_is_a_letter
language: go_test.go
prompt: "package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n\
  \    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n\
  // of a given string is an alphabetical character and is not\n// a part of a word,\
  \ and false otherwise.\n// Note: \"word\" is a group of characters separated by\
  \ space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n//\
  \ false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>>\
  \ check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\
  \")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n"
tests: "func TestCheck_If_Last_Char_Is_A_Letter(t *testing.T) {\n  candidate := check_if_last_char_is_a_letter\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"apple\"), expected: false },\n\
  \     { actual: candidate(\"apple pi e\"), expected: true },\n     { actual: candidate(\"\
  eeeee\"), expected: false },\n     { actual: candidate(\"A\"), expected: true },\n\
  \     { actual: candidate(\"Pumpkin pie \"), expected: false },\n     { actual:\
  \ candidate(\"Pumpkin pie 1\"), expected: false },\n     { actual: candidate(\"\"\
  ), expected: false },\n     { actual: candidate(\"eeeee e \"), expected: false },\n\
  \     { actual: candidate(\"apple pie\"), expected: false },\n     { actual: candidate(\"\
  apple pi e \"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(txt) == 0 {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '_' {\n        return false\n    }\n    if txt[len(txt)-1] == ' ' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '.' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '_' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '.' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1] == '-' {\n        return false\n    }\n    if txt[len(txt)-1]\
    \ == '-' {\n        return false\n    }\n    if txt[len(txt)-1] == '-' {\n   \
    \     return false\n    }\n    if txt[len(txt)-1] == '-' {\n        return false\n\
    \    }\n    if txt[len(txt)-1]", "    if len(txt) == 0 {\n        return false\n\
    \    }\n    last := txt[len(txt)-1]\n    if last == ' ' || last == '.' || last\
    \ == '-' || last == '_' {\n        return false\n    }\n    if last >= 'a' &&\
    \ last <= 'z' {\n        return true\n    }\n    return false\n}\n", "    if len(txt)\
    \ <= 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n    if\
    \ lastChar >= 'a' && lastChar <= 'z' {\n        return false\n    }\n    if lastChar\
    \ >= 'A' && lastChar <= 'Z' {\n        return false\n    }\n    return true\n\
    }\n", "    if len(txt) == 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last == ' ' || last == '.' || last == '-' || last == '_' || last == '/'\
    \ || last == '\\\\' || last == '?' || last == '!' || last == '@' || last == '#'\
    \ || last == '$' || last == '%' || last == '^' || last == '&' || last == '*' ||\
    \ last == '(' || last == ')' || last == '-' || last == '_' || last == '+' || last\
    \ == '=' || last == '|' || last == '}' || last == '{' || last == '[' || last ==\
    \ ']' || last == '<' || last == '>' || last == '?' || last == '/' || last == '\\\
    \\' || last == '|' || last == ';' || last == '\"' || last == '\\'' || last ==\
    \ '<' || last == '>' || last == '?' || last == '/' || last == '\\\\' || last ==\
    \ '|' || last == ';' || last == '\"' || last == '\\'' || last == '<' || last ==\
    \ '>' || last == '?' || last == '/' || last == '\\\\' || last == '|' || last ==\
    \ ';' || last == '\"' || last == '\\'' || last == '<' || last == '>' || last ==\
    \ '?' || last == '/' || last == '\\\\' || last == '|' || last == ';' || last ==\
    \ '\"' || last == '\\'' || last == '<' || last == '>' || last == '?' || last ==\
    \ '/' || last == '\\\\' || last == '|' || last == ';' || last == '\"' || last\
    \ == '\\'' || last == '<' || last == '>' || last == '?' || last == '/' || last\
    \ == '\\\\' || last == '|' || last == ';' || last == '\"' || last == '\\'' ||\
    \ last == '<' || last == '>' || last == '?' || last == '/' || last == '\\\\' ||\
    \ last == '|' || last == ';' || last == '\"' || last == '\\'' || last == '<' ||\
    \ last == '>' || last == '?' || last == '/' || last == '\\\\' || last == '|' ||\
    \ last == ';' || last == '\"' || last == '\\'' || last == '<' || last == '>' ||\
    \ last == '?' || last == '/' || last == '\\\\' || last == '|' || last == ';' ||\
    \ last == '\"' || last == '\\'' || last == '<' || last == '>' || last == '?' ||\
    \ last == '/' || last == '\\\\' || last == '|' || last == ';' || last == '\"'\
    \ || last == '\\'' || last == '<' || last == '>' || last == '?' || last == '/'\
    \ || last == '\\\\' || last == '|' || last == ';' || ", "    if len(txt) <= 0\
    \ {\n        return false\n    }\n    last := txt[len(txt)-1]\n    if last ==\
    \ ' ' || last == '.' || last == '-' || last == '_' || last == '/' {\n        return\
    \ false\n    }\n    if last >= 'a' && last <= 'z' {\n        return true\n   \
    \ }\n    return false\n}\n", "    if len(txt) == 0 {\n        return false\n \
    \   }\n    last := txt[len(txt)-1]\n    if last == ' ' || last == '.' || last\
    \ == '-' || last == '_' || last == '/' {\n        return false\n    }\n    if\
    \ last >= 'a' && last <= 'z' || last >= 'A' && last <= 'Z' {\n        return true\n\
    \    }\n    return false\n}\n", "    if len(txt) <= 0 {\n        return false\n\
    \    }\n    lastChar := txt[len(txt)-1]\n    if lastChar != ' ' && lastChar !=\
    \ '-' && lastChar != '_' {\n        return true\n    }\n    return false\n}\n",
  "    if len(txt) < 1 {\n        return false\n    }\n    txt := txt[:len(txt)-1]\n\
    \    lastChar := txt[len(txt)-1]\n    if lastChar >= 'a' && lastChar <= 'z' {\n\
    \        return false\n    }\n    if lastChar >= 'A' && lastChar <= 'Z' {\n  \
    \      return false\n    }\n    return true\n}\n", "    if len(txt) <= 0 {\n \
    \       return false\n    }\n    last := txt[len(txt)-1]\n    if last == ' ' ||\
    \ last == '.' || last == '-' || last == '_' || last == '/' {\n        return false\n\
    \    }\n    if last >= 'a' && last <= 'z' {\n        return false\n    }\n   \
    \ if last >= 'A' && last <= 'Z' {\n        return false\n    }\n    return true\n\
    }\n", "    if len(txt) <= 0 {\n        return false\n    }\n    txt := txt[:len(txt)-1]\n\
    \    txt := strings.ToLower(txt)\n    for _, letter := range strings.Split(txt,\
    \ \" \") {\n        if letter == txt[len(txt)-1] {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if len(txt) <= 0 {\n        return\
    \ false\n    }\n    last := txt[len(txt)-1]\n    if last == ' ' || last == '.'\
    \ || last == '-' || last == '_' || last == '/' || last == '\\\\' || last == '!'\
    \ || last == '?' || last == ';' || last == ':' || last == '<' || last == '>' ||\
    \ last == '?' || last == '@' || last == '&' || last == '%' || last == '$' || last\
    \ == '#' || last == '*' || last == '^' || last == '(' || last == ')' || last ==\
    \ '|' || last == '+' {\n        return false\n    }\n    if last >= 'a' && last\
    \ <= 'z' || last >= 'A' && last <= 'Z' {\n        return true\n    }\n    return\
    \ false\n}\n", "    if len(txt) <= 0 {\n        return false\n    }\n    last\
    \ := txt[len(txt)-1]\n    if last == ' ' || last == '.' || last == '-' || last\
    \ == '_' || last == '/' || last == '\\\\' || last == '!' || last == '?' || last\
    \ == ';' || last == ':' || last == '<' || last == '>' || last == '?' || last ==\
    \ '@' || last == '#' || last == '$' || last == '%' || last == '^' || last == '&'\
    \ || last == '*' || last == '(' || last == ')' || last == '-' || last == '_' ||\
    \ last == '+' || last == '=' || last == '|' || last == '}' || last == '{' || last\
    \ == '[' || last == ']' || last == '\\\\' || last == '^' || last == '~' || last\
    \ == '`' || last == '\"' || last == ';' || last == '\"' || last == '<' || last\
    \ == '>' || last == '?' || last == '@' || last == '#' || last == '$' || last ==\
    \ '%' || last == '^' || last == '&' || last == '*' || last == '(' || last == ')'\
    \ || last == '-' || last == '_' || last == '+' || last == '=' || last == '|' ||\
    \ last == '}' || last == '{' || last == '[' || last == ']' || last == '\\\\' ||\
    \ last == '^' || last == '~' || last == '`' || last == '\"' || last == ';' ||\
    \ last == '\"' || last == '<' || last == '>' || last == '?' || last == '@' ||\
    \ last == '#' || last == '$' || last == '%' || last == '^' || last == '&' || last\
    \ == '*' || last == '(' || last == ')' || last == '-' || last == '_' || last ==\
    \ '+' || last == '=' || last == '|' || last == '}' || last == '{' || last == '['\
    \ || last == ']' || last == '\\\\' || last == '^' || last == '~' || last == '`'\
    \ || last == '\"' || last == ';' || last == '\"' || last == '<' || last == '>'\
    \ || last == '?' || last == '@' || last == '#' || last == '$' || last == '%' ||\
    \ last == '^' || last == '&' || last == '*' || last == '(' || last == ')' || last\
    \ == '-' || last == '_' || last == '+' || last == '=' || last == '|' || last ==\
    \ '}' || last == '{' || last == '[' || last == ']' || last == '\\\\' || last ==\
    \ '^' || last == '~' || last == '`' || last == '\"' || last == ';' || last ==\
    \ '\"' || last == '<' || ", "    if len(txt) < 1 {\n        return false\n   \
    \ }\n    txt := txt[:len(txt)-1]\n    lastChar := txt[len(txt)-1]\n    if lastChar\
    \ >= 'a' && lastChar <= 'z' {\n        return true\n    }\n    if lastChar >=\
    \ 'A' && lastChar <= 'Z' {\n        return true\n    }\n    return false\n}\n",
  "    if len(txt) <= 0 {\n        return false\n    }\n    last := txt[len(txt)-1]\n\
    \    if last == ' ' || last == '.' || last == '-' || last == '_' || last == '/'\
    \ || last == '\\\\' || last == '!' || last == '?' || last == ';' || last == ':'\
    \ || last == '<' || last == '>' || last == '?' || last == '@' || last == '&' ||\
    \ last == '%' || last == '^' || last == '*' || last == '(' || last == ')' || last\
    \ == '[' || last == ']' || last == '{' || last == '}' || last == '|' || last ==\
    \ '~' || last == '`' || last == '\"' || last == '$' || last == '#' || last ==\
    \ '@' || last == '$' || last == '%' || last == '^' || last == '&' || last == '*'\
    \ || last == '+' || last == '-' || last == '=' || last == '|' || last == '>' ||\
    \ last == '<' || last == '?' || last == '!' || last == '.' || last == '/' || last\
    \ == '\\\\' || last == '(' || last == ')' || last == '[' || last == ']' || last\
    \ == '{' || last == '}' || last == '|' || last == '~' || last == '`' || last ==\
    \ '\"' || last == '$' || last == '#' || last == '@' || last == '$' || last ==\
    \ '%' || last == '^' || last == '&' || last == '*' || last == '+' || last == '-'\
    \ || last == '=' || last == '|' || last == '>' || last == '<' || last == '?' ||\
    \ last == '!' || last == '.' || last == '/' || last == '\\\\' || last == '(' ||\
    \ last == ')' || last == '[' || last == ']' || last == '{' || last == '}' || last\
    \ == '|' || last == '~' || last == '`' || last == '\"' || last == '$' || last\
    \ == '#' || last == '@' || last == '$' || last == '%' || last == '^' || last ==\
    \ '&' || last == '*' || last == '+' || last == '-' || last == '=' || last == '|'\
    \ || last == '>' || last == '<' || last == '?' || last == '!' || last == '.' ||\
    \ last == '/' || last == '\\\\' || last == '(' || last == ')' || last == '[' ||\
    \ last == ']' || last == '{' || last == '}' || last == '|' || last == '~' || last\
    \ == '`' || last == '\"' || last == '$' || last == '#' || last == '@' || last\
    \ == '$' || last == '%' || last == '^' || last == '&' || last == '*' || ", " \
    \   if len(txt) <= 0 {\n        return false\n    }\n    lastChar := txt[len(txt)-1]\n\
    \    if lastChar >= 'a' && lastChar <= 'z' {\n        return false\n    }\n  \
    \  if lastChar >= 'A' && lastChar <= 'Z' {\n        return false\n    }\n    return\
    \ true\n}\n", "    if len(txt) < 1 {\n        return false\n    }\n    last :=\
    \ txt[len(txt)-1]\n    if last == ' ' || last == '.' || last == '-' || last ==\
    \ '_' || last == '/' || last == '\\\\' || last == '!' || last == '?' || last ==\
    \ ';' || last == ':' || last == '<' || last == '>' || last == '?' || last == '@'\
    \ || last == '#' || last == '$' || last == '%' || last == '^' || last == '&' ||\
    \ last == '*' || last == '(' || last == ')' || last == '-' || last == '_' || last\
    \ == '+' || last == '=' || last == '|' || last == '}' || last == '{' || last ==\
    \ '[' || last == ']' || last == '\\\\' || last == '|' || last == ';' || last ==\
    \ ':' || last == '\"' || last == '\\'' || last == '\"' || last == '<' || last\
    \ == '>' || last == '?' || last == '@' || last == '#' || last == '$' || last ==\
    \ '%' || last == '^' || last == '&' || last == '*' || last == '(' || last == ')'\
    \ || last == '-' || last == '_' || last == '+' || last == '=' || last == '|' ||\
    \ last == '}' || last == '{' || last == '[' || last == ']' || last == '\\\\' ||\
    \ last == '|' || last == ';' || last == ':' || last == '\"' || last == '\\'' ||\
    \ last == '\"' || last == '<' || last == '>' || last == '?' || last == '@' ||\
    \ last == '#' || last == '$' || last == '%' || last == '^' || last == '&' || last\
    \ == '*' || last == '(' || last == ')' || last == '-' || last == '_' || last ==\
    \ '+' || last == '=' || last == '|' || last == '}' || last == '{' || last == '['\
    \ || last == ']' || last == '\\\\' || last == '|' || last == ';' || last == ':'\
    \ || last == '\"' || last == '\\'' || last == '\"' || last == '<' || last == '>'\
    \ || last == '?' || last == '@' || last == '#' || last == '$' || last == '%' ||\
    \ last == '^' || last == '&' || last == '*' || last == '(' || last == ')' || last\
    \ == '-' || last == '_' || last == '+' || last == '=' || last == '|' || last ==\
    \ '}' || last == '{' || last == '[' || last == ']' || last == '\\\\' || last ==\
    \ '|' || last == ';' || last == ':' || last == '\"' || last == '\\'' || last ==\
    \ '\"' || last == '<' || ", "    if len(txt) <= 0 {\n        return false\n  \
    \  }\n    txt := txt[:len(txt)-1]\n    txt := strings.ToLower(txt)\n    txt :=\
    \ strings.TrimSpace(txt)\n    txt := strings.ToUpper(txt)\n    txt := strings.Split(txt,\
    \ \" \")\n    for _, word := range txt {\n        if word == \"\" {\n        \
    \    continue\n        }\n        if word[len(word)-1] == txt[len(txt)-1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    if len(txt)\
    \ < 2 {\n        return false\n    }\n    last := txt[len(txt)-1]\n    letters\
    \ := []rune(\"abcdefghijklmnopqrstuvwxyz\")\n    for _, letter := range letters\
    \ {\n        if letter == last {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(txt) == 0 {\n        return false\n    }\n\
    \    lastChar := txt[len(txt)-1]\n    if lastChar != ' ' && lastChar != '-' &&\
    \ lastChar != '_' {\n        return true\n    }\n    return false\n}\n", "   \
    \ if len(txt) == 0 {\n        return false\n    }\n    txt := txt[:len(txt)-1]\n\
    \    txt := strings.ToLower(txt)\n    for _, char := range txt {\n        if char\
    \ == ' ' || char == '-' || char == '_' || char == '.' || char == '_' || char ==\
    \ '-' || char == '_' || char == '.' || char == '_' || char == '-' || char == '_'\
    \ || char == '.' || char == '_' || char == '-' || char == '_' || char == '.' ||\
    \ char == '_' || char == '-' || char == '_' || char == '.' || char == '_' || char\
    \ == '-' || char == '_' || char == '.' || char == '_' || char == '-' || char ==\
    \ '_' || char == '.' || char == '_' || char == '-' || char == '_' || char == '.'\
    \ || char == '_' || char == '-' || char == '_' || char == '.' || char == '_' ||\
    \ char == '-' || char == '_' || char == '.' || char == '_' || char == '-' || char\
    \ == '_' || char == '.' || char == '_' || char == '-' || char == '_' || char ==\
    \ '.' || char == '_' || char == '-' || char == '_' || char == '.' || char == '_'\
    \ || char == '-' || char == '_' || char == '.' || char == '_' || char == '-' ||\
    \ char == '_' || char == '.' || char == '_' || char == '-' || char == '_' || char\
    \ == '.' || char == '_' || char == '-' || char == '_' || char == '.' || char ==\
    \ '_' || char == '-' || char == '_' || char == '.' || char == '_' || char == '-'\
    \ || char == '_' || char == '.' || char == '_' || char == '-' || char == '_' ||\
    \ char == '.' || char == '_' || char == '-' || char == '_' || char == '.' || char\
    \ == '_' || char == '-' || char == '_' || char == '.' || char == '_' || char ==\
    \ '-' || char == '_' || char == '.' || char == '_' || char == '-' || char == '_'\
    \ || char == '.' || char == '_' || char == '-' || char == '_' || char == '.' ||\
    \ char == '_' || char == '-' || char == '_' || char == '.' || char == '_' || char\
    \ == '-' || char == '_' || char == '.' || char == '_' || char == '-' || char ==\
    \ '_' || char == '.' || char == '_' || char == '-' || char == '_' || char == '.'\
    \ || char == '_' || char == '-' || char"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
