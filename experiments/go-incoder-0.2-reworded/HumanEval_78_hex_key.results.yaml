language: go_test.go
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    count := 0\n    i := 0\n    for i < n {\n        digit := int(num[i])\n\
    \        if digit < 'A' || digit > 'F' {\n            fmt.Println(\"Invalid input\"\
    )\n            return -1\n        }\n        i += 1 // move to next digit\n  \
    \  }\n    for i := 2; i < n; i += 1 {\n        if num[i] == 'A' || num[i] == 'B'\
    \ || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F' {\n    \
    \        count += 1 // count the primes\n        }\n    }\n    return count\n\
    }\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for me. Thank you very much!\n<|/ c |>\n<| c |>\nYou're welcome! I'm\
    \ glad it helped you. :)\n<|/ c |>\n<| a tags=go |>\nI wrote a function that counts\
    \ the number of primes up to a certain number N. \n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdzdphefo_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    count := 0\n    for i := 0; i < n; i++ {\n        digit :=\
    \ int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n      \
    \  }\n        if digit == 0 {\n            continue\n        }\n        count\
    \ += digit\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpt1pa_0w3_test.go:63: expected '%!s(int=1)', got '%!s(int=111)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=226)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpt1pa_0w3_test.go:63: expected '%!s(int=4)', got '%!s(int=404)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=156)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpt1pa_0w3_test.go:63: expected '%!s(int=6)', got '%!s(int=770)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=12)', got '%!s(int=1540)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, c := range num {\n     \
    \   if c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmiyg4_b__test.go:30:9: no new variables on left side of :=

    /tmp/tmpmiyg4_b__test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    result := 0\n    i := 0\n    for ; i < len(num);\
    \ i++ {\n        digit := num[i]\n        if digit == \"A\" || digit == \"B\"\
    \ || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\" {\n\
    \            continue\n        }\n        result += 1\n    }\n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxqfcz9sc_test.go:30:9: no new variables on left side of :=

    /tmp/tmpxqfcz9sc_test.go:30:12: undefined: strings

    /tmp/tmpxqfcz9sc_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpxqfcz9sc_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpxqfcz9sc_test.go:35:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpxqfcz9sc_test.go:35:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpxqfcz9sc_test.go:35:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpxqfcz9sc_test.go:35:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    \n    count := 0\n    \n    for _, c := range num\
    \ {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n\
    \    \n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpprm3q06t_test.go:30:9: no new variables on left side of :=

    /tmp/tmpprm3q06t_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime[0] = 1\n    prime[1] = 2\n    prime[2] = 2\n    prime[3] = 4\n    prime[4]\
    \ = 6\n    prime[5] = 8\n    prime[6] = 10\n    prime[7] = 12\n    prime[8] =\
    \ 14\n    prime[9] = 16\n    prime[10] = 18\n    prime[11] = 20\n    prime[12]\
    \ = 22\n    prime[13] = 24\n    prime[14] = 26\n    prime[15] = 28\n    prime[16]\
    \ = 30\n    prime[17] = 32\n    prime[18] = 34\n    prime[19] = 36\n    prime[20]\
    \ = 38\n    prime[21] = 40\n    prime[22] = 42\n    prime[23] = 44\n    prime[24]\
    \ = 46\n    prime[25] = 48\n    prime[26] = 50\n    prime[27] = 52\n    prime[28]\
    \ = 54\n    prime[29] = 56\n    prime[30] = 58\n    prime[31] = 60\n    prime[32]\
    \ = 62\n    prime[33] = 64\n    prime[34] = 66\n    prime[35] = 68\n    prime[36]\
    \ = 70\n    prime[37] = 72\n    prime[38] = 74\n    prime[39] = 76\n    prime[40]\
    \ = 78\n    prime[41] = 80\n    prime[42] = 82\n    prime[43] = 84\n    prime[44]\
    \ = 86\n    prime[45] = 88\n    prime[46] = 90\n    prime[47] = 92\n    prime[48]\
    \ = 94\n    prime[49] = 96\n    prime[50] = 98\n    prime[51] = 100\n    prime[52]\
    \ = 102\n    prime[53] = 104\n    prime[54] = 106\n    prime[55] = 108\n    prime[56]\
    \ = 110\n    prime[57] = 112\n    prime[58] = 114\n    prime[59] = 116\n    prime[60]\
    \ = 118\n    prime[61] = 120\n    prime[62] = 122\n    prime[63] = 124\n    prime[64]\
    \ = 126\n    prime[65] = 128\n    prime[66] = 130\n    prime[67] = 132\n    prime[68]\
    \ = 134\n    prime[69] = 136\n    prime[70] = 138\n    prime[71] = 140\n    prime[72]\
    \ = 142\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27cixyeq_test.go:107:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, v := range num {\n        if v == 'A' || v == 'B' || v == 'C'\
    \ || v == 'D' || v == 'E' || v == 'F' {\n            continue\n        }\n   \
    \     count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpz8ofaiyi_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpz8ofaiyi_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=207)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpz8ofaiyi_test.go:58: expected '%!s(int=4)', got '%!s(int=151)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpz8ofaiyi_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=196)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpz8ofaiyi_test.go:58: expected '%!s(int=6)', got '%!s(int=525)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpz8ofaiyi_test.go:58:\
    \ expected '%!s(int=12)', got '%!s(int=1050)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, c := range num {\n     \
    \   if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp44qev7nj_test.go:30:9: no new variables on left side of :=

    /tmp/tmp44qev7nj_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r) - 'a')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8oyde4w_test.go:32:18: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    \n    for i\
    \ := 0; i < n; i++ {\n        digit := num[i]\n        \n        if digit == 'A'\
    \ || digit == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit ==\
    \ 'F' {\n            continue\n        }\n        \n        result += 1\n    }\n\
    \    \n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9f5u7h6a_test.go:30:9: no new variables on left side of :=

    /tmp/tmp9f5u7h6a_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := 0\n    i := 0\n   \
    \ for ; i < n; i++ {\n        digit := int(num[i])\n        if digit == 0 {\n\
    \            continue\n        }\n        prime += digit\n        if prime > 1\
    \ {\n            break\n        }\n    }\n    return prime\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx455sd79_test.go:30:9: no new variables on left side of :=

    /tmp/tmpx455sd79_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    primesCount := 0\n    primesCount\
    \ += primes[primesCount]\n    for _, digit := range hexDigits {\n        primesCount\
    \ += primes[primesCount%len(primes)]\n        if num == digit+digit+digit {\n\
    \            primesCount += primes[primesCount%len(primes)]\n        }\n    }\n\
    \    return primesCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj7u66h65_test.go:30:9: no new variables on left side of :=

    /tmp/tmpj7u66h65_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    prime := make([]int, n)\n    prime[0] = 2\n    prime[1] = 3\n\
    \    prime[2] = 5\n    prime[3] = 7\n    prime[4] = 11\n    prime[5] = 13\n  \
    \  prime[6] = 17\n    prime[7] = 19\n    prime[8] = 23\n    prime[9] = 29\n  \
    \  prime[10] = 31\n    prime[11] = 31\n    prime[12] = 31\n    prime[13] = 31\n\
    \    prime[14] = 31\n    prime[15] = 31\n    prime[16] = 31\n    prime[17] = 31\n\
    \    prime[18] = 31\n    prime[19] = 31\n    prime[20] = 31\n    prime[21] = 31\n\
    \    prime[22] = 31\n    prime[23] = 31\n    prime[24] = 31\n    prime[25] = 31\n\
    \    prime[26] = 31\n    prime[27] = 31\n    prime[28] = 31\n    prime[29] = 31\n\
    \    prime[30] = 31\n    prime[31] = 31\n    prime[32] = 31\n    prime[33] = 31\n\
    \    prime[34] = 31\n    prime[35] = 31\n    prime[36] = 31\n    prime[37] = 31\n\
    \    prime[38] = 31\n    prime[39] = 31\n    prime[40] = 31\n    prime[41] = 31\n\
    \    prime[42] = 31\n    prime[43] = 31\n    prime[44] = 31\n    prime[45] = 31\n\
    \    prime[46] = 31\n    prime[47] = 31\n    prime[48] = 31\n    prime[49] = 31\n\
    \    prime[50] = 31\n    prime[51] = 31\n    prime[52] = 31\n    prime[53] = 31\n\
    \    prime[54] = 31\n    prime[55] = 31\n    prime[56] = 31\n    prime[57] = 31\n\
    \    prime[58] = 31\n    prime[59] = 31\n    prime[60] = 31\n    prime[61] = 31\n\
    \    prime[62] = 31\n    prime[63] = 31\n    prime[64] = 31\n    prime[65] = 31\n\
    \    prime[66] = 31\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn113atsk_test.go:100:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        if v == '0' {\n            continue\n\
    \        }\n        count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkd5rqpch_test.go:30:9: no new variables on left side of :=

    /tmp/tmpkd5rqpch_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"21\", -1)\n    num := strings.Replace(num, \".\", \"22\", -1)\n   \
    \ num := strings.Replace(num, \"/\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"24\", -1)\n    num := strings.Replace(num, \"%\", \"25\", -1)\n   \
    \ num := strings.Replace(num, \"*\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"(\", \"27\", -1)\n    num := strings.Replace(num, \"!\", \"28\", -1)\n   \
    \ num := strings.Replace(num, \"[\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"]\", \"30\", -1)\n    num := strings.Replace(num, \"{\", \"31\", -1)\n   \
    \ num := strings.Replace(num, \"}\", \"32\", -1)\n    num := strings.Replace(num,\
    \ \"<\", \"33\", -1)\n    num := strings.Replace(num, \">\", \"34\", -1)\n   \
    \ num := strings.Replace(num, \"?\", \"35\", -1)\n    num := strings.Replace(num,\
    \ \"@\", \"36\", -1)\n    num := strings.Replace(num, \"#\", \"37\", -1)\n   \
    \ num := strings.Replace(num, \"$\", \"38\", -1)\n    num := strings.Replace(num,\
    \ \"%\", \"39\", -1)\n    num := strings.Replace(num, \"^\", \"40\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"41\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"42\", -1)\n    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprrjoeg2i_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int\n    \n    for _, v := range num {\n        switch {\n        case\
    \ v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F':\n    \
    \        count++\n        default:\n            fmt.Println(\"invalid input\"\
    )\n        }\n    }\n    \n    return count\n}\n</code>\n<|/ a tags=go,primes\
    \ |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    math\"\n)\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfx2i7gls_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    hexDigits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    i := 0\n    result := 0\n \
    \   for i < n {\n        digit := int(num[i])\n        if digit < 0 || digit >\
    \ 9 {\n            fmt.Println(\"Invalid input\")\n            return 0\n    \
    \    }\n        if primes[digit] == 1 {\n            result += primes[digit]\n\
    \        }\n        i += 2\n    }\n    return result\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=go,algorithm |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math/big\"\n    \"strconv\"\n)\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdm4iyt4x_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int\n    for _, r := range num {\n        count += int(unicode.ToLower(r)\
    \ - '0')\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0f6wrmz_test.go:32:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \"/\", \"*\", -1)\n    num := strings.Replace(num, \"*\", \"/\", -1)\n    num\
    \ := strings.Replace(num, \"=\", \"==\", -1)\n    num := strings.Replace(num,\
    \ \"<\", \"<=\", -1)\n    num := strings.Replace(num, \">\", \">=\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"!=\", -1)\n    num := strings.Replace(num,\
    \ \"(\", \"(\", -1)\n    num := strings.Replace(num, \"[\", \"[\", -1)\n    num\
    \ := strings.Replace(num, \")\", \")\", -1)\n    num := strings.Replace(num, \"\
    {\", \"{\", -1)\n    num := strings.Replace(num, \"}\", \"}\", -1)\n    num :=\
    \ strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num, \"-\"\
    , \".\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"\
    3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num \nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppacsjt7o_test.go:72:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074576
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    result := 0\n    i := 0\n    for ; i < n; i++ {\n        digit\
    \ := int(num[i])\n        if digit < 'A' || digit > 'F' {\n            break\n\
    \        }\n        result ^= (digit - 'A')\n    }\n    return result\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmp2ggh6h2z_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmp2ggh6h2z_test.go:61: expected\
    \ '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n\
    \        tmp2ggh6h2z_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmp2ggh6h2z_test.go:61: expected\
    \ '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n\
    \        tmp2ggh6h2z_test.go:61: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    i := 0\n    for ; i < len(num);\
    \ i++ {\n        digit, err := strconv.ParseInt(num[i:i+1], 16, 0)\n        if\
    \ err != nil {\n            return count\n        }\n        if digit == 0 {\n\
    \            return count\n        }\n        if digit % 2 == 0 {\n          \
    \  count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8b7g0u7_test.go:30:9: no new variables on left side of :=

    /tmp/tmpg8b7g0u7_test.go:30:12: undefined: strings

    /tmp/tmpg8b7g0u7_test.go:34:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvg5r3xar_test.go:285:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n = n + 1\n        }\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    count := 0\n    i := 0\n   \
    \ for ; i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" || digit\
    \ == \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"\
    F\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlhpphap_test.go:30:9: no new variables on left side of :=

    /tmp/tmpdlhpphap_test.go:30:12: undefined: strings

    /tmp/tmpdlhpphap_test.go:36:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpdlhpphap_test.go:36:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpdlhpphap_test.go:36:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpdlhpphap_test.go:36:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpdlhpphap_test.go:36:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpdlhpphap_test.go:36:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"10\", -1)\n    num := strings.Replace(num, \"1\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"2\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"13\", -1)\n    num := strings.Replace(num, \"4\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"5\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"16\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"18\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"19\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"\
    .\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\"\
    , \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"\
    6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num :=\
    \ strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"9\"\
    , \"9\", -1)\n    num := strings.Replace(num, \"-\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"0\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num, \"\
    0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num :=\
    \ strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\"\
    , \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk4h9dzva_test.go:71:31: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    i := 0\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    \n    for ;\
    \ i < n; i++ {\n        d := int(num[i])\n        if d == 0 {\n            continue\n\
    \        }\n        \n        for _, p := range primes {\n            if d ==\
    \ p {\n                return i\n            }\n        }\n    }\n    \n    return\
    \ -1\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpgbyfgn05_test.go:68: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpgbyfgn05_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpgbyfgn05_test.go:68: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpgbyfgn05_test.go:68:\
    \ expected '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpgbyfgn05_test.go:68: expected '%!s(int=6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpgbyfgn05_test.go:68:\
    \ expected '%!s(int=12)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime[0] = 2\n    prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n    prime[4]\
    \ = 11\n    prime[5] = 13\n    prime[6] = 17\n    prime[7] = 19\n    prime[8]\
    \ = 23\n    prime[9] = 29\n    prime[10] = 31\n    prime[11] = 31\n    prime[12]\
    \ = 37\n    prime[13] = 41\n    prime[14] = 43\n    prime[15] = 47\n    prime[16]\
    \ = 53\n    prime[17] = 59\n    prime[18] = 61\n    prime[19] = 67\n    prime[20]\
    \ = 71\n    prime[21] = 73\n    prime[22] = 79\n    prime[23] = 83\n    prime[24]\
    \ = 89\n    prime[25] = 97\n    prime[26] = 101\n    prime[27] = 103\n    prime[28]\
    \ = 107\n    prime[29] = 109\n    prime[30] = 112\n    prime[31] = 116\n    prime[32]\
    \ = 120\n    prime[33] = 123\n    prime[34] = 127\n    prime[35] = 131\n    prime[36]\
    \ = 137\n    prime[37] = 139\n    prime[38] = 147\n    prime[39] = 151\n    prime[40]\
    \ = 157\n    prime[41] = 163\n    prime[42] = 169\n    prime[43] = 177\n    prime[44]\
    \ = 183\n    prime[45] = 191\n    prime[46] = 197\n    prime[47] = 203\n    prime[48]\
    \ = 209\n    prime[49] = 217\n    prime[50] = 225\n    prime[51] = 239\n    prime[52]\
    \ = 241\n    prime[53] = 247\n    prime[54] = 253\n    prime[55] = 259\n    prime[56]\
    \ = 265\n    prime[57] = 269\n    prime[58] = 271\n    prime[59] = 277\n    prime[60]\
    \ = 283\n    prime[61] = 289\n    prime[62] = 291\n    prime[63] = 297\n    prime[64]\
    \ = 303\n    prime[65] = 309\n    prime[66] = 315\n    prime[67] = 319\n    prime[68]\
    \ = 323\n    prime[69] = 329\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgjr8hms9_test.go:104:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    num := strings.ToUpper(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"10\", -1)\n    num := strings.Replace(num, \"1\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"2\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"13\", -1)\n    num := strings.Replace(num, \"4\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"5\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"16\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"18\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"19\", -1)\n    num := strings.Replace(num, \"+\", \"20\", -1)\n   \
    \ num := strings.Replace(num, \"-\", \"21\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"22\", -1)\n    num := strings.Replace(num, \"/\", \"23\", -1)\n   \
    \ num := strings.Replace(num, \"=\", \"24\", -1)\n    num := strings.Replace(num,\
    \ \"_\", \"25\", -1)\n    num := strings.Replace(num, \"(\", \"26\", -1)\n   \
    \ num := strings.Replace(num, \"[\", \"27\", -1)\n    num := strings.Replace(num,\
    \ \")\", \"28\", -1)\n    num := strings.Replace(num, \"}\", \"29\", -1)\n   \
    \ num := strings.Replace(num, \"{\", \"30\", -1)\n    num := strings.Replace(num,\
    \ \"<\", \"31\", -1)\n    num := strings.Replace(num, \"=\", \"32\", -1)\n   \
    \ num := strings.Replace(num, \"?\", \"33\", -1)\n    num := strings.Replace(num,\
    \ \"!\", \"34\", -1)\n    num := strings.Replace(num, \"@\", \"35\", -1)\n   \
    \ num := strings.Replace(num, \"$\", \"36\", -1)\n    num := strings.Replace(num,\
    \ \"%\", \"37\", -1)\n    num := strings.Replace(num, \"^\", \"38\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"39\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"40\", -1)\n    num := strings.Replace(num, \"(\", \"41\", -1)\n   \
    \ num := strings.Replace(num, \")\", \"\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7x2k8su__test.go:70:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n = n + 1\n        }\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i]) -\
    \ '0'\n    }\n    for ; i < len(num); i++ {\n        n += int(num[i]) - 'A' +\
    \ 10\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpoposr_ma_test.go:59: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpoposr_ma_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpoposr_ma_test.go:59: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpoposr_ma_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpoposr_ma_test.go:59: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpoposr_ma_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n = n + 1\n        }\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(string(r))\n    }\n    if\
    \ n%2 == 0 {\n        return n\n    }\n    for i := 3; i <= n; i += 2 {\n    \
    \    if n%i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qxuoree_test.go:32:18: cannot convert string(r) (value of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r) - 'a')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8oyde4w_test.go:32:18: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    count := 0\n    for _, v := range num {\n        if v ==\
    \ 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n        \
    \    continue\n        }\n        if v == '0' {\n            continue\n      \
    \  }\n        count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpz4_6dnhk_test.go:62: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpz4_6dnhk_test.go:62: expected\
    \ '%!s(int=2)', got '%!s(int=159)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpz4_6dnhk_test.go:62: expected '%!s(int=4)', got '%!s(int=151)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpz4_6dnhk_test.go:62:\
    \ expected '%!s(int=2)', got '%!s(int=100)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpz4_6dnhk_test.go:62: expected '%!s(int=6)', got '%!s(int=477)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpz4_6dnhk_test.go:62:\
    \ expected '%!s(int=12)', got '%!s(int=954)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    base := \"0123456789ABCDEF\"\n    for _, r := range num {\n      \
    \  if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            n = 10\n        } else {\n            n = n*16 + base[r]\n      \
    \  }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp81cus0ea_test.go:36:17: invalid operation: n * 16 + base[r] (mismatched
    types int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"1\", \"2\", -1)\n    num := strings.Replace(num, \"\
    2\", \"3\", -1)\n    num := strings.Replace(num, \"3\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"4\", \"5\", -1)\n    num := strings.Replace(num, \"5\"\
    , \"6\", -1)\n    num := strings.Replace(num, \"6\", \"7\", -1)\n    num := strings.Replace(num,\
    \ \"7\", \"8\", -1)\n    num := strings.Replace(num, \"8\", \"9\", -1)\n    num\
    \ := strings.Replace(num, \"9\", \"10\", -1)\n    num := strings.Replace(num,\
    \ \"10\", \"11\", -1)\n    num := strings.Replace(num, \"11\", \"12\", -1)\n \
    \   num := strings.Replace(num, \"12\", \"13\", -1)\n    num := strings.Replace(num,\
    \ \"13\", \"14\", -1)\n    num := strings.Replace(num, \"14\", \"15\", -1)\n \
    \   num := strings.Replace(num, \"15\", \"16\", -1)\n    num := strings.Replace(num,\
    \ \"16\", \"17\", -1)\n    num := strings.Replace(num, \"17\", \"18\", -1)\n \
    \   num := strings.Replace(num, \"18\", \"19\", -1)\n    num := strings.Replace(num,\
    \ \"19\", \"20\", -1)\n    num := strings.Replace(num, \"20\", \"21\", -1)\n \
    \   num := strings.Replace(num, \"21\", \"22\", -1)\n    num := strings.Replace(num,\
    \ \"22\", \"23\", -1)\n    num := strings.Replace(num, \"23\", \"24\", -1)\n \
    \   num := strings.Replace(num, \"24\", \"25\", -1)\n    num := strings.Replace(num,\
    \ \"25\", \"26\", -1)\n    num := strings.Replace(num, \"26\", \"27\", -1)\n \
    \   num := strings.Replace(num, \"27\", \"28\", -1)\n    num := strings.Replace(num,\
    \ \"28\", \"29\", -1)\n    num := strings.Replace(num, \"29\", \"30\", -1)\n \
    \   num := strings.Replace(num, \"30\", \"31\", -1)\n    num := strings.Replace(num,\
    \ \"31\", \"32\", -1)\n    num := strings.Replace(num, \"32\", \"33\", -1)\n \
    \   num := \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7dojhkus_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"+\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"/\", -1)\n    num := strings.Replace(num, \"\
    =\", \"+\", -1)\n    num := strings.Replace(num, \"(\", \"*\", -1)\n    num :=\
    \ strings.Replace(num, \"[\", \"*\", -1)\n    num := strings.Replace(num, \"]\"\
    , \"*\", -1)\n    num := strings.Replace(num, \"{\", \"*\", -1)\n    num := strings.Replace(num,\
    \ \"}\", \"*\", -1)\n    num := strings.Replace(num, \"<\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \">\", \"*\", -1)\n    num := strings.Replace(num, \"\
    !\", \"*\", -1)\n    num := strings.Replace(num, \"%\", \"*\", -1)\n    num :=\
    \ strings.Replace(num, \"@\", \"*\", -1)\n    num := strings.Replace(num, \"$\"\
    , \"*\", -1)\n    num := strings.Replace(num, \"&\", \"*\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"*\", -1)\n    num := strings.Replace(num, \"+\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"\
    .\", \"*\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num :=\
    \ strings.Replace(num, \"*\", \"/\", -1)\n    num := strings.\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9kjhcb7_test.go:71:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    i := 0\n    for ; i < len(num);\
    \ i++ {\n        digit := num[i]\n        if digit == \"A\" || digit == \"B\"\
    \ || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\" {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp730hb1_3_test.go:30:9: no new variables on left side of :=

    /tmp/tmp730hb1_3_test.go:30:12: undefined: strings

    /tmp/tmp730hb1_3_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmp730hb1_3_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmp730hb1_3_test.go:35:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmp730hb1_3_test.go:35:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmp730hb1_3_test.go:35:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmp730hb1_3_test.go:35:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, r := range num {\n     \
    \   if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qeoci93_test.go:30:9: no new variables on left side of :=

    /tmp/tmp4qeoci93_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += (r - 'A') * 16\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksqd9hfl_test.go:32:9: invalid operation: n += (r - ''A'') * 16 (mismatched
    types int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    base := len(num)\n    for i :=\
    \ 0; i < base; i++ {\n        digit := num[i] - '0'\n        if digit >= 'A' &&\
    \ digit <= 'F' {\n            digit = digit - 'A'\n        }\n        if digit\
    \ >= '0' && digit <= '9' {\n            digit = digit - '0'\n        }\n     \
    \   if digit == 0 {\n            continue\n        }\n        if digit == 2 {\n\
    \            count++\n        }\n        if digit == 3 {\n            count++\n\
    \        }\n        if digit == 5 {\n            count++\n        }\n        if\
    \ digit == 7 {\n            count++\n        }\n        if digit == 11 {\n   \
    \         count++\n        }\n        if digit == 13 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmjk781po_test.go:30:9: no new variables on left side of :=

    /tmp/tmpmjk781po_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"10\", -1)\n    num := strings.Replace(num, \"1\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"2\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"13\", -1)\n    num := strings.Replace(num, \"4\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"5\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"16\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"18\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"19\", -1)\n    num := strings.Replace(num, \"+\", \"20\", -1)\n   \
    \ num := strings.Replace(num, \"-\", \"21\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"22\", -1)\n    num := strings.Replace(num, \"/\", \"23\", -1)\n   \
    \ num := strings.Replace(num, \"=\", \"24\", -1)\n    num := strings.Replace(num,\
    \ \"?\", \"25\", -1)\n    num := strings.Replace(num, \"!\", \"26\", -1)\n   \
    \ num := strings.Replace(num, \"(\", \"27\", -1)\n    num := strings.Replace(num,\
    \ \"[\", \"28\", -1)\n    num := strings.Replace(num, \")\", \"29\", -1)\n   \
    \ num := strings.Replace(num, \"{\", \"30\", -1)\n    num := strings.Replace(num,\
    \ \"}\", \"31\", -1)\n    num := strings.Replace(num, \"|\", \"32\", -1)\n   \
    \ num := strings.Replace(num, \"~\", \"33\", -1)\n    num := strings.Replace(num,\
    \ \"@\", \"34\", -1)\n    num := strings.Replace(num, \"#\", \"35\", -1)\n   \
    \ num := strings.Replace(num, \"$\", \"36\", -1)\n    num := strings.Replace(num,\
    \ \"%\", \"37\", -1)\n    num := strings.Replace(num, \"^\", \"38\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"39\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"40\", -1)\n    num := strings.Replace(num, \"(\", \"41\", -1)\n   \
    \ num := strings.\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxa4iwz8c_test.go:71:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    num := strings.ToUpper(num)\n    \n    count := 0\n\
    \    \n    for _, char := range num {\n        \n        if char == 'A' || char\
    \ == 'B' || char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n     \
    \       \n            count += 2\n            \n        } else if char == '0'\
    \ {\n            \n            count += 0\n            \n        } else {\n  \
    \          \n            count += 3\n        }\n    }\n    \n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb23gmu5z_test.go:32:9: no new variables on left side of :=

    /tmp/tmpb23gmu5z_test.go:32:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    \n    count := 0\n    for _, char := range num\
    \ {\n        count += int(char) - 'A'\n    }\n    \n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoy6rssdq_test.go:30:9: no new variables on left side of :=

    /tmp/tmpoy6rssdq_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    result := 0\n    for _, v := range num {\n    \
    \    if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        result += 1\n    }\n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgroep7wz_test.go:30:9: no new variables on left side of :=

    /tmp/tmpgroep7wz_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"\
    1\", \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\"\
    , \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num\
    \ := strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"\
    9\", \"9\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"+\", \"+\", -1)\n    num := strings.Replace(num, \".\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"\
    3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpumhcs4_q_test.go:71:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A') + 1\n   \
    \ }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpzmosy36c_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpzmosy36c_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=-44)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpzmosy36c_test.go:55: expected '%!s(int=4)', got '%!s(int=-28)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpzmosy36c_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpzmosy36c_test.go:55: expected '%!s(int=6)', got '%!s(int=-94)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpzmosy36c_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=-188)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"7\", -1)\n    num := strings.Replace(num, \"1\", \"8\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"9\", -1)\n    num := strings.Replace(num, \"3\", \"A\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"B\", -1)\n    num := strings.Replace(num, \"\
    5\", \"C\", -1)\n    num := strings.Replace(num, \"6\", \"D\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"E\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"F\", -1)\n    num := strings.Replace(num, \"9\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"=\", \"+\", -1)\n    num := strings.Replace(num, \"\
    *\", \"/\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"(\", \"\", -1)\n    num := strings.Replace(num, \")\"\
    , \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    +\", \"\", -1)\n    num := strings.Replace(num, \"=\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"\", -1)\n    num := strings.Replace(num, \"+\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    /\", \"\", -1)\n    num := strings.Replace(num, \"(\", \"\", -1)\n    num := strings.Replace(num,\
    \ \")\", \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num, \"\
    /\", \"\", -1)\n    num := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"\", -1)\n    num \nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplixytc6z_test.go:73:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"10\", -1)\n    num := strings.Replace(num, \"1\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"2\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"13\", -1)\n    num := strings.Replace(num, \"4\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"5\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"16\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"18\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"19\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"*\", -1)\n    num := strings.Replace(num, \"\
    =\", \"*\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"*\", \"/\", -1)\n    num := strings.Replace(num, \"(\"\
    , \"-\", -1)\n    num := strings.Replace(num, \")\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"*\", -1)\n    num := strings.Replace(num, \"*\", \".\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"\
    +\", \"+\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num :=\
    \ strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num, \"\
    -\", \"+\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num :=\
    \ strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    \nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq7_giyit_test.go:72:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"1\", -1)\n    num := strings.Replace(num, \"1\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"3\", -1)\n    num := strings.Replace(num, \"\
    3\", \"4\", -1)\n    num := strings.Replace(num, \"4\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"6\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"7\", -1)\n    num := strings.Replace(num, \"7\", \"8\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"9\", -1)\n    num := strings.Replace(num, \"9\", \"10\", -1)\n    num\
    \ := strings.Replace(num, \"10\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"11\", \"12\", -1)\n    num := strings.Replace(num, \"12\", \"13\", -1)\n \
    \   num := strings.Replace(num, \"13\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"14\", \"15\", -1)\n    num := strings.Replace(num, \"15\", \"16\", -1)\n \
    \   num := strings.Replace(num, \"16\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"17\", \"18\", -1)\n    num := strings.Replace(num, \"18\", \"19\", -1)\n \
    \   num := strings.Replace(num, \"19\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"20\", \"21\", -1)\n    num := strings.Replace(num, \"21\", \"22\", -1)\n \
    \   num := strings.Replace(num, \"22\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"23\", \"24\", -1)\n    num := strings.Replace(num, \"24\", \"25\", -1)\n \
    \   num := strings.Replace(num, \"25\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"26\", \"27\", -1)\n    num := strings.Replace(num, \"27\", \"28\", -1)\n \
    \   num := strings.Replace(num, \"28\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"29\", \"30\", -1)\n    num := strings.Replace(num, \"30\", \"31\", -1)\n \
    \   num := strings.Replace(num, \"31\", \"32\", -1)\n    num := strings.Replace(num,\
    \ \"\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzdlk0w4_test.go:70:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    result := 0\n    for i := 0; i < n; i++ {\n        result +=\
    \ (int(num[i]) - 'A') * int(num[i])\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpm887ojmj_test.go:56: expected '%!s(int=1)', got '%!s(int=66)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpm887ojmj_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=-2424)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpm887ojmj_test.go:56: expected '%!s(int=4)', got '%!s(int=-1666)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpm887ojmj_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=-3132)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpm887ojmj_test.go:56: expected '%!s(int=6)', got '%!s(int=-5450)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpm887ojmj_test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=-10900)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"\
    1\", \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\"\
    , \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num\
    \ := strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"\
    9\", \"9\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"+\", \"+\", -1)\n    num := strings.Replace(num, \".\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"\
    3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpumhcs4_q_test.go:71:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, c := range num {\n        if c >= '0' && c <= '9' {\n     \
    \       n = n*16 + int(c-'0')\n        } else if c >= 'A' && c <= 'F' {\n    \
    \        n = n*16 + int(c-'A') + 10\n        } else if c >= 'a' && c <= 'f' {\n\
    \            n = n*16 + int(c-'a') + 10\n        }\n    }\n    return n\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpn3t1r8dq_test.go:61: expected '%!s(int=1)', got '%!s(int=171)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpn3t1r8dq_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=67454)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpn3t1r8dq_test.go:61: expected '%!s(int=4)', got '%!s(int=2884442675)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpn3t1r8dq_test.go:61:\
    \ expected '%!s(int=2)', got '%!s(int=8224)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpn3t1r8dq_test.go:61: expected '%!s(int=6)', got '%!s(int=1311768467463790320)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpn3t1r8dq_test.go:61:\
    \ expected '%!s(int=12)', got '%!s(int=-7373874951294615808)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    count := 0\n    for i := 0; i < n; i++ {\n        digit :=\
    \ int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n      \
    \  }\n        if digit == 0 {\n            continue\n        }\n        count\
    \ += digit\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpt1pa_0w3_test.go:63: expected '%!s(int=1)', got '%!s(int=111)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=226)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpt1pa_0w3_test.go:63: expected '%!s(int=4)', got '%!s(int=404)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=156)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpt1pa_0w3_test.go:63: expected '%!s(int=6)', got '%!s(int=770)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpt1pa_0w3_test.go:63:\
    \ expected '%!s(int=12)', got '%!s(int=1540)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"/\", \"*\", -1)\n    num := strings.Replace(num, \"=\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"*\", -1)\n    num := strings.Replace(num, \"\
    *\", \"*\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num :=\
    \ strings.Replace(num, \"-\", \"*\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"*\", -1)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n    num := strings.Replace(num,\
    \ \"B\", \"11\", -1)\n    num := strings.Replace(num, \"C\", \"12\", -1)\n   \
    \ num := strings.Replace(num, \"D\", \"13\", -1)\n    num := strings.Replace(num,\
    \ \"E\", \"14\", -1)\n    num := strings.Replace(num, \"F\", \"15\", -1)\n   \
    \ num := strings.Replace(num, \"0\", \"10\", -1)\n    num := strings.Replace(num,\
    \ \"1\", \"11\", -1)\n    num := strings.Replace(num, \"2\", \"12\", -1)\n   \
    \ num := strings.Replace(num, \"3\", \"13\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"14\", -1)\n    num := strings.Replace(num, \"5\", \"15\", -1)\n   \
    \ num := strings.Replace(num, \"6\", \"16\", -1)\n    num := strings.Replace(num,\
    \ \"7\", \"17\", -1)\n    num := strings.Replace(num, \"8\", \"18\", -1)\n   \
    \ num := strings.Replace(num, \"\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpavrrysfa_test.go:70:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, char := range num {\n        if char == 'A' || char\
    \ == 'B' || char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpidh0uqan_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpidh0uqan_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpidh0uqan_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpidh0uqan_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"/\", \"*\", -1)\n    num := strings.Replace(num, \"=\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"\
    *\", \"/\", -1)\n    num := strings.Replace(num, \"(\", \"\", -1)\n    num :=\
    \ strings.Replace(num, \")\", \"\", -1)\n    num := strings.Replace(num, \".\"\
    , \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    =\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    =\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    =\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"\"\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpthqg_ied_test.go:71:40: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074581
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r) - 'a')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8oyde4w_test.go:32:18: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int\n    var digit int\n    var isPrime bool\n    for _, c := range num\
    \ {\n        digit, err := strconv.Atoi(c)\n        if err != nil {\n        \
    \    return -1\n        }\n        if digit < 0 || digit > 9 {\n            return\
    \ -1\n        }\n        if isPrime {\n            return -1\n        }\n    \
    \    isPrime = true\n        count += digit\n    }\n    if isPrime {\n       \
    \ return count\n    }\n    return -1\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjf50pln_test.go:31:9: digit declared but not used

    /tmp/tmpfjf50pln_test.go:34:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, r := range num {\n        if r == 'A' || r == 'B'\
    \ || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpon0xm6jg_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpon0xm6jg_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpon0xm6jg_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpon0xm6jg_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   count += int(v)\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3e9itit0_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3e9itit0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, char := range num {\n  \
    \      if char == 'A' || char == 'B' || char == 'C' || char == 'D' || char ==\
    \ 'E' || char == 'F' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_8j83d0_test.go:30:9: no new variables on left side of :=

    /tmp/tmpp_8j83d0_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i]) -\
    \ '0'\n    }\n    if n == 0 {\n        return 0\n    }\n    if n < 2 {\n     \
    \   return n\n    }\n    i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i])\
    \ - 'A' + 10\n    }\n    if n == 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return n\n    }\n    i := 0\n    for ; i < len(num); i++ {\n        n\
    \ += int(num[i]) - 'A' + 10\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n < 2 {\n        return n\n    }\n    i := 0\n    for ; i < len(num);\
    \ i++ {\n        n += int(num[i]) - 'A' + 10\n    }\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n < 2 {\n        return n\n    }\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        n += int(num[i]) - 'A' + 10\n    }\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n \
    \   i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i]) - 'A' + 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n    i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i])\
    \ - 'A' + 10\n    }\n    if n == 0 {\n        return 0\n    }\n    if n < 2 {\n\
    \        return n\n    }\n    i := 0\n    for ; i < len(num); i++ {\n        n\
    \ += int(num[i]) - 'A' + 10\n    }\n    if n == 0 {\n        return 0\n    }\n\
    \    if n < 2 {\n        return n\n    }\n    i := 0\n    for ; i < len(num);\
    \ i++ {\n        n += int(num[i]) - 'A' + 10\n    }\n    if n == 0 {\n       \
    \ return 0\n    }\n    if n < 2 {\n        return n\n    }\n    i := 0\n    for\
    \ ; i < len(num); i++ {\n        n += int(num[i]) - 'A' + 10\n    }\n    if n\
    \ == 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n \
    \   i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i]) - 'A' + 10\n\
    \    }\n    if n == 0 {\n        return 0\n    }\n    if n < 2 {\n        return\
    \ n\n    }\n    i := 0\n    for ; i < len(num); i++ {\n        n += int(num[i])\
    \ - 'A' + 10\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjzh6prrc_test.go:145:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"\
    1\", \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\"\
    , \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num\
    \ := strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"\
    9\", \"9\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num, \".\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"\
    3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"6\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9til3zju_test.go:71:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    base := \"0123456789ABCDEF\"\n    for _, r := range num {\n      \
    \  if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            continue\n        }\n        n += base[r]\n    }\n    return n\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozjx3z7m_test.go:36:9: invalid operation: n += base[r] (mismatched types
    int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A' + 10)\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpghjumdt3_test.go:55: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpghjumdt3_test.go:55: expected '%!s(int=4)', got '%!s(int=44)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-24)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpghjumdt3_test.go:55: expected '%!s(int=6)', got '%!s(int=50)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if prime[i]\
    \ == 0 {\n            prime[i] = 1\n            for j := 0; j < i; j++ {\n   \
    \             if prime[j] == 0 {\n                    prime[j] = 1\n         \
    \           for k := 0; k < j; k++ {\n                        if prime[k] == 0\
    \ {\n                            prime[k] = 1\n                            for\
    \ l := 0; l < k; l++ {\n                                if prime[l] == 0 {\n \
    \                                   prime[l] = 1\n                           \
    \         for m := 0; m < l; m++ {\n                                        if\
    \ prime[m] == 0 {\n                                            prime[m] = 1\n\
    \                                            for n := 0; n < m; n++ {\n      \
    \                                          if prime[n] == 0 {\n              \
    \                                      prime[n] = 1\n                        \
    \                        }\n                                            }\n  \
    \                                      }\n                                   \
    \ }\n                                }\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n\
    \        if prime[i] == 0 {\n            prime[i] = 1\n            for j := 0;\
    \ j < i; j++ {\n                if prime[j] == 0 {\n                    prime[j]\
    \ = 1\n                    for k := 0; k < j; k++ {\n                        if\
    \ prime[k] == 0 {\n                            prime[k] = 1\n                \
    \            for l := 0; l < k; l++ {\n                                if prime[l]\
    \ == 0 {\n                                    prime[l] = 1\n                 \
    \                   for m := 0; m < l; m++ {\n                               \
    \         if prime[m] == 0 {\n                                            prime[m]\
    \ = 1\n                                            for n := 0; n < m; n++ {\n\
    \                                                if prime[n] == 0 {\n        \
    \                                            prime[n] = 1\n                  \
    \                              }\n                                           \
    \ }\n                                        }\n                             \
    \       }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        if prime[i] == 0 {\n            prime[i] = 1\n           \
    \ for j := 0; j < i; j++ {\n                if prime[j] == 0 {\n             \
    \       prime[j] = 1\n                    for k := 0; k < j; k++ {\n         \
    \               if prime[k] == 0 {\n                            prime[k] = 1\n\
    \                            for l := 0; l < k; l++ {\n                      \
    \          if prime[l] == 0 {\n                                    prime[l] =\
    \ 1\n                                    for m := 0; m < l; m++ {\n          \
    \                              if prime[m] == 0 {\n                          \
    \                  prime[m] = 1\n                                            for\
    \ n := 0; n < m; n++ {\n                                                if prime[n]\
    \ == 0 {\n                                                    prime[n] = 1\n \
    \                                               }\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4xpwlz_d_test.go:116:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"11\", -1)\n    num := strings.Replace(num, \".\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"/\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"11\", -1)\n    num := strings.Replace(num, \"=\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"?\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"!\", \"11\", -1)\n    num := strings.Replace(num, \"(\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"[\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"]\", \"11\", -1)\n    num := strings.Replace(num, \"{\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"}\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"<\", \"11\", -1)\n    num := strings.Replace(num, \">\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"@\", \"11\", -1)\n    num := strings.Replace(num, \"#\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"$\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"%\", \"11\", -1)\n    num := strings.Replace(num, \"^\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"11\", -1)\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyhobk6oa_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A' + 10)\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpghjumdt3_test.go:55: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpghjumdt3_test.go:55: expected '%!s(int=4)', got '%!s(int=44)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-24)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpghjumdt3_test.go:55: expected '%!s(int=6)', got '%!s(int=50)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpghjumdt3_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=100)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    result := 0\n    for i := 0; i < n; i++ {\n        digit :=\
    \ int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n      \
    \  }\n        if digit == 0 || digit == 1 {\n            continue\n        }\n\
    \        result += 1\n        for j := 0; j < digit; j++ {\n            result\
    \ += 1\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpnhfi943i_test.go:66: expected '%!s(int=1)', got '%!s(int=113)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpnhfi943i_test.go:66:\
    \ expected '%!s(int=2)', got '%!s(int=231)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpnhfi943i_test.go:66: expected '%!s(int=4)', got '%!s(int=412)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpnhfi943i_test.go:66:\
    \ expected '%!s(int=2)', got '%!s(int=160)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpnhfi943i_test.go:66: expected '%!s(int=6)', got '%!s(int=786)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpnhfi943i_test.go:66:\
    \ expected '%!s(int=12)', got '%!s(int=1572)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n        } else {\n\
    \            n += 1\n        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpzr1nui6s_test.go:59: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpzr1nui6s_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpzr1nui6s_test.go:59: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpzr1nui6s_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpzr1nui6s_test.go:59: expected '%!s(int=6)', got '%!s(int=22)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpzr1nui6s_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=44)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num, \"\
    5\", \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"7\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"8\", -1)\n    num := strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num, \"\
    /\", \"0\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"-\"\
    , \"+\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"\
    1\", \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\"\
    , \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr2zk_2ma_test.go:73:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    num := strings.ToUpper(num)\n    count := 0\n    for _,\
    \ v := range num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' ||\
    \ v == 'E' || v == 'F' {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa80bxlmd_test.go:31:9: no new variables on left side of :=

    /tmp/tmpa80bxlmd_test.go:31:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    count := 0\n    for i := 0; i < n; i++ {\n        c := num[i]\n\
    \        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n  \
    \  if count == 0 {\n        return -1\n    }\n    count += 2\n    for i := 0;\
    \ i < n; i++ {\n        c := num[i]\n        if c >= 'A' && c <= 'F' {\n     \
    \       count++\n        }\n    }\n    if count == 0 {\n        return -1\n  \
    \  }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsliqgvof_test.go:72: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsliqgvof_test.go:72:\
    \ expected '%!s(int=2)', got '%!s(int=7)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsliqgvof_test.go:72: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsliqgvof_test.go:72:\
    \ expected '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsliqgvof_test.go:72: expected '%!s(int=6)', got '%!s(int=18)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsliqgvof_test.go:72:\
    \ expected '%!s(int=12)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, r := range num {\n     \
    \   if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            continue\n        }\n        count += int(unicode.ToLower(r) - '0')\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2td4gaf7_test.go:30:9: no new variables on left side of :=

    /tmp/tmp2td4gaf7_test.go:30:12: undefined: strings

    /tmp/tmp2td4gaf7_test.go:36:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n = n + 1\n        }\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, c := range num {\n        if c >= '0' && c <= '9'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpk61m3u86_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpk61m3u86_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpk61m3u86_test.go:57: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpk61m3u86_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpk61m3u86_test.go:57: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpk61m3u86_test.go:57:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(r) - 'A'\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmpi9wsa08i_test.go:55: expected '%!s(int=2)', got '%!s(int=-49)'\n \
    \   --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpi9wsa08i_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=-36)'\n    --- FAIL: TestHex_Key/test_num__3\
    \ (0.00s)\n        tmpi9wsa08i_test.go:55: expected '%!s(int=2)', got '%!s(int=-64)'\n\
    \    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmpi9wsa08i_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=-110)'\n    --- FAIL: TestHex_Key/test_num__5\
    \ (0.00s)\n        tmpi9wsa08i_test.go:55: expected '%!s(int=12)', got '%!s(int=-220)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(string(r))\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpee88wxt0_test.go:32:18: cannot convert string(r) (value of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(r) - int('A') + int('0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpc3262wjc_test.go:55: expected '%!s(int=1)', got '%!s(int=97)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpc3262wjc_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=191)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpc3262wjc_test.go:55: expected '%!s(int=4)', got '%!s(int=348)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpc3262wjc_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=128)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpc3262wjc_test.go:55: expected '%!s(int=6)', got '%!s(int=658)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpc3262wjc_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=1316)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" {\n       \
    \     result += 2\n        } else if digit == \"B\" {\n            result += 3\n\
    \        } else if digit == \"C\" {\n            result += 5\n        } else if\
    \ digit == \"D\" {\n            result += 7\n        } else if digit == \"E\"\
    \ {\n            result += 11\n        } else if digit == \"F\" {\n          \
    \  result += 13\n        } else {\n            result += digit\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobc62d1s_test.go:30:9: no new variables on left side of :=

    /tmp/tmpobc62d1s_test.go:30:12: undefined: strings

    /tmp/tmpobc62d1s_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:37:28: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:39:28: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:41:28: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:43:28: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:45:28: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    /tmp/tmpobc62d1s_test.go:48:13: invalid operation: result += digit (mismatched
    types int and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"21\", -1)\n    num := strings.Replace(num, \".\", \"22\", -1)\n   \
    \ num := strings.Replace(num, \"/\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"24\", -1)\n    num := strings.Replace(num, \"_\", \"25\", -1)\n   \
    \ num := strings.Replace(num, \"*\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"%\", \"27\", -1)\n    num := strings.Replace(num, \"(\", \"28\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"30\", -1)\n    num := strings.Replace(num, \"%\", \"31\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"32\", -1)\n    num := strings.Replace(num,\
    \ \"'\", \"33\", -1)\n    num := strings.Replace(num, \"(\", \"34\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"35\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"36\", -1)\n    num := strings.Replace(num, \"%\", \"37\", -1)\n   \
    \ num := strings.Replace(num, \"&\", \"38\", -1)\n    num := strings.Replace(num,\
    \ \"'\", \"39\", -1)\n    num := strings.Replace(num, \"(\", \"40\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"41\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"42\", -1)\n    num := \nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmwwo9mje_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"7\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"8\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"9\", -1)\n    num := strings.Replace(num, \"3\", \"A\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"B\", -1)\n    num := strings.Replace(num, \"5\", \"C\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"D\", -1)\n    num := strings.Replace(num, \"\
    7\", \"E\", -1)\n    num := strings.Replace(num, \"8\", \"F\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"0\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"+\", -1)\n    num := strings.Replace(num, \"-\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"/\", -1)\n    num := strings.Replace(num, \"\
    (\", \"\", -1)\n    num := strings.Replace(num, \")\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"/\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    +\", \"\", -1)\n    num := strings.Replace(num, \"=\", \"\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    +\", \"\", -1)\n    num := strings.Replace(num, \"=\", \"\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    +\", \"\", -1)\n    num := strings.Replace(num, \"=\", \"\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4eizzqfi_test.go:73:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" {\n       \
    \     result += 11\n        } else if digit == \"B\" {\n            result +=\
    \ 13\n        } else if digit == \"C\" {\n            result += 17\n        }\
    \ else if digit == \"D\" {\n            result += 19\n        } else if digit\
    \ == \"E\" {\n            result += 23\n        } else if digit == \"F\" {\n \
    \           result += 29\n        } else {\n            result += int(digit)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz8uck750_test.go:30:9: no new variables on left side of :=

    /tmp/tmpz8uck750_test.go:30:12: undefined: strings

    /tmp/tmpz8uck750_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpz8uck750_test.go:37:28: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpz8uck750_test.go:39:28: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpz8uck750_test.go:41:28: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpz8uck750_test.go:43:28: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpz8uck750_test.go:45:28: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n += 2\n        } else {\n\
    \            n += 1\n        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpzr1nui6s_test.go:59: expected '%!s(int=1)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpzr1nui6s_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpzr1nui6s_test.go:59: expected '%!s(int=4)', got '%!s(int=13)'\n  \
    \  --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpzr1nui6s_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpzr1nui6s_test.go:59: expected '%!s(int=6)', got '%!s(int=22)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpzr1nui6s_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=44)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074583
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r) - '0')\n\
    \    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07jodey3_test.go:32:18: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    result := 0\n    for i := 0; i < n; i++ {\n        digit :=\
    \ int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n      \
    \  }\n        if digit == 0 || digit == 1 {\n            continue\n        }\n\
    \        result += 1\n    }\n    return result\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplw8rec3l_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplw8rec3l_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplw8rec3l_test.go:63: expected '%!s(int=4)', got '%!s(int=8)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplw8rec3l_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmplw8rec3l_test.go:63: expected '%!s(int=6)', got '%!s(int=16)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmplw8rec3l_test.go:63:\
    \ expected '%!s(int=12)', got '%!s(int=32)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int\n    for _, v := range num {\n        if v == 'A' || v == 'B' || v\
    \ == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n        }\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmppl73gwy5_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmppl73gwy5_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmppl73gwy5_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmppl73gwy5_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, r := range num {\n        if r == 'A' || r == 'B'\
    \ || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpon0xm6jg_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpon0xm6jg_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpon0xm6jg_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpon0xm6jg_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"10\", -1)\n    num := strings.Replace(num, \"1\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"2\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"13\", -1)\n    num := strings.Replace(num, \"4\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"5\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"16\", -1)\n    num := strings.Replace(num, \"7\", \"17\", -1)\n   \
    \ num := strings.Replace(num, \"8\", \"18\", -1)\n    num := strings.Replace(num,\
    \ \"9\", \"19\", -1)\n    num := strings.Replace(num, \"+\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"-\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"12\", -1)\n    num := strings.Replace(num, \"/\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"=\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"(\", \"15\", -1)\n    num := strings.Replace(num, \"[\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \")\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"{\", \"18\", -1)\n    num := strings.Replace(num, \"}\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"!\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"~\", \"21\", -1)\n    num := strings.Replace(num, \"@\", \"22\", -1)\n   \
    \ num := strings.Replace(num, \"#\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"24\", -1)\n    num := strings.Replace(num, \"%\", \"25\", -1)\n   \
    \ num := strings.Replace(num, \"^\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"&\", \"27\", -1)\n    num := strings.Replace(num, \"*\", \"28\", -1)\n   \
    \ num := strings.Replace(num, \"(\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \")\", \"30\", -1)\n    num := strings.Replace(num, \"{\", \"31\", -1)\n   \
    \ num := strings.\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjsh3a6rf_test.go:71:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int\n    \n    for _, r := range num {\n        if r == 'A' || r == 'B'\
    \ || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n   \
    \     }\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmprhs74jra_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmprhs74jra_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmprhs74jra_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmprhs74jra_test.go:59: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    count := 0\n    i := 0\n   \
    \ for ; i < n; i++ {\n        count += int(num[i]) - 'A'\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqop5lkwp_test.go:30:9: no new variables on left side of :=

    /tmp/tmpqop5lkwp_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, c := range num {\n     \
    \   if c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmiyg4_b__test.go:30:9: no new variables on left side of :=

    /tmp/tmpmiyg4_b__test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n \
    \   hexDigitsCount := 0\n    for i := 0; i < n; i++ {\n        hexDigitsCount\
    \ += hexDigits.Count(num[i])\n    }\n    return hexDigitsCount\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8bf9oqxt_test.go:34:37: hexDigits.Count undefined (type []string has no
    field or method Count)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"+\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num, \"\
    =\", \"0\", -1)\n    num := strings.Replace(num, \"_\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"*\", \"0\", -1)\n    num := strings.Replace(num, \"%\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"(\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"[\", \"0\", -1)\n    num := strings.Replace(num, \"]\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"{\", \"0\", -1)\n    num := strings.Replace(num, \"\
    }\", \"0\", -1)\n    num := strings.Replace(num, \"<\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \">\", \"0\", -1)\n    num := strings.Replace(num, \"!\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"@\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"#\", \"0\", -1)\n    num := strings.Replace(num, \"$\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"%\", \"0\", -1)\n    num := strings.Replace(num, \"\
    ^\", \"0\", -1)\n    num := strings.Replace(num, \"&\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"*\", \"0\", -1)\n    \nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1ri3vmjd_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num, \"\
    5\", \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"7\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"8\", -1)\n    num := strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num, \"\
    /\", \"0\", -1)\n    num := strings.Replace(num, \"=\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"(\", \"0\", -1)\n    num := strings.Replace(num, \"[\"\
    , \"0\", -1)\n    num := strings.Replace(num, \")\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"{\", \"0\", -1)\n    num := strings.Replace(num, \"}\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"<\", \"0\", -1)\n    num := strings.Replace(num, \"\
    >\", \"0\", -1)\n    num := strings.Replace(num, \"!\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"?\", \"0\", -1)\n    num := strings.Replace(num, \"*\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"%\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"0\", -1)\n    num := strings.Replace(num, \"@\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"^\", \"0\", -1)\n    num := strings.Replace(num, \"\
    &\", \"0\", -1)\n    num := strings.Replace(num, \"*\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"(\", \"0\", -1)\n    num := strings.Replace(num, \"[\"\
    , \"0\", \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6ehntrne_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n += 10\n        } else {\n\
    \            n += int(r) - int('A') + 1\n        }\n    }\n    return n\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmphs62nn12_test.go:59: expected '%!s(int=1)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmphs62nn12_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=-39)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmphs62nn12_test.go:59: expected '%!s(int=4)', got '%!s(int=9)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmphs62nn12_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmphs62nn12_test.go:59: expected '%!s(int=6)', got '%!s(int=-55)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmphs62nn12_test.go:59:\
    \ expected '%!s(int=12)', got '%!s(int=-110)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, c := range num {\n        count += int(c) - int(`0`)\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9mwy4_0_test.go:32:31: cannot convert `0` (untyped string constant "0")
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"0\", -1)\n    num := strings.Replace(num, \"B\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"2\", -1)\n    num := strings.Replace(num, \"\
    D\", \"3\", -1)\n    num := strings.Replace(num, \"E\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"5\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"A\", -1)\n    num := strings.Replace(num, \"1\", \"B\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"C\", -1)\n    num := strings.Replace(num, \"3\", \"D\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"E\", -1)\n    num := strings.Replace(num, \"\
    5\", \"F\", -1)\n    num := strings.Replace(num, \"6\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"1\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"9\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"0\", -1)\n    num := strings.Replace(num, \"-\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \".\", \"2\", -1)\n    num := strings.Replace(num, \"\
    /\", \"3\", -1)\n    num := strings.Replace(num, \"=\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"?\", \"5\", -1)\n    num := strings.Replace(num, \"!\"\
    , \"6\", -1)\n    num := strings.Replace(num, \"*\", \"7\", -1)\n    num := strings.Replace(num,\
    \ \"(\", \"8\", -1)\n    num := strings.Replace(num, \"[\", \"9\", -1)\n    num\
    \ := strings.Replace(num, \")\", \"A\", -1)\n    num := strings.Replace(num, \"\
    ]\", \"B\", -1)\n    num := strings.Replace(num, \"{\", \"C\", -1)\n    num :=\
    \ strings.Replace(num, \"}\", \"D\", -1)\n    num := strings.Replace(num, \"|\"\
    , \"E\", -1)\n    num := strings.Replace(num, \"~\", \"F\", -1)\n    num := strings.Replace(num,\
    \ \"!\", \"0\", -1)\n    num := strings.Replace(num, \"@\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"#\", \"2\", -1)\n    num := strings.Replace(num, \"\
    $\", \"3\", -1)\n    num := strings.Replace(num, \"%\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"^\", \"5\", -1)\n    num := strings.Replace(num, \"&\"\
    , \"6\", -1)\n    num := \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpge1p8pbb_test.go:72:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" || digit ==\
    \ \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\"\
    \ {\n            continue\n        }\n        result += 1\n    }\n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp21gsus00_test.go:30:9: no new variables on left side of :=

    /tmp/tmp21gsus00_test.go:30:12: undefined: strings

    /tmp/tmp21gsus00_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmp21gsus00_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmp21gsus00_test.go:35:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmp21gsus00_test.go:35:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmp21gsus00_test.go:35:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmp21gsus00_test.go:35:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    prime := 0\n    i := 0\n    for ; i < n; i++ {\n        digit\
    \ := int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n   \
    \     }\n        if digit == 0 {\n            continue\n        }\n        prime\
    \ += digit * digit\n    }\n    return prime\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpzkk2t3z5_test.go:64: expected '%!s(int=1)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpzkk2t3z5_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=10496)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpzkk2t3z5_test.go:64: expected '%!s(int=4)', got '%!s(int=20914)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpzkk2t3z5_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=6088)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpzkk2t3z5_test.go:64: expected '%!s(int=6)', got '%!s(int=38000)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpzkk2t3z5_test.go:64:\
    \ expected '%!s(int=12)', got '%!s(int=76000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    \n    for _, v := range num {\n\
    \        count += int(v)\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj0am9b3_test.go:30:9: no new variables on left side of :=

    /tmp/tmptj0am9b3_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"2\"\
    , \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num,\
    \ \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num\
    \ := strings.Replace(num, \"6\", \"6\", -1)\n    num := strings.Replace(num, \"\
    7\", \"7\", -1)\n    num := strings.Replace(num, \"8\", \"8\", -1)\n    num :=\
    \ strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"\
    1\", \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\"\
    , \"4\", -1)\n    num := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num,\
    \ \"6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num\
    \ := strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"\
    9\", \"9\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"+\", \"+\", -1)\n    num := strings.Replace(num, \".\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"\
    3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpumhcs4_q_test.go:71:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074580
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        c := num[i]\n        if c >= '0' && c <= '9' {\n     \
    \       result += 1\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1jbkcm6_test.go:30:9: no new variables on left side of :=

    /tmp/tmpw1jbkcm6_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    \n    count := 0\n    \n    for _, char := range\
    \ num {\n        switch char {\n        case 'A', 'B', 'C', 'D', 'E', 'F':\n \
    \           count++\n        }\n    }\n    \n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwj2vfrsn_test.go:30:9: no new variables on left side of :=

    /tmp/tmpwj2vfrsn_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"21\", -1)\n    num := strings.Replace(num, \".\", \"22\", -1)\n   \
    \ num := strings.Replace(num, \"/\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"24\", -1)\n    num := strings.Replace(num, \"?\", \"25\", -1)\n   \
    \ num := strings.Replace(num, \"*\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"(\", \"27\", -1)\n    num := strings.Replace(num, \"!\", \"28\", -1)\n   \
    \ num := strings.Replace(num, \"@\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"#\", \"30\", -1)\n    num := strings.Replace(num, \"$\", \"31\", -1)\n   \
    \ num := strings.Replace(num, \"%\", \"32\", -1)\n    num := strings.Replace(num,\
    \ \"^\", \"33\", -1)\n    num := strings.Replace(num, \"&\", \"34\", -1)\n   \
    \ num := strings.Replace(num, \"*\", \"35\", -1)\n    num := strings.Replace(num,\
    \ \"_\", \"36\", -1)\n    num := strings.Replace(num, \"+\", \"37\", -1)\n   \
    \ num := strings.Replace(num, \"=\", \"38\", -1)\n    num := strings.Replace(num,\
    \ \"?\", \"39\", -1)\n    num := strings.Replace(num, \"*\", \"40\", -1)\n   \
    \ num := strings.Replace(num, \"(\", \"41\", -1)\n    num := strings.Replace(num,\
    \ \"!\", \"42\", -1)\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpek987ag__test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074585
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(unicode.ToLower(r) - 'a')\n\
    \    }\n    if n > 26 {\n        return -1\n    }\n    if n > 63 {\n        return\
    \ -2\n    }\n    if n > 123 {\n        return -3\n    }\n    if n > 65536 {\n\
    \        return -4\n    }\n    if n > 4294967296 {\n        return -5\n    }\n\
    \    if n > 18446744073709551616 {\n        return -6\n    }\n    if n > 8589934592\
    \ {\n        return -7\n    }\n    if n > 4294967296 {\n        return -8\n  \
    \  }\n    if n > 18446744073709551616 {\n        return -9\n    }\n    if n >\
    \ 8589934592 {\n        return -10\n    }\n    if n > 4294967296 {\n        return\
    \ -11\n    }\n    if n > 18446744073709551616 {\n        return -12\n    }\n \
    \   if n > 8589934592 {\n        return -13\n    }\n    if n > 4294967296 {\n\
    \        return -14\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -15\n    }\n    if n > 8589934592 {\n        return -16\n    }\n    if n > 4294967296\
    \ {\n        return -17\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -18\n    }\n    if n > 8589934592 {\n        return -19\n    }\n    if n > 4294967296\
    \ {\n        return -20\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -21\n    }\n    if n > 8589934592 {\n        return -22\n    }\n    if n > 4294967296\
    \ {\n        return -23\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -24\n    }\n    if n > 8589934592 {\n        return -25\n    }\n    if n > 4294967296\
    \ {\n        return -26\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -27\n    }\n    if n > 8589934592 {\n        return -28\n    }\n    if n > 4294967296\
    \ {\n        return -29\n    }\n    if n > 18446744073709551616 {\n        return\
    \ -30\n    }\n    if n > 8589934592 {\n        return -31\n    }\n    if n > 4294967296\
    \ {\n        return -32\n    }\n    if n > 18446744073709551616 {\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphyxmqvgf_test.go:131:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(string(r))\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpee88wxt0_test.go:32:18: cannot convert string(r) (value of type string)
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            count++\n        }\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmplgj1i__0_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmplgj1i__0_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmplgj1i__0_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmplgj1i__0_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    prime := 0\n    i := 0\n    for ; i < n; i++ {\n        switch\
    \ num[i] {\n        case 'A', 'B', 'C', 'D', 'E', 'F':\n            prime++\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmp57xzbqvp_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmp57xzbqvp_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmp57xzbqvp_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmp57xzbqvp_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    result := 0\n    for _, r := range num {\n    \
    \    result += (int(rune(r)) % 10)\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l8a1qnc_test.go:30:9: no new variables on left side of :=

    /tmp/tmp8l8a1qnc_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074578
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num, \"\
    5\", \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"7\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"8\", -1)\n    num := strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num, \"\
    /\", \"0\", -1)\n    num := strings.Replace(num, \"*\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"%\", \"0\", -1)\n    num := strings.Replace(num, \"(\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"[\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \")\", \"0\", -1)\n    num := strings.Replace(num, \"]\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"=\", \"0\", -1)\n    num := strings.Replace(num, \"\
    <\", \"0\", -1)\n    num := strings.Replace(num, \">\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"?\", \"0\", -1)\n    num := strings.Replace(num, \"!\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"@\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"#\", \"0\", -1)\n    num := strings.Replace(num, \"$\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"%\", \"0\", -1)\n    num := strings.Replace(num, \"\
    ^\", \"0\", -1)\n    num := strings.Replace(num, \"&\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"*\", \"0\", -1)\n    num := strings.Replace(num, \"(\"\
    , \"0\", \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptg45bx9y_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074586
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    result := 0\n    for _, char := range num {\n \
    \       result += (int(char)-48)\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeo2x2ysf_test.go:30:9: no new variables on left side of :=

    /tmp/tmpeo2x2ysf_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    \n    count := 0\n    \n    for _, v := range num\
    \ {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v\
    \ == 'F' {\n            count++\n        }\n    }\n    \n    return count\n}\n\
    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkrlz1y7q_test.go:30:9: no new variables on left side of :=

    /tmp/tmpkrlz1y7q_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpdkvqj9e9_test.go:54: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpdkvqj9e9_test.go:54: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    num := strings.ToUpper(num)\n    num := strings.Replace(num,\
    \ \"A\", \"10\", -1)\n    num := strings.Replace(num, \"B\", \"11\", -1)\n   \
    \ num := strings.Replace(num, \"C\", \"12\", -1)\n    num := strings.Replace(num,\
    \ \"D\", \"13\", -1)\n    num := strings.Replace(num, \"E\", \"14\", -1)\n   \
    \ num := strings.Replace(num, \"F\", \"15\", -1)\n    num := strings.Replace(num,\
    \ \"0\", \"1\", -1)\n    num := strings.Replace(num, \"1\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"2\", \"3\", -1)\n    num := strings.Replace(num, \"\
    3\", \"4\", -1)\n    num := strings.Replace(num, \"4\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"5\", \"6\", -1)\n    num := strings.Replace(num, \"6\"\
    , \"7\", -1)\n    num := strings.Replace(num, \"7\", \"8\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"9\", -1)\n    num := strings.Replace(num, \"9\", \"10\", -1)\n    num\
    \ := strings.Replace(num, \"10\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"11\", \"12\", -1)\n    num := strings.Replace(num, \"12\", \"13\", -1)\n \
    \   num := strings.Replace(num, \"13\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"14\", \"15\", -1)\n    num := strings.Replace(num, \"15\", \"16\", -1)\n \
    \   num := strings.Replace(num, \"16\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"17\", \"18\", -1)\n    num := strings.Replace(num, \"18\", \"19\", -1)\n \
    \   num := strings.Replace(num, \"19\", \"20\", -1)\n    num := strings.Replace(num,\
    \ \"20\", \"21\", -1)\n    num := strings.Replace(num, \"21\", \"22\", -1)\n \
    \   num := strings.Replace(num, \"22\", \"23\", -1)\n    num := strings.Replace(num,\
    \ \"23\", \"24\", -1)\n    num := strings.Replace(num, \"24\", \"25\", -1)\n \
    \   num := strings.Replace(num, \"25\", \"26\", -1)\n    num := strings.Replace(num,\
    \ \"26\", \"27\", -1)\n    num := strings.Replace(num, \"27\", \"28\", -1)\n \
    \   num := strings.Replace(num, \"28\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"29\", \"30\", -1)\n    num := strings.Replace(num, \"30\", \"31\", -1)\n \
    \   num := strings.Replace(num, \"31\", \"32\", -1)\n    num := strings.Replace(num,\
    \ \"32\", \"33\", -1)\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp12hppnjr_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    base := 0\n    for _, v := range num {\n        count += int(v)\n\
    \        base += int(v)\n    }\n    if base < 2 {\n        return count\n    }\n\
    \    base -= 2\n    for i := 0; i < base; i++ {\n        if isPrime(count) {\n\
    \            return count\n        }\n        count += 2\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuxwa4l3l_test.go:41:12: undefined: isPrime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == 'A' || digit == 'B'\
    \ || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n        \
    \    continue\n        }\n        result += 1\n    }\n    return result\n}\n\n\
    func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp931iy9f6_test.go:30:9: no new variables on left side of :=

    /tmp/tmp931iy9f6_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    \n    count := 0\n    for _, v := range num {\n\
    \        count += int(v)\n    }\n    \n    count += count/2\n    \n    if count\
    \ < 2 {\n        return count\n    }\n    \n    count += count/3\n    \n    if\
    \ count < 2 {\n        return count\n    }\n    \n    count += count/7\n    \n\
    \    if count < 2 {\n        return count\n    }\n    \n    count += count/11\n\
    \    \n    if count < 2 {\n        return count\n    }\n    \n    count += count/13\n\
    \    \n    if count < 2 {\n        return count\n    }\n    \n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9e6xww1_test.go:30:9: no new variables on left side of :=

    /tmp/tmpf9e6xww1_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    base := 16\n    digits := []int{2, 3, 4, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    for _, digit\
    \ := range digits {\n        if num[count] == digit+1 {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkvztpkv1_test.go:31:5: base declared but not used

    /tmp/tmpkvztpkv1_test.go:34:26: invalid operation: num[count] == digit + 1 (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v) - '0'\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zqx3g1c_test.go:30:9: no new variables on left side of :=

    /tmp/tmp8zqx3g1c_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmpcshf94km_test.go:53: expected '%!s(int=6)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpcshf94km_test.go:53: expected\
    \ '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074578
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime[0] = 2\n    prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n    prime[4]\
    \ = 11\n    prime[5] = 13\n    prime[6] = 17\n    prime[7] = 19\n    prime[8]\
    \ = 23\n    prime[9] = 29\n    prime[10] = 31\n    prime[11] = 31\n    prime[12]\
    \ = 37\n    prime[13] = 41\n    prime[14] = 43\n    prime[15] = 47\n    prime[16]\
    \ = 53\n    prime[17] = 59\n    prime[18] = 61\n    prime[19] = 67\n    prime[20]\
    \ = 71\n    prime[21] = 73\n    prime[22] = 79\n    prime[23] = 83\n    prime[24]\
    \ = 89\n    prime[25] = 97\n    prime[26] = 101\n    prime[27] = 103\n    prime[28]\
    \ = 107\n    prime[29] = 109\n    prime[30] = 112\n    prime[31] = 116\n    prime[32]\
    \ = 120\n    prime[33] = 128\n    prime[34] = 136\n    prime[35] = 144\n    prime[36]\
    \ = 152\n    prime[37] = 158\n    prime[38] = 162\n    prime[39] = 168\n    prime[40]\
    \ = 173\n    prime[41] = 177\n    prime[42] = 181\n    prime[43] = 191\n    prime[44]\
    \ = 193\n    prime[45] = 193\n    prime[46] = 193\n    prime[47] = 193\n    prime[48]\
    \ = 193\n    prime[49] = 193\n    prime[50] = 193\n    prime[51] = 193\n    prime[52]\
    \ = 193\n    prime[53] = 193\n    prime[54] = 193\n    prime[55] = 193\n    prime[56]\
    \ = 193\n    prime[57] = 193\n    prime[58] = 193\n    prime[59] = 193\n    prime[60]\
    \ = 193\n    prime[61] = 193\n    prime[62] = 193\n    prime[63] = 193\n    prime[64]\
    \ = 193\n    prime[65] = 193\n    prime[66] = 193\n    prime[67] = 193\n    prime[68]\
    \ = \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzfyq9kx0_test.go:102:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(r) - 'A'\n    }\n    return\
    \ n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__1 (0.00s)\n\
    \        tmpi9wsa08i_test.go:55: expected '%!s(int=2)', got '%!s(int=-49)'\n \
    \   --- FAIL: TestHex_Key/test_num__2 (0.00s)\n        tmpi9wsa08i_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=-36)'\n    --- FAIL: TestHex_Key/test_num__3\
    \ (0.00s)\n        tmpi9wsa08i_test.go:55: expected '%!s(int=2)', got '%!s(int=-64)'\n\
    \    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n        tmpi9wsa08i_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=-110)'\n    --- FAIL: TestHex_Key/test_num__5\
    \ (0.00s)\n        tmpi9wsa08i_test.go:55: expected '%!s(int=12)', got '%!s(int=-220)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074584
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    //\
    \ Your code here\n    \n    return 0\n}\n</code>\n<|/ a tags=go |>\n<| c |>\n\
    Thank you very much! I really appreciate your help!\n<|/ c |>\n<| c |>\nI tried\
    \ to run your code, but I got this error `panic: runtime error: index out of range\n\
    [signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x10e3ca]\n  goroutine\
    \ 1 [running]:\nmain.main()\n    /home/user/go/src/hex_key/hex_key_test.go:13\
    \ +0x9d\nexit status 2`\n<|/ c |>\n<| c |>\nI ran it on https://play.golang.org/p/HXy5j6NwvjK\
    \ and it worked fine. Are you sure you copied the code correctly?\n<|/ c |>\n\
    <| c |>\nYes, I copied the code correctly. I'm really confused why it didn't work.\
    \ Thank you very much for your help!\n<|/ c |>\n<| c |>\nI ran it on https://play.golang.org/p/HXy5j6NwvjK\
    \ and it worked fine. Are you sure you copied the code correctly?\n<|/ c |>\n\
    <| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxvp7pn9k_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074587
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        count += int(v)\n    }\n\
    \    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpq03z4tna_test.go:55: expected '%!s(int=1)', got '%!s(int=131)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpq03z4tna_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=276)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpq03z4tna_test.go:55: expected '%!s(int=4)', got '%!s(int=484)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpq03z4tna_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=196)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpq03z4tna_test.go:55: expected '%!s(int=6)', got '%!s(int=930)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpq03z4tna_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=1860)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074589
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    hexDigits := []string{\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"}\n    hexDigitsCount := 0\n    for _, digit := range num {\n        if\
    \ digit == \"A\" || digit == \"B\" || digit == \"C\" || digit == \"D\" || digit\
    \ == \"E\" || digit == \"F\" {\n            hexDigitsCount++\n        }\n    }\n\
    \    hexDigitsCount += hexDigitsCount / 2\n    hexDigitsCount += hexDigitsCount\
    \ / 3\n    hexDigitsCount += hexDigitsCount / 5\n    hexDigitsCount += hexDigitsCount\
    \ / 7\n    hexDigitsCount += hexDigitsCount / 11\n    hexDigitsCount += hexDigitsCount\
    \ / 13\n    return hexDigitsCount\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0stkzn1d_test.go:30:9: no new variables on left side of :=

    /tmp/tmp0stkzn1d_test.go:30:12: undefined: strings

    /tmp/tmp0stkzn1d_test.go:31:5: hexDigits declared but not used

    /tmp/tmp0stkzn1d_test.go:34:21: invalid operation: digit == "A" (mismatched types
    rune and untyped string)

    /tmp/tmp0stkzn1d_test.go:34:37: invalid operation: digit == "B" (mismatched types
    rune and untyped string)

    /tmp/tmp0stkzn1d_test.go:34:53: invalid operation: digit == "C" (mismatched types
    rune and untyped string)

    /tmp/tmp0stkzn1d_test.go:34:69: invalid operation: digit == "D" (mismatched types
    rune and untyped string)

    /tmp/tmp0stkzn1d_test.go:34:85: invalid operation: digit == "E" (mismatched types
    rune and untyped string)

    /tmp/tmp0stkzn1d_test.go:34:101: invalid operation: digit == "F" (mismatched types
    rune and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A') + 1\n   \
    \ }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpzmosy36c_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpzmosy36c_test.go:55: expected\
    \ '%!s(int=2)', got '%!s(int=-44)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpzmosy36c_test.go:55: expected '%!s(int=4)', got '%!s(int=-28)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpzmosy36c_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpzmosy36c_test.go:55: expected '%!s(int=6)', got '%!s(int=-94)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpzmosy36c_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=-188)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074581
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    if n < 2 {\n        return 0\n    }\n    d := int(num[0])\n\
    \    if d > 'F' {\n        return 0\n    }\n    if d == 'A' {\n        return\
    \ hex_key(num[1:])\n    }\n    if d == 'B' {\n        return hex_key(num[2:])\n\
    \    }\n    if d == 'C' {\n        return hex_key(num[3:])\n    }\n    if d ==\
    \ 'D' {\n        return hex_key(num[4:])\n    }\n    if d == 'E' {\n        return\
    \ hex_key(num[5:])\n    }\n    if d == 'F' {\n        return hex_key(num[6:])\n\
    \    }\n    if d == '0' {\n        return hex_key(num[7:])\n    }\n    if d ==\
    \ '1' {\n        return hex_key(num[8:])\n    }\n    if d == '2' {\n        return\
    \ hex_key(num[9:])\n    }\n    if d == '3' {\n        return hex_key(num[10:])\n\
    \    }\n    if d == '4' {\n        return hex_key(num[11:])\n    }\n    if d ==\
    \ '5' {\n        return hex_key(num[12:])\n    }\n    if d == '6' {\n        return\
    \ hex_key(num[13:])\n    }\n    if d == '7' {\n        return hex_key(num[14:])\n\
    \    }\n    if d == '8' {\n        return hex_key(num[15:])\n    }\n    if d ==\
    \ '9' {\n        return hex_key(num[16:])\n    }\n    if d == 'A' {\n        return\
    \ hex_key(num[2:])\n    }\n    if d == 'B' {\n        return hex_key(num[3:])\n\
    \    }\n    if d == 'C' {\n        return hex_key(num[4:])\n    }\n    if d ==\
    \ 'D' {\n        return hex_key(num[5:])\n    }\n    if d == 'E' {\n        return\
    \ hex_key(num[6:])\n    }\n    if d == 'F' {\n        return hex_key(num[7:])\n\
    \    }\n    if d == '0' {\n        return hex_key(num[8:])\n    }\n    if d ==\
    \ '1' {\n        return hex_key(num[9:])\n    }\n    if d == '2' {\n        return\
    \ hex_key(num[10:])\n    }\n    if d == '3' {\n        return hex_key(num[11:])\n\
    \    }\n    if d == '4' {\n        return hex_key(num[12:])\n    }\n    if d ==\
    \ '5' {\n        return hex_key(num[13:])\n    }\n    if d == '6' {\n        return\
    \ hex_key(num[14:])\n    }\n    if d == '7' {\n        return \nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnd_z8gcl_test.go:127:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" || digit ==\
    \ \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\"\
    \ {\n            result += 1\n        }\n    }\n    return result\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl3cs34g_test.go:30:9: no new variables on left side of :=

    /tmp/tmpdl3cs34g_test.go:30:12: undefined: strings

    /tmp/tmpdl3cs34g_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpdl3cs34g_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpdl3cs34g_test.go:35:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpdl3cs34g_test.go:35:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpdl3cs34g_test.go:35:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpdl3cs34g_test.go:35:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime[0] = 2\n    prime[1] = 3\n    prime[2] = 5\n    prime[3] = 7\n    prime[4]\
    \ = 11\n    prime[5] = 13\n    prime[6] = 17\n    prime[7] = 19\n    prime[8]\
    \ = 23\n    prime[9] = 29\n    prime[10] = 31\n    prime[11] = 31\n    prime[12]\
    \ = 37\n    prime[13] = 39\n    prime[14] = 41\n    prime[15] = 43\n    prime[16]\
    \ = 47\n    prime[17] = 53\n    prime[18] = 59\n    prime[19] = 61\n    prime[20]\
    \ = 67\n    prime[21] = 71\n    prime[22] = 73\n    prime[23] = 79\n    prime[24]\
    \ = 83\n    prime[25] = 89\n    prime[26] = 97\n    prime[27] = 101\n    prime[28]\
    \ = 107\n    prime[29] = 113\n    prime[30] = 119\n    prime[31]\n    prime[32]\
    \ = 127\n    prime[33] = 131\n    prime[34] = 137\n    prime[35] = 139\n    prime[36]\
    \ = 147\n    prime[37] = 151\n    prime[38] = 157\n    prime[39] = 163\n    prime[40]\
    \ = 173\n    prime[41] = 179\n    prime[42] = 181\n    prime[43] = 191\n    prime[44]\
    \ = 193\n    prime[45] = 197\n    prime[46] = 199\n    prime[47] = 211\n    prime[48]\
    \ = 223\n    prime[49] = 229\n    prime[50] = 241\n    prime[51] = 251\n    prime[52]\
    \ = 257\n    prime[53] = 263\n    prime[54] = 269\n    prime[55] = 271\n    prime[56]\
    \ = 277\n    prime[57] = 283\n    prime[58] = 289\n    prime[59] = 293\n    prime[60]\
    \ = 297\n    prime[61] = 303\n    prime[62] = 309\n    prime[63] = 317\n    prime[64]\
    \ = 319\n    prime[65] = 329\n    prime[66] = 331\n    prime[67] = 333\n    prime[68]\
    \ = 359\n    prime[69] = 377\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch6a1ju9_test.go:103:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"1\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"3\", -1)\n    num := strings.Replace(num, \"D\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"E\", \"5\", -1)\n    num := strings.Replace(num, \"\
    F\", \"6\", -1)\n    num := strings.Replace(num, \"1\", \"2\", -1)\n    num :=\
    \ strings.Replace(num, \"2\", \"3\", -1)\n    num := strings.Replace(num, \"3\"\
    , \"5\", -1)\n    num := strings.Replace(num, \"4\", \"7\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"11\", -1)\n    num := strings.Replace(num, \"6\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"19\", -1)\n    num := strings.Replace(num, \"9\", \"23\", -1)\n   \
    \ num := strings.Replace(num, \"10\", \"29\", -1)\n    num := strings.Replace(num,\
    \ \"11\", \"31\", -1)\n    num := strings.Replace(num, \"12\", \"37\", -1)\n \
    \   num := strings.Replace(num, \"13\", \"41\", -1)\n    num := strings.Replace(num,\
    \ \"14\", \"43\", -1)\n    num := strings.Replace(num, \"15\", \"47\", -1)\n \
    \   num := strings.Replace(num, \"16\", \"53\", -1)\n    num := strings.Replace(num,\
    \ \"17\", \"59\", -1)\n    num := strings.Replace(num, \"18\", \"61\", -1)\n \
    \   num := strings.Replace(num, \"19\", \"67\", -1)\n    num := strings.Replace(num,\
    \ \"20\", \"71\", -1)\n    num := strings.Replace(num, \"21\", \"73\", -1)\n \
    \   num := strings.Replace(num, \"22\", \"79\", -1)\n    num := strings.Replace(num,\
    \ \"23\", \"83\", -1)\n    num := strings.Replace(num, \"24\", \"89\", -1)\n \
    \   num := strings.Replace(num, \"25\", \"97\", -1)\n    num := strings.Replace(num,\
    \ \"26\", \"101\", -1)\n    num := strings.Replace(num, \"27\", \"103\", -1)\n\
    \    num := strings.Replace(num, \"28\", \"107\", -1)\n    num := strings.Replace(num,\
    \ \"29\", \"109\", -1)\n    num := strings.Replace(num, \"30\", \"111\", -1)\n\
    \    num := strings.Replace(num, \"31\", \"113\", -1)\n    num := strings.Replace(num,\
    \ \"32\", \"117\", -1)\n    num := strings.Replace(num, \"33\", \"119\", -1)\n\
    \    num := strings.Replace\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zlfj4b8_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074588
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    i := 0\n    for ; i < len(num); i++ {\n        if num[i] >= '0' &&\
    \ num[i] <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\
    \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmper5vtyuo_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmper5vtyuo_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmper5vtyuo_test.go:58: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmper5vtyuo_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmper5vtyuo_test.go:58: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmper5vtyuo_test.go:58:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, c := range num {\n        count += int(c) - int(`A`) - int(`a`)\n\
    \    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate :=\
    \ hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstshkok2_test.go:32:31: cannot convert `A` (untyped string constant "A")
    to type int

    /tmp/tmpstshkok2_test.go:32:42: cannot convert `a` (untyped string constant "a")
    to type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var\
    \ count int = 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate\
    \ := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n \
    \    { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmptke48s7e_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmptke48s7e_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074580
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.TrimSpace(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num, \"\
    5\", \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"7\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"8\", -1)\n    num := strings.Replace(num, \"9\", \"9\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num\
    \ := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num, \"\
    /\", \"0\", -1)\n    num := strings.Replace(num, \"*\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"=\", \"0\", -1)\n    num := strings.Replace(num, \"%\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"(\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"[\", \"0\", -1)\n    num := strings.Replace(num, \"]\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"{\", \"0\", -1)\n    num := strings.Replace(num, \"\
    }\", \"0\", -1)\n    num := strings.Replace(num, \"<\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \">\", \"0\", -1)\n    num := strings.Replace(num, \"!\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"?\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"@\", \"0\", -1)\n    num := strings.Replace(num, \"#\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"$\", \"0\", -1)\n    num := strings.Replace(num, \"\
    %\", \"0\", -1)\n    num := strings.Replace(num, \"^\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"&\", \"0\", -1)\n    num := strings.Replace(num, \"*\"\
    , \"0\", \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdv5ymhzz_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            continue\n        }\n        count += int(v)\n    }\n    return count\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp16c7kfeh_test.go:30:9: no new variables on left side of :=

    /tmp/tmp16c7kfeh_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"1\", -1)\n    num\
    \ := strings.Replace(num, \"1\", \"2\", -1)\n    num := strings.Replace(num, \"\
    2\", \"3\", -1)\n    num := strings.Replace(num, \"3\", \"4\", -1)\n    num :=\
    \ strings.Replace(num, \"4\", \"5\", -1)\n    num := strings.Replace(num, \"5\"\
    , \"6\", -1)\n    num := strings.Replace(num, \"6\", \"7\", -1)\n    num := strings.Replace(num,\
    \ \"7\", \"8\", -1)\n    num := strings.Replace(num, \"8\", \"9\", -1)\n    num\
    \ := strings.Replace(num, \"9\", \"10\", -1)\n    num := strings.Replace(num,\
    \ \"10\", \"11\", -1)\n    num := strings.Replace(num, \"11\", \"12\", -1)\n \
    \   num := strings.Replace(num, \"12\", \"13\", -1)\n    num := strings.Replace(num,\
    \ \"13\", \"14\", -1)\n    num := strings.Replace(num, \"14\", \"15\", -1)\n \
    \   num := strings.Replace(num, \"15\", \"16\", -1)\n    num := strings.Replace(num,\
    \ \"16\", \"17\", -1)\n    num := strings.Replace(num, \"17\", \"18\", -1)\n \
    \   num := strings.Replace(num, \"18\", \"19\", -1)\n    num := strings.Replace(num,\
    \ \"19\", \"20\", -1)\n    num := strings.Replace(num, \"20\", \"21\", -1)\n \
    \   num := strings.Replace(num, \"21\", \"22\", -1)\n    num := strings.Replace(num,\
    \ \"22\", \"23\", -1)\n    num := strings.Replace(num, \"23\", \"24\", -1)\n \
    \   num := strings.Replace(num, \"24\", \"25\", -1)\n    num := strings.Replace(num,\
    \ \"25\", \"26\", -1)\n    num := strings.Replace(num, \"26\", \"27\", -1)\n \
    \   num := strings.Replace(num, \"27\", \"28\", -1)\n    num := strings.Replace(num,\
    \ \"28\", \"29\", -1)\n    num := strings.Replace(num, \"29\", \"30\", -1)\n \
    \   num := strings.Replace(num, \"30\", \"31\", -1)\n    num := strings.Replace(num,\
    \ \"31\", \"32\", -1)\n    num := strings.Replace(num, \"32\", \"33\", -1)\n \
    \   num := strings.\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxyevmdnl_test.go:71:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, c := range num {\n        if c >= '0' && c <= '9' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmprqy91l13_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmprqy91l13_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmprqy91l13_test.go:57: expected '%!s(int=4)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmprqy91l13_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4 (0.00s)\n\
    \        tmprqy91l13_test.go:57: expected '%!s(int=6)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmprqy91l13_test.go:57:\
    \ expected '%!s(int=12)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    result := 0\n    \n    for i\
    \ := 0; i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" {\n \
    \           result += 1\n        }\n        if digit == \"B\" {\n            result\
    \ += 1\n        }\n        if digit == \"C\" {\n            result += 1\n    \
    \    }\n        if digit == \"D\" {\n            result += 1\n        }\n    \
    \    if digit == \"E\" {\n            result += 1\n        }\n        if digit\
    \ == \"F\" {\n            result += 1\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfmg5sue8_test.go:30:9: no new variables on left side of :=

    /tmp/tmpfmg5sue8_test.go:30:12: undefined: strings

    /tmp/tmpfmg5sue8_test.go:36:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmpfmg5sue8_test.go:39:21: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmpfmg5sue8_test.go:42:21: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmpfmg5sue8_test.go:45:21: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmpfmg5sue8_test.go:48:21: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmpfmg5sue8_test.go:51:21: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, c := range num {\n        if c >= '0' && c <= '9' {\n     \
    \       n += int(c - '0')\n        } else if c >= 'A' && c <= 'F' {\n        \
    \    n += int(c - 'A') + 10\n        } else if c >= 'a' && c <= 'f' {\n      \
    \      n += int(c - 'a') + 10\n        } else {\n            fmt.Println(\"Invalid\
    \ input\")\n        }\n    }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpa7vmnhii_test.go:63: expected '%!s(int=1)', got '%!s(int=21)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpa7vmnhii_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=29)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpa7vmnhii_test.go:63: expected '%!s(int=4)', got '%!s(int=65)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpa7vmnhii_test.go:63:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpa7vmnhii_test.go:63: expected '%!s(int=6)', got '%!s(int=120)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpa7vmnhii_test.go:63:\
    \ expected '%!s(int=12)', got '%!s(int=240)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074591
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, r := range num {\n     \
    \   if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qeoci93_test.go:30:9: no new variables on left side of :=

    /tmp/tmp4qeoci93_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n     \
    \   if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp88q38rvw_test.go:30:9: no new variables on left side of :=

    /tmp/tmp88q38rvw_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074577
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    i := 0\n    for ; i < len(num); i++ {\n        count += int(num[i])\
    \ - 'A' + 1\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n\
    \  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"\
    ), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     {\
    \ actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmps0jch_j5_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmps0jch_j5_test.go:56: expected\
    \ '%!s(int=2)', got '%!s(int=-44)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmps0jch_j5_test.go:56: expected '%!s(int=4)', got '%!s(int=-28)'\n \
    \   --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmps0jch_j5_test.go:56:\
    \ expected '%!s(int=2)', got '%!s(int=-60)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmps0jch_j5_test.go:56: expected '%!s(int=6)', got '%!s(int=-94)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmps0jch_j5_test.go:56:\
    \ expected '%!s(int=12)', got '%!s(int=-188)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    num := strings.Replace(num, \"A\", \"10\", -1)\n\
    \    num := strings.Replace(num, \"B\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"C\", \"12\", -1)\n    num := strings.Replace(num, \"D\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"E\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"F\", \"15\", -1)\n    num := strings.Replace(num, \"0\", \"10\", -1)\n   \
    \ num := strings.Replace(num, \"1\", \"11\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"12\", -1)\n    num := strings.Replace(num, \"3\", \"13\", -1)\n   \
    \ num := strings.Replace(num, \"4\", \"14\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"15\", -1)\n    num := strings.Replace(num, \"6\", \"16\", -1)\n   \
    \ num := strings.Replace(num, \"7\", \"17\", -1)\n    num := strings.Replace(num,\
    \ \"8\", \"18\", -1)\n    num := strings.Replace(num, \"9\", \"19\", -1)\n   \
    \ num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"+\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num, \"\
    *\", \"0\", -1)\n    num := strings.Replace(num, \"=\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"%\", \"0\", -1)\n    num := strings.Replace(num, \"(\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"[\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"]\", \"0\", -1)\n    num := strings.Replace(num, \"{\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"}\", \"0\", -1)\n    num := strings.Replace(num, \"\
    <\", \"0\", -1)\n    num := strings.Replace(num, \">\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"!\", \"0\", -1)\n    num := strings.Replace(num, \"?\"\
    , \"0\", -1)\n    num := strings.Replace(num, \"#\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"$\", \"0\", -1)\n    num := strings.Replace(num, \"%\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"0\", -1)\n    num := strings.Replace(num, \"\
    (\", \"0\", -1)\n    num := strings.Replace(num, \"[\", \"0\", -1)\n    num :=\
    \ strings.Replace(num, \"]\", \"0\", -1)\n    \nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2xofia95_test.go:71:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    hexDigits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F}\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\
    \ 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\
    \ 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\
    \ 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\
    \ 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613,\
    \ 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719,\
    \ 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\
    \ 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\
    \ 947, 953, 967, 971, 977, 983, 991, 997}\n    \n    primesCount := 0\n    \n\
    \    for _, prime := range primes {\n        if n%prime == 0 {\n            primesCount++\n\
    \        }\n    }\n    \n    return primesCount\n}\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe1t4c3ak_test.go:31:5: hexDigits declared but not used

    /tmp/tmpe1t4c3ak_test.go:31:54: undefined: A

    /tmp/tmpe1t4c3ak_test.go:31:57: undefined: B

    /tmp/tmpe1t4c3ak_test.go:31:60: undefined: C

    /tmp/tmpe1t4c3ak_test.go:31:63: undefined: D

    /tmp/tmpe1t4c3ak_test.go:31:66: undefined: E

    /tmp/tmpe1t4c3ak_test.go:31:69: undefined: F

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, r := range num {\n        if r == '0' {\n            continue\n\
    \        }\n        count += int(unicode.ToLower(r) - 'a')\n    }\n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpva97_gys_test.go:35:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            n = n + 1\n        }\n  \
    \  }\n    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpo9w9bgib_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpo9w9bgib_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074579
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C'\
    \ || r == 'D' || r == 'E' || r == 'F' {\n            continue\n        }\n   \
    \     count += int(unicode.ToLower(r) - '0')\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48mpe28__test.go:35:22: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := 0\n    for _, r := range num {\n        n += int(rune(r) - '0')\n    }\n\
    \    return n\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpsucyn_gd_test.go:55: expected '%!s(int=1)', got '%!s(int=35)'\n  \
    \  --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=36)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=4)', got '%!s(int=100)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpsucyn_gd_test.go:55: expected '%!s(int=6)', got '%!s(int=162)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpsucyn_gd_test.go:55:\
    \ expected '%!s(int=12)', got '%!s(int=324)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074582
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int, n)\n  \
    \  prime[0] = prime[1] = 2\n    prime[2] = prime[3] = 5\n    prime[4] = prime[5]\
    \ = 7\n    prime[6] = prime[7] = 11\n    prime[8] = prime[9] = 13\n    prime[10]\
    \ = prime[11] = 17\n    prime[12] = prime[13] = 19\n    prime[14] = prime[15]\
    \ = 23\n    prime[16] = prime[17] = 29\n    prime[18] = prime[19] = 31\n    prime[20]\
    \ = prime[21] = 37\n    prime[22] = prime[23] = 41\n    prime[24] = prime[25]\
    \ = 43\n    prime[26] = prime[27] = 47\n    prime[28] = prime[29] = 53\n    prime[30]\
    \ = prime[31] = 51\n    prime[32] = prime[33] = 59\n    prime[34] = prime[35]\
    \ = 61\n    prime[36] = prime[37] = 67\n    prime[38] = prime[39] = 71\n    prime[40]\
    \ = prime[41] = 73 \n    prime[42] = prime[43] = 79\n    prime[44] = prime[45]\
    \ = 83\n    prime[46] = prime[47] = 89\n    prime[48] = prime[49] = 97\n    prime[50]\
    \ = prime[51]\n    prime[52]\n    prime[53]\n    prime[54]\n    prime[55]\n  \
    \  prime[56]\n    prime[57]\n    prime[58]\n    prime[59]\n    prime[60]\n   \
    \ prime[61]\n    prime[62]\n    prime[63]\n    prime[64]\n    prime[65]\n    prime[66]\n\
    \    prime[67]\n    prime[68]\n    prime[69]\n    prime[70]\n    prime[71]\n \
    \   prime[72]\n    prime[73]\n    prime[74]\n    prime[75]\n    prime[76]\n  \
    \  prime[77]\n    prime[78]\n    prime[79]\n    prime[80]\n    prime[81]\n   \
    \ prime[82]\n    prime[83]\n    prime[84]\n    prime[85]\n    prime[86]\n    prime[87]\n\
    \    prime[88]\n    prime[89]\n    prime[90]\n\nfunc TestHex_Key(t *testing.T)\
    \ {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ej90qtp_test.go:33:25: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    \n    for _, char := range num\
    \ {\n        if char == 'A' || char == 'B' || char == 'C' || char == 'D' || char\
    \ == 'E' || char == 'F' {\n            count++\n        }\n    }\n    \n    return\
    \ count\n}\n\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     { actual:\
    \ candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj1x4zwst_test.go:30:9: no new variables on left side of :=

    /tmp/tmpj1x4zwst_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" || digit ==\
    \ \"B\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"\
    1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4\
    \ },\n     { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"\
    123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmper86oxit_test.go:30:9: no new variables on left side of :=

    /tmp/tmper86oxit_test.go:30:12: undefined: strings

    /tmp/tmper86oxit_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmper86oxit_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    n := len(num)\n    count := 0\n    for i := 0;\
    \ i < n; i++ {\n        digit := num[i]\n        if digit == \"A\" || digit ==\
    \ \"B\" || digit == \"C\" || digit == \"D\" || digit == \"E\" || digit == \"F\"\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprsj1y389_test.go:30:9: no new variables on left side of :=

    /tmp/tmprsj1y389_test.go:30:12: undefined: strings

    /tmp/tmprsj1y389_test.go:35:21: invalid operation: digit == "A" (mismatched types
    byte and untyped string)

    /tmp/tmprsj1y389_test.go:35:37: invalid operation: digit == "B" (mismatched types
    byte and untyped string)

    /tmp/tmprsj1y389_test.go:35:53: invalid operation: digit == "C" (mismatched types
    byte and untyped string)

    /tmp/tmprsj1y389_test.go:35:69: invalid operation: digit == "D" (mismatched types
    byte and untyped string)

    /tmp/tmprsj1y389_test.go:35:85: invalid operation: digit == "E" (mismatched types
    byte and untyped string)

    /tmp/tmprsj1y389_test.go:35:101: invalid operation: digit == "F" (mismatched types
    byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    count\
    \ := 0\n    for _, char := range num {\n        if char == 'A' || char == 'B'\
    \ || char == 'C' || char == 'D' || char == 'E' || char == 'F' {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t *testing.T) {\n \
    \ candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AB\"), expected:\
    \ 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"\
    ABED1A33\"), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n\
    \     { actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual:\
    \ candidate(\"112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpnyttgo23_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpnyttgo23_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestHex_Key/test_num__2 (0.00s)\n\
    \        tmpnyttgo23_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpnyttgo23_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    count := 0\n    i := 0\n    for ; i < n; i++ {\n        count\
    \ += int(num[i]) - 'A'\n    }\n    if count < 2 {\n        return count\n    }\n\
    \    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n  \
    \  }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(num[i]) - 'A'\n    if count < 2 {\n        return count\n\
    \    }\n    count += int(\nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn7cu46wi_test.go:128:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
- exit_code: 2
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    num\
    \ := strings.ToUpper(num)\n    count := 0\n    for _, r := range num {\n     \
    \   if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F' {\n\
    \            count++\n        }\n    }\n    return count\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qeoci93_test.go:30:9: no new variables on left side of :=

    /tmp/tmp4qeoci93_test.go:30:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074579
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    prime := 0\n    i := 0\n    for ; i < n; i++ {\n        digit\
    \ := int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n   \
    \     }\n        if digit == 0 || digit == 1 {\n            continue\n       \
    \ }\n        prime += digit\n    }\n    return prime\n}\n\nfunc TestHex_Key(t\
    \ *testing.T) {\n  candidate := hex_key\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"), expected: 2 },\n \
    \    { actual: candidate(\"ABED1A33\"), expected: 4 },\n     { actual: candidate(\"\
    2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"), expected:\
    \ 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHex_Key (0.00s)\n    --- FAIL: TestHex_Key/test_num__0 (0.00s)\n\
    \        tmpjvrau4gt_test.go:64: expected '%!s(int=1)', got '%!s(int=111)'\n \
    \   --- FAIL: TestHex_Key/test_num__1 (0.00s)\n        tmpjvrau4gt_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=226)'\n    --- FAIL: TestHex_Key/test_num__2\
    \ (0.00s)\n        tmpjvrau4gt_test.go:64: expected '%!s(int=4)', got '%!s(int=404)'\n\
    \    --- FAIL: TestHex_Key/test_num__3 (0.00s)\n        tmpjvrau4gt_test.go:64:\
    \ expected '%!s(int=2)', got '%!s(int=156)'\n    --- FAIL: TestHex_Key/test_num__4\
    \ (0.00s)\n        tmpjvrau4gt_test.go:64: expected '%!s(int=6)', got '%!s(int=770)'\n\
    \    --- FAIL: TestHex_Key/test_num__5 (0.00s)\n        tmpjvrau4gt_test.go:64:\
    \ expected '%!s(int=12)', got '%!s(int=1540)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074591
- exit_code: 1
  program: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You have been tasked to write a function that receives \n// a hexadecimal number\
    \ as a string and counts the number of hexadecimal \n// digits that are primes\
    \ (prime number, or a prime, is a natural number \n// greater than 1 that is not\
    \ a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17,...\n// So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume\
    \ the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are\
    \ always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    n\
    \ := len(num)\n    i := 0\n    prime := 0\n    primes := []int{2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    for ; i < n; i++ {\n        if num[i] == 'A' || num[i] == 'B' || num[i]\
    \ == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F' {\n            prime\
    \ = primes[len(primes)-1]\n        } else {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if prime == 0 {\n            prime = primes[len(primes)-2]\n\
    \        }\n        if prime % 2 == 0 {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '0' {\n            prime = primes[len(primes)-2]\n\
    \        }\n        if num[i] == '1' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '2' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '3' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '4' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '5' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '6' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '7' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '8' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '9' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == 'A' {\n            prime = primes[len(primes)-2]\n\
    \        }\n        if num[i] == 'B' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == 'C' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == 'D' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == 'E' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == 'F' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if num[i] == '0' {\n            prime = primes[len(primes)-2]\n\
    \        }\n        if num[i] == '1' {\n            prime = primes[len(primes)-1]\n\
    \        }\n        if \nfunc TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"AB\"), expected: 1 },\n     {\
    \ actual: candidate(\"1077E\"), expected: 2 },\n     { actual: candidate(\"ABED1A33\"\
    ), expected: 4 },\n     { actual: candidate(\"2020\"), expected: 2 },\n     {\
    \ actual: candidate(\"123456789ABCDEF0\"), expected: 6 },\n     { actual: candidate(\"\
    112233445566778899AABBCCDDEEFF00\"), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1z77d0j4_test.go:101:6: expected ''('', found TestHex_Key

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074590
