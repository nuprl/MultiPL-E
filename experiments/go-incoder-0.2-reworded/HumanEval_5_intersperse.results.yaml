language: go_test.go
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2-1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpav_jq5yv_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpav_jq5yv_test.go:30\
    \ +0x485\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpemtrv7j9_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpemtrv7j9_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if i != 0 {\n            result[index] = numbers[i]\n\
    \            index++\n        }\n        result[index] = delimeter\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpetg6urgx_test.go:25\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpetg6urgx_test.go:39\
    \ +0x432\ntesting.tRunner(0xc0001924e0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp4rj_e1bs_test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp4rj_e1bs_test.go:35\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl2unqhrm_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl2unqhrm_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        if i+1 < len(numbers) {\n\
    \            result[index] += delimeter\n        }\n        index++\n    }\n \
    \   return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp1u52qq7x_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmp1u52qq7x_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n            result[index] = delimeter\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001c6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001c6030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpahvb78c6_test.go:24\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpahvb78c6_test.go:39\
    \ +0x417\ntesting.tRunner(0xc000185040, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp_dylgic__test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp_dylgic__test.go:36\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gct6q24_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gct6q24_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] = number\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpp4e8_9yy_test.go:18\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpp4e8_9yy_test.go:31\
    \ +0x465\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := range result {\n    \
    \    result[i] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpgejefe_w_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpgejefe_w_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpx41cm30p_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpx41cm30p_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc00019b040, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i%len(result)] = number\n        if i < len(numbers)-1\
    \ {\n            result[i%len(result)] += delimeter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpqr4lc8tm_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpqr4lc8tm_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] = number\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpp4e8_9yy_test.go:18\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpp4e8_9yy_test.go:31\
    \ +0x465\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2+1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp9uau11c6_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp9uau11c6_test.go:30\
    \ +0x485\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            result = append(result, numbers...)\n            index =\
    \ 0\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp0dck12n__test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp0dck12n__test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmuo0iq9_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := range result {\n    \
    \    result[i] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpgejefe_w_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpgejefe_w_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if i != 0 {\n            result[i-1] = delimeter\n        }\n\
    \        result[i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpuhjnd0m9_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpuhjnd0m9_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    index := 0\n    for\
    \ _, number := range numbers {\n        result[index] = number\n        index++\n\
    \        if index%delimeter == 0 {\n            index = 0\n            result[index]\
    \ = number\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpix3_8xow_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpix3_8xow_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    index := 0\n    for\
    \ _, number := range numbers {\n        result[index] = number\n        index++\n\
    \        if index%delimeter == 0 {\n            index++\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpkqiicgjd_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpkqiicgjd_test.go:35\
    \ +0x434\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2-1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpav_jq5yv_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpav_jq5yv_test.go:30\
    \ +0x485\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return append(numbers, numbers[0])\n    }\n\
    \    result := make([]int, len(numbers))\n    index := 0\n    for i := range numbers\
    \ {\n        result[index] = numbers[i]\n        index++\n        if index ==\
    \ delimeter {\n            index = 0\n        }\n    }\n    return result\n}\n\
    \nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmph5iscz_j_test.go:47: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmph5iscz_j_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    index := 0\n    for\
    \ _, number := range numbers {\n        result[index] = number\n        index++\n\
    \        if index%delimeter == 0 {\n            index++\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpkqiicgjd_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpkqiicgjd_test.go:35\
    \ +0x434\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return append(numbers, numbers[0])\n    }\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp_rlthrno_test.go:23\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp_rlthrno_test.go:37\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i] = numbers[i]\n        result[i+1] = numbers[i+1]\n\
    \    }\n    for i := 0; i < len(numbers); i += 2 {\n        result[i+2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp1xxp2px0_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp1xxp2px0_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc0001a01a0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n        if i+1 < len(numbers) {\n   \
    \         result[i+1] = delimeter\n        }\n    }\n    return result\n}\n\n\
    func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp_am8_kyk_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_am8_kyk_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        index++\n        if index\
    \ >= len(numbers) {\n            index = 0\n            result[index] = delimeter\n\
    \            index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp88y_md0s_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp88y_md0s_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := range result {\n    \
    \    result[i] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpgejefe_w_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpgejefe_w_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl2unqhrm_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl2unqhrm_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        if i+1 < len(numbers) {\n\
    \            result[index] += delimeter\n        }\n        index++\n    }\n \
    \   return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpwz85d15q_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpwz85d15q_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpu8ifk4mw_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpu8ifk4mw_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp4rj_e1bs_test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp4rj_e1bs_test.go:35\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2-1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpav_jq5yv_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpav_jq5yv_test.go:30\
    \ +0x485\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl2unqhrm_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl2unqhrm_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001d8030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001d8030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6oerxnsz_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6oerxnsz_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc000199040, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if i != 0 {\n            result[i-1] = delimeter\n        }\n\
    \        result[i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpuhjnd0m9_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpuhjnd0m9_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpu8ifk4mw_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpu8ifk4mw_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpemtrv7j9_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpemtrv7j9_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubor5dbp_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := range result {\n    \
    \    result[i] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpgejefe_w_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpgejefe_w_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpu8ifk4mw_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpu8ifk4mw_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpb5gpulli_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpb5gpulli_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2+1] = number\n        result[i*2] = delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp9uau11c6_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp9uau11c6_test.go:30\
    \ +0x485\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubor5dbp_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if i > 0 {\n            result[i-1] = delimeter\n        }\n\
    \        result[i] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmploqpbps0_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=8)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmploqpbps0_test.go:39:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpb5gpulli_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpb5gpulli_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    index := 0\n    for\
    \ _, number := range numbers {\n        result[index] = number\n        index++\n\
    \        if index < len(numbers) {\n            result[index] = delimeter\n  \
    \          index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpji7tvapw_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpji7tvapw_test.go:35\
    \ +0x445\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpb5gpulli_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpb5gpulli_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return append(numbers, numbers[0])\n    }\n\
    \    result := make([]int, len(numbers))\n    index := 0\n    for _, number :=\
    \ range numbers {\n        result[index] = number\n        index++\n        if\
    \ index%delimeter == 0 {\n            result = append(result, numbers[index])\n\
    \            index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 3 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 3\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5137c0,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137c0, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp75a840cq_test.go:26\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp75a840cq_test.go:42\
    \ +0x56a\ntesting.tRunner(0xc0001a61a0, 0x5290e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gct6q24_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gct6q24_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        if i+1 < len(numbers) {\n\
    \            result[index+1] = delimeter\n            index++\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmp9d5pnmfh_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp9d5pnmfh_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index\
    \ < len(numbers) {\n            result[index] = delimeter\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpqrj38zqg_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpqrj38zqg_test.go:38\
    \ +0x414\ntesting.tRunner(0xc0001924e0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] = number\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpp4e8_9yy_test.go:18\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpp4e8_9yy_test.go:31\
    \ +0x465\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            result = append(result, numbers...)\n            index =\
    \ index/delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpg8bwpyz0_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpg8bwpyz0_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            result = append(result, numbers...)\n            index =\
    \ index/delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpg8bwpyz0_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpg8bwpyz0_test.go:45:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp4rj_e1bs_test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp4rj_e1bs_test.go:35\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = numbers[i]\n    }\n    for i := range result {\n    \
    \    result[i] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpgejefe_w_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=13) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpgejefe_w_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=4) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubor5dbp_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpu8ifk4mw_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpu8ifk4mw_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp6mrlg274_test.go:19\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp6mrlg274_test.go:33\
    \ +0x434\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmuo0iq9_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp4rj_e1bs_test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp4rj_e1bs_test.go:35\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmuo0iq9_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    index := 0\n    for\
    \ _, number := range numbers {\n        result[index] = number\n        index++\n\
    \        if index%delimeter == 0 {\n            index++\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpkqiicgjd_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpkqiicgjd_test.go:35\
    \ +0x434\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubor5dbp_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n       \
    \ } else {\n            result[i] = numbers[i] + delimeter\n        }\n      \
    \  index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpb5gpulli_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpb5gpulli_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl2unqhrm_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl2unqhrm_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \        result[i+2] += delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpubor5dbp_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        if i != 0 {\n            result[index] = numbers[i]\n       \
    \     index++\n        }\n        result[index] = delimeter\n        index++\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmptw3e5v_f_test.go:24\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmptw3e5v_f_test.go:38\
    \ +0x432\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2+0] = number\n        if i+1 < len(numbers)\
    \ {\n            result[i*2+1] = numbers[i+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n   \
    \  { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8,\
    \ 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2,\
    \ 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpvmywgwu6_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpvmywgwu6_test.go:32\
    \ +0x4a5\ntesting.tRunner(0xc0001a01a0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return append(numbers, numbers[0])\n    }\n\
    \    result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i <\
    \ len(numbers); i++ {\n        if index == 0 {\n            result[i] = numbers[i]\n\
    \        } else {\n            result[i] = numbers[i] + delimeter\n        }\n\
    \        index++\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpp96ktot5_test.go:48: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=14)\
    \ %!s(int=11) %!s(int=10)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n\
    \        tmpp96ktot5_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)\
    \ %!s(int=2)]', got '[%!s(int=2) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp_dylgic__test.go:21\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp_dylgic__test.go:36\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index = 0\n            result[index] = number\n        \
    \    index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpxmrwvs4w_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpxmrwvs4w_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*delimeter+delimeter] = number\n    }\n   \
    \ return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpgfeng7ub_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpgfeng7ub_test.go:29\
    \ +0x425\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[i] = numbers[i]\n    }\n    for i := 0; i < len(numbers);\
    \ i += 2 {\n        result[i+1] = delimeter\n        result[i+2] = numbers[i]\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpl2unqhrm_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpl2unqhrm_test.go:33\
    \ +0x49f\ntesting.tRunner(0xc000103380, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpx41cm30p_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpx41cm30p_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc00019b040, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpyneze0fl_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpyneze0fl_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a0340, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for i := 0; i < len(numbers);\
    \ i++ {\n        result[index] = numbers[i]\n        index++\n        if index\
    \ >= len(numbers) {\n            index = 0\n            result[index] = delimeter\n\
    \            index++\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmpukogi8f2_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpukogi8f2_test.go:46:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i*2+delimeter] = number\n        result[i*2+delimeter+1]\
    \ = number\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T)\
    \ {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{},\
    \ 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpdrrm3az4_test.go:16\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpdrrm3az4_test.go:30\
    \ +0x465\ntesting.tRunner(0xc0001a0340, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) < 2 {\n        return numbers\n    }\n   \
    \ result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i += delimeter\n    }\n    return\
    \ result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{}\
    \ },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6,\
    \ 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2,\
    \ 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpu8ifk4mw_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpu8ifk4mw_test.go:34\
    \ +0x3e5\ntesting.tRunner(0xc0001a01a0, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 2
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    for i, number :=\
    \ range numbers {\n        result[i] += delimeter\n        result[i+1] += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmuo0iq9_test.go:15:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  if len(numbers) == 1 {\n        return append(numbers, numbers[0])\n    }\n\
    \    result := make([]int, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        result[i] = number\n        i = i + 1\n        if i == delimeter\
    \ {\n            i = 0\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t\
    \ *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1\
    \ (0.00s)\n        tmptgjjizf2_test.go:47: expected '[%!s(int=5) %!s(int=8) %!s(int=6)\
    \ %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3)\
    \ %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmptgjjizf2_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073483
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    result := make([]int, len(numbers))\n    i := 0\n    for _,\
    \ number := range numbers {\n        result[i] = number\n        i += delimeter\n\
    \    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate\
    \ := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7),\
    \ expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected:\
    \ []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2),\
    \ expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 4 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmp7gmjjkdh_test.go:17\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmp7gmjjkdh_test.go:31\
    \ +0x425\ntesting.tRunner(0xc0001924e0, 0x528020)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Insert a number 'delimeter' between every two consecutive elements of input\
    \ list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1,\
    \ 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter\
    \ int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n  \
    \  result := make([]int, len(numbers))\n    index := 0\n    for _, number := range\
    \ numbers {\n        result[index] = number\n        index++\n        if index%delimeter\
    \ == 0 {\n            index++\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5,\
    \ 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2,\
    \ 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5127c0,\
    \ 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5127c0, 0xc0001d0030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.intersperse(...)\n\t/tmp/tmpx41cm30p_test.go:20\n\
    command-line-arguments_test.TestIntersperse(0x0?)\n\t/tmp/tmpx41cm30p_test.go:38\
    \ +0x3f7\ntesting.tRunner(0xc00019b040, 0x5280e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073481
