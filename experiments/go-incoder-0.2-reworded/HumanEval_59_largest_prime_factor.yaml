name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    p := 2\n    i := 2\n    for {\n        if n % p == 0 {\n      \
    \      return p\n        }\n        p += i\n        i += 2\n    }\n}\n", "   \
    \ n -= 2\n    p := 2\n    for {\n        if n%p == 0 {\n            return p\n\
    \        }\n        p += 2\n    }\n}\n", "    prime := 2\n    factor := 2\n  \
    \  for n > 1 {\n        if n%prime == 0 {\n            factor++\n        }\n \
    \       prime++\n        n = n/prime\n    }\n    return factor\n}\n", "    p :=\
    \ 2\n    q := 2\n    d := 2\n    for {\n        if n%p == 0 {\n            n =\
    \ n/p\n            q = q*p\n        }\n        if n%q == 0 {\n            n =\
    \ n/q\n            d = d*q\n        }\n        if n%d == 0 {\n            break\n\
    \        }\n        p = p*p\n        q = q*q\n        d = d*d\n    }\n    return\
    \ d\n}\n", "    prime := 2\n    factor := 1\n    for n > 1 {\n        if n % prime\
    \ == 0 {\n            n = n / prime\n            factor = prime\n        } else\
    \ {\n            prime++\n        }\n    }\n    return factor\n}\n", "    p :=\
    \ 2\n    for i := 2; i <= n; i++ {\n        if n%i == 0 {\n            p = i\n\
    \            break\n        }\n    }\n    return p\n}\n", "    p := 2\n    i :=\
    \ 2\n    for {\n        if n % p == 0 {\n            return p\n        }\n   \
    \     p += i\n        i += 2\n    }\n}\n", "    p := 2\n    q := n\n    d := 1\n\
    \    for {\n        if q%p == 0 {\n            break\n        }\n        p +=\
    \ d\n        q /= p\n        d++\n    }\n    return p\n}\n", "    p := 2\n   \
    \ q := n\n    r := 1\n    for {\n        if q%p == 0 {\n            break\n  \
    \      }\n        p = p * q\n        q = q / p\n        r++\n    }\n    return\
    \ r\n}\n", "    prime := 2\n    factor := 2\n    for n > 1 {\n        if n%prime\
    \ == 0 {\n            n = n/prime\n            factor = prime\n        } else\
    \ {\n            prime++\n        }\n    }\n    return factor\n}\n", "    prime\
    \ := 2\n    factor := 2\n    for n > 1 {\n        if n % prime == 0 {\n      \
    \      n = n / prime\n            factor = prime\n        } else {\n         \
    \   prime++\n        }\n    }\n    return factor\n}\n", "    p := 2\n    i :=\
    \ 2\n    for {\n        if n % i == 0 {\n            p += i\n            n /=\
    \ i\n        } else {\n            i++\n        }\n        if n == 1 {\n     \
    \       return p\n        }\n    }\n}\n", "    if n < 2 {\n        return n\n\
    \    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n       \
    \     return p\n        }\n        p += 2\n        q -= p\n    }\n}\n", "    if\
    \ n < 2 {\n        return n\n    }\n    p := 2\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            p = i\n            break\n        }\n  \
    \  }\n    return p\n}\n", "    if n < 2 {\n        return n\n    }\n    p := 2\n\
    \    i := 3\n    for {\n        if n%i == 0 {\n            n /= i\n        } else\
    \ {\n            i++\n        }\n        if n == 1 {\n            return p\n \
    \       }\n        p++\n    }\n}\n", "    n -= 2\n    i := 2\n    p := 2\n   \
    \ for {\n        if n % i == 0 {\n            p += i\n            n /= i\n   \
    \     } else {\n            i++\n        }\n        if n == 1 {\n            break\n\
    \        }\n    }\n    return p\n}\n", "    if n < 2 {\n        return n\n   \
    \ }\n\n    p := 2\n    max := n\n\n    for p < max {\n        if n % p == 0 {\n\
    \            max = p\n        }\n        p++\n    }\n\n    return max\n}\n", " \
    \   n -= 1\n    i := 2\n    factors := []int{}\n    for ; i*i <= n; i++ {\n  \
    \      if n%i == 0 {\n            factors = append(factors, i)\n            n\
    \ /= i\n        }\n    }\n    if n > 1 {\n        factors = append(factors, n)\n\
    \    }\n    return factors[len(factors)-1]\n}\n", "    p := 2\n    i := 2\n  \
    \  for {\n        if n % p == 0 {\n            return p\n        }\n        if\
    \ i > n / p {\n            return n\n        }\n        p += i\n        i += 2\n\
    \    }\n}\n", "    n -= 1\n    p := 2\n    for i := 3; i <= n; i++ {\n       \
    \ if n%i == 0 {\n            p = i\n            break\n        }\n    }\n    return\
    \ p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
