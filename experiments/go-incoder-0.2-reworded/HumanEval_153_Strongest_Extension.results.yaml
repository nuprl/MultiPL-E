language: go_test.go
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Write your code here\n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmplgacivkr_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Initialize a map of extensions to their strength\n    extension_map :=\
    \ make(map[string]int)\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjspiw6sx_test.go:99:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a tags=string,go |>\n<| a tags=string,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyrs7y3xt_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Write your code here\n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmplgacivkr_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmplgacivkr_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmplgacivkr_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp3aredtpx_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store extensions\n    m := make(map[string]int)\n    \n    // Iterate\
    \ over extensions\n    for _, extension := range extensions {\n        // Iterate\
    \ over each character in extension\n        for _, char := range extension {\n\
    \            // Increment the count of char in extension\n            m[char]++\n\
    \        }\n    }\n    \n    // Iterate over each character in class_name\n  \
    \  for _, char := range class_name {\n        // Increment the count of char in\
    \ class_name\n        m[char]++\n    }\n    \n    // Iterate over each character\
    \ in class_name and compare with map\n    for _, char := range class_name {\n\
    \        // If count of char in class_name greater than count in map\n       \
    \ if m[char] > m[class_name[char]] {\n            // Increment the count of char\
    \ in class_name\n            m[class_name[char]]++\n        }\n    }\n    \n \
    \   // Iterate over each character in class_name and compare with map\n    for\
    \ _, char := range class_name {\n        // If count of char in class_name greater\
    \ than count in map\n        if m[char] > m[class_name[char]] {\n            //\
    \ Increment the count of char in class_name\n            m[class_name[char]]++\n\
    \        }\n    }\n    \n    // Iterate over each character in class_name and\
    \ compare with map\n    for _, char := range class_name {\n        // If count\
    \ of char in class_name greater than count in map\n        if m[char] > m[class_name[char]]\
    \ {\n            // Increment the count of char in class_name\n            m[class_name[char]]++\n\
    \        }\n    }\n    \n    // Iterate over each character in class_name and\
    \ compare with map\n    for _, char := range class_name {\n        // If count\
    \ of char in class_name greater than count in map\n        if m[char] > m[class_name[char]]\
    \ {\n            // Increment the count of char in class_name\n            m[class_name[char]]++\n\
    \        }\n    }\n    \n    // Iterate over each character in class_name and\
    \ compare with map\n    for _, char := range class_name {\n        // If count\
    \ of char in class_name greater than count in map\n        if m[char] > m[class_name[char]]\
    \ {\n            // Increment the count of char in class_name\n            m[class_name[char]]++\n\
    \        }\n    }\n    \n    // Iterate over each character in class_name and\
    \ compare with map\n    for _, char := range class_name {\n        // If count\
    \ of char in class_name greater than count in map\n        if m[char] > m[class_name[char]]\
    \ {\n            // Increment the count of char in class_name\n            m[class_name[char]]++\n\
    \        }\n    }\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdx_jt4bd_test.go:98:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    extension\
    \ := \"\"\n    \n    for _, extension := range extensions {\n        \n      \
    \  extension := extension\n        \n        count := 0\n        \n        for\
    \ _, letter := range extension {\n            \n            if letter == letter.toUpper()\
    \ {\n                count++\n            }\n        }\n        \n        if count\
    \ > 0 {\n            \n            extension = extension.ToLower() + extension.ToUpper()\n\
    \            \n        }\n        \n    }\n    \n    return class_name + \".\"\
    \ + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9ta5yda_test.go:37:33: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpu9ta5yda_test.go:44:35: extension.ToLower undefined (type string has no
    field or method ToLower)

    /tmp/tmpu9ta5yda_test.go:44:57: extension.ToUpper undefined (type string has no
    field or method ToUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Iterate through the extensions and find the strongest\
    \ one\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxl_6mlfa_test.go:109:9: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Loop through the extensions and find the strongest one\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    for\
    \ _, extension := range extensions {\n        extension_map[extension] = -1\n\
    \    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptwxrsx3h_test.go:109:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,string,python\
    \ |>\n<code>\ndef strongest_extension(class_name, extensions):\n    extensions_set\
    \ = set(extensions)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\
    \")\n    extensions_set.discard(None)\n    extensions_set.discard(\"\")\n    extensions_set.discard(None)\n\
    \    extensions_set.discard(\"\")\n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphymoi069_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return class_name\n}\n</code>\n<|/ q tags=go |>\n<| c |>\nWhat have\
    \ you tried? What problems are you having? Please show us your attempt.\n<|/ c\
    \ |>\n<| c |>\nI added the code I tried\n<|/ c |>\n<| c |>\nPlease don't post\
    \ code in the comments. Edit your question and add it there.\n<|/ c |>\n<| c |>\n\
    I added the code I tried\n<|/ c |>\n<| c |>\nPlease don't post code in the comments.\
    \ Edit your question and add it there.\n<|/ c |>\n<| a dscore=0 |>\nI believe\
    \ this can be done with a single map and a single loop. \n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw422ty7p_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4xs13tn2_test.go:53: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Loop through each extension\n    for _, extension := range extensions\
    \ {\n        \n        // Get the number of uppercase letters\n        upper_case\
    \ := 0\n        for _, letter := range extension {\n            if letter == 'A'\
    \ || letter == 'B' || letter == 'C' || letter == 'D' || letter == 'E' || letter\
    \ == 'F' || letter == 'G' || letter == 'H' || letter == 'I' || letter == 'J' ||\
    \ letter == 'K' || letter == 'L' || letter == 'M' || letter == 'N' || letter ==\
    \ 'O' || letter == 'P' || letter == 'Q' || letter == 'R' || letter == 'S' || letter\
    \ == 'T' || letter == 'U' || letter == 'V' || letter == 'W' || letter == 'X' ||\
    \ letter == 'Y' || letter == 'Z' {\n                upper_case += 1\n        \
    \    }\n        }\n        \n        // Get the number of lowercase letters\n\
    \        lower_case := 0\n        for _, letter := range extension {\n       \
    \     if letter == 'a' || letter == 'b' || letter == 'c' || letter == 'd' || letter\
    \ == 'e' || letter == 'f' || letter == 'g' || letter == 'h' || letter == 'i' ||\
    \ letter == 'j' || letter == 'k' || letter == 'l' || letter == 'm' || letter ==\
    \ 'n' || letter == 'o' || letter == 'p' || letter == 'q' || letter == 'r' || letter\
    \ == 's' || letter == 't' || letter == 'u' || letter == 'v' || letter == 'w' ||\
    \ letter == 'x' || letter == 'y' || letter == 'z' {\n                lower_case\
    \ += 1\n            }\n        }\n        \n        // Get the strength of the\
    \ extension\n        strength := (upper_case - lower_case) / len(extension)\n\
    \        \n        // If the extension has a higher strength, update the map\n\
    \        if extension_map[extension] > strength {\n            extension_map[extension]\
    \ = strength\n        }\n    }\n    \n    // Sort the map by strength\n    sorted_extensions\
    \ := make([]string, 0, len(extension_map))\n    for extension, strength := range\
    \ extension_map {\n        sorted_extensions = append(sorted_extensions, extension)\n\
    \    }\n    sort.Strings(sorted_extensions)\n    \n    // Return the strongest\
    \ extension\n    return class_name + sorted_extensions[0]\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmld_5uhd_test.go:62:20: strength declared but not used

    /tmp/tmpmld_5uhd_test.go:65:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp3aredtpx_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store extension strength\n    extension := make(map[string]int)\n \
    \   \n    // Iterate through the extensions\n    for _, extension := range extensions\
    \ {\n        // Iterate through the characters in the extension\n        for _,\
    \ character := range extension {\n            // Get the number of uppercase letters\
    \ in the extension\n            capitals := 0\n            for _, letter := range\
    \ character {\n                if letter == 'A' || letter == 'B' || letter ==\
    \ 'C' {\n                    capitals++\n                }\n            }\n  \
    \          \n            // Get the number of lowercase letters in the extension\n\
    \            lowercases := 0\n            for _, letter := range character {\n\
    \                if letter == 'a' || letter == 'b' || letter == 'c' {\n      \
    \              lowercases++\n                }\n            }\n            \n\
    \            // Get the strength of the extension\n            strength := capitals\
    \ - lowercases\n            \n            // If the extension strength is less\
    \ than the previous extension\n            // strength, update the previous extension\
    \ strength\n            if extension[extension] < strength {\n               \
    \ extension[extension] = strength\n            }\n        }\n    }\n    \n   \
    \ // Sort the extensions in descending order\n    sort.Slice(extension, func(i,\
    \ j int) bool {\n        return extension[j] < extension[i]\n    })\n    \n  \
    \  // Return the class name with the strongest extension\n    return class_name\
    \ + \".\" + extension[extension[0]]\n}\n\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnua0xgdh_test.go:36:36: cannot range over character (variable of type
    rune)

    /tmp/tmpnua0xgdh_test.go:44:36: cannot range over character (variable of type
    rune)

    /tmp/tmpnua0xgdh_test.go:55:26: invalid argument: index extension (variable of
    type string) must be integer

    /tmp/tmpnua0xgdh_test.go:55:39: invalid operation: extension[extension] < strength
    (mismatched types byte and int)

    /tmp/tmpnua0xgdh_test.go:56:17: cannot assign to extension[extension] (value of
    type byte)

    /tmp/tmpnua0xgdh_test.go:56:27: invalid argument: index extension (variable of
    type string) must be integer

    /tmp/tmpnua0xgdh_test.go:62:5: undefined: sort

    /tmp/tmpnua0xgdh_test.go:63:26: cannot use j (variable of type int) as type string
    in map index

    /tmp/tmpnua0xgdh_test.go:63:41: cannot use i (variable of type int) as type string
    in map index

    /tmp/tmpnua0xgdh_test.go:67:51: cannot use 0 (untyped int constant) as string
    value in map index

    /tmp/tmpnua0xgdh_test.go:67:51: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extensions_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extensions_map[extension] = -1\n    }\n    \n\
    \    // Initialize a map of extensions to their strength\n    extensions_map :=\
    \ make(map[string]int)\n    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp269s2tom_test.go:99:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ help but I am not allowed to use any additional packages. I should only use\
    \ what I have been taught so far.\n<|/ c |>\n<| c |>\nI added the code I wrote\
    \ to my original post. I am not sure how to implement the code you gave me into\
    \ my code though.\n<|/ c |>\n<| c |>\nI added the code I wrote to my original\
    \ post. I am not sure how to implement the code you gave me into my code though.\n\
    <|/ c |>\n<| c |>\nI added the code I wrote to my original post. I am not sure\
    \ how to implement the code you gave me into my code though.\n<|/ c |>\n<| c |>\n\
    I added the code I wrote to my original post. I am not sure how to implement the\
    \ code you gave me into my code though.\n<|/ c |>\n<| a tags=go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb1qd1avm_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Initialize a map of extensions to their strength\n    extension_map :=\
    \ make(map[string]int)\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjspiw6sx_test.go:99:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ indexed by their strength\n    extensions_map := make(map[int]string)\n    \n\
    \    // Iterate over the extensions and add them to the map\n    for _, extension\
    \ := range extensions {\n        \n        // Get the extension name by splitting\
    \ it into its capital letters and lowercase letters\n        extension_name :=\
    \ extension\n        \n        // Iterate over the capital letters and add them\
    \ to the map\n        for _, letter := range extension_name[0:len(extension_name)-1]\
    \ {\n            extensions_map[letter] = extension_name\n        }\n        \n\
    \        // Iterate over the lowercase letters and add them to the map\n     \
    \   for _, letter := range extension_name[len(extension_name)-1:len(extension_name)]\
    \ {\n            extensions_map[letter] = extension_name\n        }\n    }\n \
    \   \n    // Iterate over the map and find the strongest extension\n    max :=\
    \ 0\n    max := -1\n    for _, extension := range extensions_map {\n        if\
    \ extensions_map[extension] > max {\n            max = extensions_map[extension]\n\
    \        }\n    }\n    \n    // Return the class name with the strongest extension\n\
    \    return class_name + \".\" + extensions_map[max]\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqewgsn7t_test.go:37:28: cannot use letter (variable of type rune) as type
    int in map index

    /tmp/tmpqewgsn7t_test.go:42:28: cannot use letter (variable of type rune) as type
    int in map index

    /tmp/tmpqewgsn7t_test.go:48:9: no new variables on left side of :=

    /tmp/tmpqewgsn7t_test.go:50:27: cannot use extension (variable of type string)
    as type int in map index

    /tmp/tmpqewgsn7t_test.go:50:40: invalid operation: extensions_map[extension] >
    max (mismatched types string and int)

    /tmp/tmpqewgsn7t_test.go:51:19: cannot use extensions_map[extension] (map index
    expression of type string) as type int in assignment

    /tmp/tmpqewgsn7t_test.go:51:34: cannot use extension (variable of type string)
    as type int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    extension\
    \ := \"\"\n    \n    extension := class_name + \".\" + extensions[0]\n    \n \
    \   for i := 1; i < len(extensions); i++ {\n        extension := extension + \"\
    .\" + extensions[i]\n    }\n    \n    return extension\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp924ivlv8_test.go:29:15: no new variables on left side of :=

    /tmp/tmp924ivlv8_test.go:32:9: extension declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store the extension strength\n    extension := make(map[string]int)\n\
    \    \n    // Iterate through the extensions\n    for _, extension := range extensions\
    \ {\n        // Iterate through the characters in the extension\n        for _,\
    \ char := range extension {\n            // Increment the strength of the extension\n\
    \            extension[char]++\n        }\n    }\n    \n    // Sort the extensions\
    \ by strength\n    sort.Sort(sort.Reverse(extension))\n    \n    // Get the strongest\
    \ extension\n    extension := extension[0]\n    \n    // Return the class name\
    \ and the strongest extension\n    return class_name + \".\" + extension\n}\n\
    </code>\n<|/ a tags=go |>\n<| c |>\nThanks for the answer. I am new to golang\
    \ and I really appreciate your help. I tried to run your code but I am getting\
    \ this error `cannot use \"my_class\" (type string) as type []string in argument\
    \ to Strongest_Extension`\n<|/ c |>\n<| c |>\nI updated my answer to include a\
    \ working example. Let me know if you have any questions.\n<|/ c |>\n<| c |>\n\
    Thanks again for the answer. I tried running your code but I am getting this error\
    \ `cannot use \"my_class\" (type string) as type []string in argument to Strongest_Extension`\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a working example. Let me know\
    \ if you have any questions.\n<|/ c |>\n<| c |>\nThanks again for the answer.\
    \ I tried running your code but I am getting this error `cannot use \"my_class\"\
    \ (type string) as type []string in argument to Strongest_Extension`\n<|/ c |>\n\
    <| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmwhq95w_test.go:48:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp_9idqi9o_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Loop through each extension and find the strongest one\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    for\
    \ _, extension := range extensions {\n        extension_map[extension] = -1\n\
    \    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    for _, extension := range extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrdkrjtr_test.go:108:40: expected ''{'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    extension\
    \ := \"\"\n    \n    for _, extension := range extensions {\n        \n      \
    \  extension := extension\n        \n    }\n    \n    return class_name+\".\"\
    +extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc9d8r7fr_test.go:31:9: extension declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If you have any questions,\
    \ feel free to ask!\n<|/ c |>\n<| c |>\nI tried to run your code, but I got this\
    \ error: \n`panic: runtime error: invalid memory address or nil pointer dereference\n\
    [signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x48b8f]`\n<|/ c\
    \ |>\n<| c |>\nI fixed the error, but now I got this error: \n`panic: runtime\
    \ error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation\
    \ violation code=0x1 addr=0x0 pc=0x48b8f]`\n<|/ c |>\n<| c |>\nI fixed the error,\
    \ but now I got this error: \n`panic: runtime error: invalid memory address or\
    \ nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0\
    \ pc=0x48b8f]`\n<|/ c |>\n<| a tags=go,string,slice |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7jhdvrg_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map to store\
    \ extension strength\n    extension_map := make(map[string]int)\n    \n    //\
    \ Iterate over the extensions and store the strength\n    for _, extension :=\
    \ range extensions {\n        \n        // Get the extension name from the extension\n\
    \        extension_name := extension\n        \n        // Get the number of uppercase\
    \ letters in the extension name\n        upper_case_count := 0\n        for _,\
    \ letter := range extension_name {\n            if letter == 'A' || letter ==\
    \ 'B' || letter == 'C' || letter == 'D' || letter == 'E' || letter == 'F' || letter\
    \ == 'G' || letter == 'H' || letter == 'I' || letter == 'J' || letter == 'K' ||\
    \ letter == 'L' || letter == 'M' || letter == 'N' || letter == 'O' || letter ==\
    \ 'P' || letter == 'Q' || letter == 'R' || letter == 'S' || letter == 'T' || letter\
    \ == 'U' || letter == 'V' || letter == 'W' || letter == 'X' || letter == 'Y' ||\
    \ letter == 'Z' {\n                upper_case_count++\n            }\n       \
    \ }\n        \n        // Get the number of lowercase letters in the extension\
    \ name\n        lower_case_count := 0\n        for _, letter := range extension_name\
    \ {\n            if letter == 'a' || letter == 'b' || letter == 'c' || letter\
    \ == 'd' || letter == 'e' || letter == 'f' || letter == 'g' || letter == 'h' ||\
    \ letter == 'i' || letter == 'j' || letter == 'k' || letter == 'l' || letter ==\
    \ 'm' || letter == 'n' || letter == 'o' || letter == 'p' || letter == 'q' || letter\
    \ == 'r' || letter == 's' || letter == 't' || letter == 'u' || letter == 'v' ||\
    \ letter == 'w' || letter == 'x' || letter == 'y' || letter == 'z' {\n       \
    \         lower_case_count++\n            }\n        }\n        \n        // Calculate\
    \ the strength\n        strength := upper_case_count - lower_case_count\n    \
    \    \n        // Store the strength in the map\n        extension_map[extension]\
    \ = strength\n    }\n    \n    // Sort the map by strength\n    sorted_extensions\
    \ := make([]string, 0, len(extension_map))\n    for extension, strength := range\
    \ extension_map {\n        sorted_extensions = append(sorted_extensions, extension)\n\
    \    }\n    sort.Strings(sorted_extensions)\n    \n    // Get the strongest extension\n\
    \    sorted_extension_name := sorted_extensions[0]\n    \n    // Return the class\
    \ name with the strongest extension\n    return class_name + sorted_extension_name\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpou4nn1rz_test.go:60:20: strength declared but not used

    /tmp/tmpou4nn1rz_test.go:63:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n</code>\n<|/ a tags=algorithm,string,python |>\n<| c |>\n\
    Thank you so much! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If\
    \ this answer helped you, please consider marking it as accepted so other people\
    \ can see that this is the solution to your problem.\n<|/ c |>\n<| c |>\nI did\
    \ but it says I have to wait 2 minutes before I can accept it\n<|/ c |>\n<| c\
    \ |>\nOh okay, no worries. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def strongest_extension(class_name, extensions):\n    extensions = sorted(extensions,\
    \ key=lambda x: len(x), reverse=True)\n    extension = extensions[0]\n    \n \
    \   extension_length = len(extension)\n    \n    extension_strength = extension_length\
    \ - len(class_name)\n    \n    \n    if extension_strength == 0:\n        return\
    \ class_name\n    \n    \n    if extension_strength > 0:\n        return class_name\
    \ + extension\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpth_pmckv_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extension_map[extension] = -1\n    }\n    \n\
    \    // Initialize a map of extensions to their strength\n    extension_map :=\
    \ make(map[string]int)\n    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extension_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extension_map[extension] = -1\n    }\n    \n    // Initialize a map\
    \ of extensions to their strength\n    extension_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extension_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjspiw6sx_test.go:99:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzt_uyse_test.go:282:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a dictionary\
    \ to store extension strengths\n    extension_strengths := make(map[string]int)\n\
    \    \n    // Iterate over each extension\n    for _, extension := range extensions\
    \ {\n        \n        // Get the number of uppercase letters in the extension\n\
    \        cap := strings.Count(extension, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n   \
    \     \n        // Get the number of lowercase letters in the extension\n    \
    \    sm := strings.Count(extension, \"abcdefghijklmnopqrstuvwxyz\")\n        \n\
    \        // Get the strength of the extension\n        strength := cap - sm\n\
    \        \n        // Add the extension to the dictionary if it doesn't exist\
    \ yet\n        if _, ok := extension_strengths[extension]; !ok {\n           \
    \ extension_strengths[extension] = strength\n        }\n    }\n    \n    // Sort\
    \ the dictionary by strength\n    sort.Sort(sort.Reverse(sort.IntSlice(extension_strengths)))\n\
    \    \n    // Get the strongest extension\n    extension := extension_strengths[extension_strengths[0]]\n\
    \    \n    // Return the class name and the strongest extension\n    return class_name\
    \ + \".\" + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnn4n2wk3_test.go:33:16: undefined: strings

    /tmp/tmpnn4n2wk3_test.go:36:15: undefined: strings

    /tmp/tmpnn4n2wk3_test.go:48:5: undefined: sort

    /tmp/tmpnn4n2wk3_test.go:51:38: cannot use extension_strengths[0] (map index expression
    of type int) as type string in map index

    /tmp/tmpnn4n2wk3_test.go:51:58: cannot use 0 (untyped int constant) as string
    value in map index

    /tmp/tmpnn4n2wk3_test.go:54:12: invalid operation: class_name + "." + extension
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp3aredtpx_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzt_uyse_test.go:282:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp_9idqi9o_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpdc5y4suh_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ indexed by their strength\n    extensions_map := make(map[string]int)\n    \n\
    \    // Iterate through the extensions and add them to the map\n    for _, extension\
    \ := range extensions {\n        \n        // Get the extension's name\n     \
    \   extension_name := extension\n        \n        // Get the extension's strength\n\
    \        extension_strength := 0\n        \n        // Iterate through the characters\
    \ in the extension's name\n        for _, character := range extension_name {\n\
    \            \n            // Get the character in the extension's name\n    \
    \        character := character\n            \n            // Increment the extension's\
    \ strength\n            extension_strength++\n        }\n        \n        //\
    \ Add the extension's strength to the map\n        extensions_map[extension_strength]\
    \ = extensions_map[extension_strength] + 1\n    }\n    \n    // Get the strongest\
    \ extension\n    sorted_extensions := []string{}\n    for _, extension := range\
    \ extensions_map {\n        sorted_extensions = append(sorted_extensions, extension)\n\
    \    }\n    sorted_extensions.sort()\n    \n    // Get the strongest extension's\
    \ strength\n    sorted_extensions_strength := []int{}\n    for _, extension :=\
    \ range sorted_extensions {\n        sorted_extensions_strength = append(sorted_extensions_strength,\
    \ extensions_map[extension])\n    }\n    sorted_extensions_strength.sort()\n \
    \   \n    // Get the number of characters in the extension's name\n    extension_name_length\
    \ := len(extension_name)\n    \n    // Get the number of characters in the extension's\
    \ name\n    sorted_extensions_length_strength := []int{}\n    for _, extension\
    \ := range sorted_extensions_strength {\n        sorted_extensions_length_strength\
    \ = append(sorted_extensions_length_strength, extension_name_length-extension)\n\
    \    }\n    sorted_extensions_length_strength.sort()\n    \n    // Get the number\
    \ of characters in the extension's name\n    sorted_extensions_length_strength_length\
    \ := []int{}\n    for _, extension := range sorted_extensions_length_strength\
    \ {\n        sorted_extensions_length_strength_length = append(sorted_extensions_length_strength_length,\
    \ extension_name_length-extension)\n    }\n    sorted_extensions_length_strength_length.sort()\n\
    \    \n    // Get the number of characters in the extension's name\n    sorted_extensions_length_strength_length_length\
    \ := []int{}\n    for _, extension := range sorted_extensions_length_strength_length\
    \ {\n        sorted_extensions_length_strength_length_length = append(sorted_extensions_length_strength_length_length,\
    \ extension_name_length-extension)\n    }\n    sorted_extensions_length_strength_length_length.sort()\n\
    \    \n    // Get the number of characters in the extension's name\n    sorted_extensions_length_\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphwh769fg_test.go:92:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much\
    \ for your help. I really appreciate it. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI ran the code and it worked! Thank you so\
    \ much! I really appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! If you think\
    \ this answer solved your problem, please consider accepting it by clicking the\
    \ check mark. Thanks!\n<|/ c |>\n<| a tags=algorithm,string,python |>\n<code>\n\
    def strongest_extension(class_name, extensions):\n    extensions_sorted = sorted(extensions,\
    \ key=lambda x: len(x), reverse=True)\n    \n    extensions_sorted.reverse()\n\
    \    \n    extensions_sorted.append(class_name)\n    \n    return \".\".join(extensions_sorted)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| c |>\nI ran the code and it worked! Thank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=algorithm,string,python |>\n<code>\ndef strongest_extension(class_name,\
    \ extensions):\n    extensions_sorted = sorted(extensions, key=lambda x: len(x),\
    \ reverse=True)\n    \n    extensions_sorted.reverse()\n    \n    extensions_sorted.append(class_name)\n\
    \    \n    return \".\".join(extensions_sorted)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you so much for your help. I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| a tags=algorithm,string,python\
    \ |>\n<code>\ndef strongest_extension(class_name, extensions):\n    extensions_sorted\
    \ = sorted(extensions, key=lambda x: len(x), reverse=True)\n    \n    extensions_sorted.reverse()\n\
    \    \n    extensions_sorted.append(class_name)\n    \n    return \".\".join(extensions_sorted)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help. I really\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef strongest_\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptoolvnjk_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp3aredtpx_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp3aredtpx_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp3aredtpx_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpj8omlg1m_test.go:53: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpj8omlg1m_test.go:53:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpj8omlg1m_test.go:53: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpj8omlg1m_test.go:53: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpj8omlg1m_test.go:53: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpj8omlg1m_test.go:53:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpj8omlg1m_test.go:53: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpj8omlg1m_test.go:53:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpj8omlg1m_test.go:53: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map to store\
    \ the extensions strength\n    extensions_map := make(map[string]int)\n    \n\
    \    // Iterate over the extensions and update the map with their strength\n \
    \   for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Iterate over the map and find the strongest extension\n\
    \    for extension, strength := range extensions_map {\n        if strength >\
    \ 0 {\n            extensions_map[extension] = strength\n        }\n    }\n  \
    \  \n    // Sort the map by strength\n    sort.Sort(sort.Reverse(sort.IntSlice(extensions_map)))\n\
    \    \n    // Iterate over the map and return the strongest extension\n    for\
    \ extension, strength := range extensions_map {\n        if strength == 0 {\n\
    \            return class_name+\".\"+extension\n        }\n    }\n    \n    //\
    \ If no extension has the strongest strength, return class_name\n    return class_name\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcec6t9y7_test.go:42:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp_9idqi9o_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpds9kwa2q_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpds9kwa2q_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpds9kwa2q_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpds9kwa2q_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpds9kwa2q_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpds9kwa2q_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpds9kwa2q_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpds9kwa2q_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpds9kwa2q_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"sort\"\n)\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3jns06p_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    extension\
    \ := \"\"\n    \n    extension := class_name + \".\"\n    \n    extension := extension\
    \ + extensions[len(extensions)-1]\n    \n    for i := len(extensions)-2; i >=\
    \ 0; i-- {\n        extension := extension + extensions[i]\n        \n       \
    \ if i == 0 {\n            extension := extension + extensions[len(extensions)-1]\n\
    \        }\n    }\n    \n    return extension\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7okiy1hx_test.go:29:15: no new variables on left side of :=

    /tmp/tmp7okiy1hx_test.go:31:15: no new variables on left side of :=

    /tmp/tmp7okiy1hx_test.go:37:13: extension declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extensions_map := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        extensions_map[extension] = -1\n    }\n    \n\
    \    // Initialize a map of extensions to their strength\n    extensions_map :=\
    \ make(map[string]int)\n    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extensions to their strength\n\
    \    extensions_map := make(map[string]int)\n    for _, extension := range extensions\
    \ {\n        extensions_map[extension] = -1\n    }\n    \n    // Initialize a\
    \ map of extensions to their strength\n    extensions_map := make(map[string]int)\n\
    \    for _, extension := range extensions {\n        extensions_map[extension]\
    \ = -1\n    }\n    \n    // Initialize a map of extension\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp269s2tom_test.go:99:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extensions_map := make(map[string]int)\n    \n    //\
    \ Initialize a map of extensions to their index in the list\n    extensions_index_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of uppercase letters\n    extensions_uppercase_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of lowercase letters\n\
    \    extensions_lowercase_map := make(map[string]int)\n    \n    // Initialize\
    \ a map of extensions to their number of digits\n    extensions_digit_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of special characters\n\
    \    extensions_special_map := make(map[string]int)\n    \n    // Initialize a\
    \ map of extensions to their number of whitespace\n    extensions_whitespace_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of punctuation\n    extensions_punctuation_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of digits\n    extensions_digit_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of special characters\n    extensions_special_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of whitespace\n \
    \   extensions_whitespace_map := make(map[string]int)\n    \n    // Initialize\
    \ a map of extensions to their number of punctuation\n    extensions_punctuation_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of digits\n    extensions_digit_map := make(map[string]int)\n    \n \
    \   // Initialize a map of extensions to their number of special characters\n\
    \    extensions_special_map := make(map[string]int)\n    \n    // Initialize a\
    \ map of extensions to their number of whitespace\n    extensions_whitespace_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of punctuation\n    extensions_punctuation_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of digits\n    extensions_digit_map\
    \ := make(map[string]int)\n    \n    // Initialize a map of extensions to their\
    \ number of special characters\n    extensions_special_map := make(map[string]int)\n\
    \    \n    // Initialize a map of extensions to their number of whitespace\n \
    \   extensions_whitespace_map := make(map[string]int)\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq_zs255l_test.go:82:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp7ceq1z2__test.go:51: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    \n    // Iterate\
    \ through the list of extensions\n    for _, extension := range extensions {\n\
    \        \n        // Get the number of uppercase letters\n        cap := 0\n\
    \        for _, letter := range extension {\n            if letter == 'A' || letter\
    \ == 'B' || letter == 'C' {\n                cap++\n            }\n        }\n\
    \        \n        // Get the number of lowercase letters\n        sm := 0\n \
    \       for _, letter := range extension {\n            if letter == 'a' || letter\
    \ == 'b' || letter == 'c' {\n                sm++\n            }\n        }\n\
    \        \n        // Get the strength of the extension\n        strength := cap\
    \ - sm\n        \n        // If the extension has already been added to the map\n\
    \        if extension_map[extension] != 0 {\n            \n            // Get\
    \ the strength of the extension\n            strength := extension_map[extension]\n\
    \            \n            // If the strength of the extension is greater than\
    \ the previous \n            // strength then update the map\n            if strength\
    \ > extension_map[extension] {\n                extension_map[extension] = strength\n\
    \            }\n        } else {\n            extension_map[extension] = strength\n\
    \        }\n    }\n    \n    // Iterate through the map and find the strongest\
    \ extension\n    max := 0\n    for extension, strength := range extension_map\
    \ {\n        if strength > max {\n            max = strength\n        }\n    }\n\
    \    \n    // Return the class name with the strongest extension\n    return class_name\
    \ + \".\" + extensions[len(extensions)-1]\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8aqpuutb_test.go:69:9: extension declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ indexed by their strength\n    extensions_map := make(map[int]string)\n    \n\
    \    // Initialize a map of extensions indexed by their name\n    extensions_name_map\
    \ := make(map[string]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map := make(map[int]string)\n    \n   \
    \ // Initialize a map of extensions indexed by their index\n    extensions_index_map_2\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_3 := make(map[int]string)\n    \n \
    \   // Initialize a map of extensions indexed by their index\n    extensions_index_map_4\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_5 := make(map[int]string)\n    \n \
    \   // Initialize a map of extensions indexed by their index\n    extensions_index_map_6\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_7 := make(map[int]string)\n    \n \
    \   // Initialize a map of extensions indexed by their index\n    extensions_index_map_8\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_9 := make(map[int]string)\n    \n \
    \   // Initialize a map of extensions indexed by their index\n    extensions_index_map_10\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_11 := make(map[int]string)\n    \n\
    \    // Initialize a map of extensions indexed by their index\n    extensions_index_map_12\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_13 := make(map[int]string)\n    \n\
    \    // Initialize a map of extensions indexed by their index\n    extensions_index_map_14\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_15 := make(map[int]string)\n    \n\
    \    // Initialize a map of extensions indexed by their index\n    extensions_index_map_16\
    \ := make(map[int]string)\n    \n    // Initialize a map of extensions indexed\
    \ by their index\n    extensions_index_map_17 := make(map[int]string)\n    \n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4iur382g_test.go:84:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp7ceq1z2__test.go:51: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp7ceq1z2__test.go:51:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp7ceq1z2__test.go:51: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map to store\
    \ extension strength\n    extension := make(map[string]int)\n    \n    // Iterate\
    \ through the extensions and store their strength\n    for _, extension := range\
    \ extensions {\n        \n        // Get the extension's name\n        extension_name\
    \ := extension[:len(extension)-1]\n        \n        // Get the extension's strength\n\
    \        extension_strength := extension[len(extension)-1] - 'A'\n        \n \
    \       // Update the map with the extension's strength\n        extension[extension_name]\
    \ = extension_strength\n    }\n    \n    // Sort the map by strength\n    sort.Sort(sort.Reverse(extension))\n\
    \    \n    // Get the strongest extension\n    extension := extension.First()\n\
    \    \n    // Return the class name and the strongest extension\n    return class_name\
    \ + \".\" + extension.Key()\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9obwajcn_test.go:39:9: cannot assign to extension[extension_name] (value
    of type byte)

    /tmp/tmp9obwajcn_test.go:39:19: invalid argument: index extension_name (variable
    of type string) must be integer

    /tmp/tmp9obwajcn_test.go:43:5: undefined: sort

    /tmp/tmp9obwajcn_test.go:46:15: no new variables on left side of :=

    /tmp/tmp9obwajcn_test.go:46:28: extension.First undefined (type map[string]int
    has no field or method First)

    /tmp/tmp9obwajcn_test.go:49:41: extension.Key undefined (type map[string]int has
    no field or method Key)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return class_name\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any built-in functions or methods. I only have to write\
    \ my own functions. I appreciate your help though.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that doesn't use any built-in functions or methods.\
    \ I hope this helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I appreciate\
    \ it. I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI\
    \ edited my answer to include a solution that doesn't use any built-in functions\
    \ or methods. I hope this helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I\
    \ appreciate it. I will try this out and let you know how it goes.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\
    \n)\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3bas6_3_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a dictionary\
    \ to store the extensions and their strength\n    extension_dict := make(map[string]int)\n\
    \n    // Loop through the list of extensions\n    for _, extension := range extensions\
    \ {\n        // Get the number of uppercase letters in the extension\n       \
    \ cap := len(extension) - len(extension.ToUpper())\n        // Get the number\
    \ of lowercase letters in the extension\n        sm := len(extension) - len(extension.ToLower())\n\
    \        // Get the strength of the extension\n        strength := cap - sm\n\
    \        // Add the extension to the dictionary with the strength\n        extension_dict[extension]\
    \ = strength\n    }\n\n    // Sort the dictionary by strength\n    sorted_extensions\
    \ := make([]string, 0, len(extension_dict))\n    for k := range extension_dict\
    \ {\n        sorted_extensions = append(sorted_extensions, k)\n    }\n    sort.Strings(sorted_extensions)\n\
    \n    // Initialize a variable to store the strongest extension\n    strongest_extension\
    \ := \"\"\n\n    // Loop through the sorted extensions and find the strongest\
    \ one\n    for _, extension := range sorted_extensions {\n        // Check if\
    \ the extension has already been added to the strongest extension\n        if\
    \ strongest_extension != \"\" && extension_dict[extension] == extension_dict[strongest_extension]\
    \ {\n            continue\n        }\n        // Add the extension to the strongest\
    \ extension\n        strongest_extension = extension\n    }\n\n    // Return the\
    \ strongest extension\n    return class_name + \".\" + strongest_extension\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"\
    fmt\"\n    \"sort\"\n)\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmb_l1_aj_test.go:64:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp1q9l9sea_test.go:52: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp1q9l9sea_test.go:52:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp1q9l9sea_test.go:52: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n</code>\n<|/ a tags=algorithm,string,c++,python |>\n<| c |>\n\
    I understand this but how would you go about implementing this? I understand how\
    \ to find the strongest extension but how would you go about finding the strongest\
    \ extension?\n<|/ c |>\n<| c |>\nI added the code to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| c\
    \ |>\nI added the code to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nI added\
    \ the code to the answer. Hope it helps.\n<|/ c |>\n<| a tags=algorithm,string,c++,python\
    \ |>\nI wrote a Python program to solve this problem:\n<code>\ndef strongest_extension(class_name,\
    \ extensions):\n    extension_strengths = {}\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] = -1\n\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] += 1\n\n    sorted_extensions\
    \ = sorted(extension_strengths.items(), key=lambda x: x[1], reverse=True)\n  \
    \  \n    extension_strength = sorted_extensions[0][1]\n    \n    if extension_strength\
    \ > 0:\n        return class_name + \".\" + sorted_extensions[0][0]\n    else:\n\
    \        return class_name\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef strongest_extension(class_name,\
    \ extensions):\n    extension_strengths = {}\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] = -1\n\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] += 1\n\n    sorted_extensions\
    \ = sorted(extension_strengths.items(), key=lambda x: x[1], reverse=True)\n  \
    \  \n    extension_strength = sorted_extensions[0][1]\n    \n    if extension_strength\
    \ > 0:\n        return class_name + \".\" + sorted_extensions[0][0]\n    else:\n\
    \        return class_name\n</code>\n<|/ a tags=algorithm,string,c++,python dscore=1\
    \ |>\n<| a tags=algorithm,string,c++,python |>\n<code>\ndef strongest_extension(class_name,\
    \ extensions):\n    extension_strengths = {}\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] = -1\n\n    for extension in extensions:\n\
    \        extension_strengths[extension.lower()] += 1\n\n    sorted_extensions\
    \ = sorted(extension_strengths.items(), key=lambda x: x[1], reverse=True)\n  \
    \  \n    extension_strength = \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzt382tjd_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    extension\
    \ := \"\"\n    \n    for _, extension := range extensions {\n        extension\
    \ := extension\n    }\n    \n    extension := extension\n    \n    return class_name+\"\
    .\"+extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo531vquf_test.go:30:9: extension declared but not used

    /tmp/tmpo531vquf_test.go:33:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return \"\"\n}\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpx1782z9u_test.go:51: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpx1782z9u_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpx1782z9u_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpx1782z9u_test.go:51:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpx1782z9u_test.go:51: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpx1782z9u_test.go:51:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpx1782z9u_test.go:51: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpx1782z9u_test.go:51:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpx1782z9u_test.go:51: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074757
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    \n    // Iterate\
    \ over the extensions and add them to the map\n    for _, extension := range extensions\
    \ {\n        \n        // Get the number of uppercase letters in the extension\n\
    \        cap := strings.Count(extension, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n   \
    \     \n        // Get the number of lowercase letters in the extension\n    \
    \    sm := strings.Count(extension, \"abcdefghijklmnopqrstuvwxyz\")\n        \n\
    \        // Get the fraction of the uppercase letters in the extension\n     \
    \   fraction := cap - sm\n        \n        // Add the extension to the map with\
    \ the strength\n        extension_map[extension] = fraction\n    }\n    \n   \
    \ // Sort the map by the strength\n    sort.Sort(sort.Reverse(extension_map))\n\
    \    \n    // Get the strongest extension\n    extension := extension_map[extension_map[0]]\n\
    \    \n    // Return the class name with the strongest extension\n    return class_name\
    \ + \".\" + extension\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpau7adtk7_test.go:33:16: undefined: strings

    /tmp/tmpau7adtk7_test.go:36:15: undefined: strings

    /tmp/tmpau7adtk7_test.go:46:5: undefined: sort

    /tmp/tmpau7adtk7_test.go:49:32: cannot use extension_map[0] (map index expression
    of type int) as type string in map index

    /tmp/tmpau7adtk7_test.go:49:46: cannot use 0 (untyped int constant) as string
    value in map index

    /tmp/tmpau7adtk7_test.go:52:12: invalid operation: class_name + "." + extension
    (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pvlsffc_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   \n    return \"\"\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp4xs13tn2_test.go:53: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp4xs13tn2_test.go:53:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmp4xs13tn2_test.go:53: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    return\
    \ class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpyikhfnd0_test.go:51: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpyikhfnd0_test.go:51:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpyikhfnd0_test.go:51: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Your code here\n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmp_9idqi9o_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp_9idqi9o_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp_9idqi9o_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    \n \
    \   return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpm50vj408_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpm50vj408_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpm50vj408_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074755
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Initialize\
    \ a map to store extensions\n    m := make(map[string]int)\n    for _, extension\
    \ := range extensions {\n        m[extension] = m[extension] + 1\n    }\n    \n\
    \    // Initialize a map to store strongest extensions\n    smm := make(map[string]int)\n\
    \    for key, value := range m {\n        if value > smm[class_name] {\n     \
    \       smm[class_name] = value\n        }\n    }\n    \n    // Initialize a map\
    \ to store strongest extensions\n    smm := make(map[string]int)\n    for key,\
    \ value := range m {\n        if value > smm[class_name] {\n            smm[class_name]\
    \ = value\n        }\n    }\n    \n    // Initialize a map to store strongest\
    \ extensions\n    smm := make(map[string]int)\n    for key, value := range m {\n\
    \        if value > smm[class_name] {\n            smm[class_name] = value\n \
    \       }\n    }\n    \n    // Initialize a map to store strongest extensions\n\
    \    smm := make(map[string]int)\n    for key, value := range m {\n        if\
    \ value > smm[class_name] {\n            smm[class_name] = value\n        }\n\
    \    }\n    \n    // Initialize a map to store strongest extensions\n    smm :=\
    \ make(map[string]int)\n    for key, value := range m {\n        if value > smm[class_name]\
    \ {\n            smm[class_name] = value\n        }\n    }\n    \n    // Initialize\
    \ a map to store strongest extensions\n    smm := make(map[string]int)\n    for\
    \ key, value := range m {\n        if value > smm[class_name] {\n            smm[class_name]\
    \ = value\n        }\n    }\n    \n    // Initialize a map to store strongest\
    \ extensions\n    smm := make(map[string]int)\n    for key, value := range m {\n\
    \        if value > smm[class_name] {\n            smm[class_name] = value\n \
    \       }\n    }\n    \n    // Initialize a map to store strongest extensions\n\
    \    smm := make(map[string]int)\n    for key, value := range m {\n        if\
    \ value > smm[class_name] {\n            smm[class_name] = value\n        }\n\
    \    }\n    \n    // Initialize a map to store strongest extensions\n    smm :=\
    \ make(map[string]int)\n    for key, value := range m {\n        if value > smm[class_name]\
    \ {\n            smm[class_name] = value\n        }\n    }\n    \n    // Initialize\
    \ a map to store strongest extensions\n    smm := make\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzfbhw6c_test.go:107:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    return class_name\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n\
    \  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'Watashi.eIGHt8OKe', got 'Watashi'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n \
    \       tmpdc5y4suh_test.go:52: expected 'K.TAR', got 'K'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected '__HAHA.123', got '__HAHA'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected 'YameRore.okIWILL123', got 'YameRore'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'finNNalLLly.WoW', got 'finNNalLLly'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpdc5y4suh_test.go:52:\
    \ expected '_.Bb', got '_'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpdc5y4suh_test.go:52: expected 'Sp.671235', got 'Sp'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074756
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    \n    // Initialize a map of extensions\
    \ to their strength\n    extension_map := make(map[string]int)\n    \n    // Iterate\
    \ through the list of extensions\n    for _, extension := range extensions {\n\
    \        // Get the number of uppercase letters in the extension\n        cap\
    \ := len(extension) - len(strings.Split(extension, \"_\")[1])\n        // Get\
    \ the number of lowercase letters in the extension\n        sm := len(extension)\
    \ - len(strings.Split(extension, \"_\")[0])\n        // Get the strength of the\
    \ extension\n        strength := cap - sm\n        // Add the extension to the\
    \ map if it doesn't exist yet\n        if _, ok := extension_map[extension]; !ok\
    \ {\n            extension_map[extension] = strength\n        }\n    }\n    \n\
    \    // Sort the map by strength\n    sort.Sort(sort.Reverse(sort.IntSlice(extension_map)))\n\
    \    \n    // Get the strongest extension\n    extension := \"\"\n    for _, value\
    \ := range extension_map {\n        if value > 0 {\n            extension = extension\
    \ + class_name + \".\" + extension\n        }\n    }\n    \n    return extension\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrl5xwhn_test.go:32:37: undefined: strings

    /tmp/tmpvrl5xwhn_test.go:34:36: undefined: strings

    /tmp/tmpvrl5xwhn_test.go:44:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074756
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Write your code here\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cv4c0i6_test.go:280:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074754
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // \nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2yc4jjg6_test.go:172:6: expected ''('', found TestStrongest_Extension

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074756
