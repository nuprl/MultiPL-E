name: HumanEval_82_prime_length
language: go_test.go
prompt: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Write a function that takes a string and returns true if the string\n// length\
  \ is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\"\
  )\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\"\
  )\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString\
  \ string) bool {\n"
tests: "func TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
  \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
  ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
  \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
  world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
  \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
  \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n \
  \    { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
  gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
  \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
  \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
  \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
  \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    length := len(myString)\n    for i := 2; i < length; i++ {\n  \
    \      if myString[i] != myString[length-1] {\n            if myString[i] != myString[length/i+1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    length := len(myString)\n    prime := true\n    for i := 2;\
    \ i < length; i++ {\n        if myString[i] != myString[length-1] {\n        \
    \    if myString[i] != myString[length/i+1] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    length := len(myString)\n    if length < 2 {\n        return false\n    }\n\
    \    for i := 2; i < length; i++ {\n        if myString[i] == myString[i-1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    length\
    \ := len(myString)\n    prime := true\n    for i := 2; i < length; i++ {\n   \
    \     if myString[i] != myString[length-1] {\n            prime = false\n    \
    \        break\n        }\n    }\n    return prime\n}\n", "    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] != myString[length-i-1]\
    \ {\n                prime = false\n                break\n            }\n   \
    \     }\n    }\n    return prime\n}\n", "    // Your code here\n    length :=\
    \ len(myString)\n    primes := make([]int, length)\n    primes[0] = 2\n    primes[1]\
    \ = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5]\
    \ = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    primes[10] = 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13]\
    \ = 43\n    primes[14] = 47\n    primes[15] = 53\n    primes[16] = 59\n    primes[17]\
    \ = 61\n    primes[18] = 67\n    primes[19] = 71\n    primes[20] = 73\n    primes[21]\
    \ = 79\n    primes[22] = 83\n    primes[23] = 89\n    primes[24] = 97\n    primes[25]\
    \ = 101\n    primes[26] = 103\n    primes[27] = 107\n    primes[28] = 109\n  \
    \  primes[29] = 113\n    primes[30] = 127\n    primes[31] = 131\n    primes[32]\
    \ = 137\n    primes[33] = 139\n    primes[34] = 149\n    primes[35] = 151\n  \
    \  primes[36] = 157\n    primes[37] = 163\n    primes[38] = 167\n    primes[39]\
    \ = 173\n    primes[40] = 179\n    primes[41] = 181\n    primes[42] = 191\n  \
    \  primes[43] = 193\n    primes[44] = 193\n    primes[45] = 193\n    primes[46]\
    \ = 193\n    primes[47] = 193\n    primes[48] = 193\n    primes[49] = 193\n  \
    \  primes[50] = 193\n    primes[51] = 193\n    primes[52] = 193\n    primes[53]\
    \ = 193\n    primes[54] = 193\n    primes[55] = 193\n    primes[56] = 193\n  \
    \  primes[57] = 193\n    primes[58] = 193\n    primes[59] = 193\n    primes[60]\
    \ = 193\n    primes[61] = 193\n    primes[62] = 193\n    primes[63] = 193\n  \
    \  primes[64] = 193\n    primes[65] = 193\n    primes[66] = 19", "    // Your\
    \ code here\n    length := len(myString)\n    for i := 2; i < length; i++ {\n\
    \        if myString[i] == myString[i-1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n", "    length := len(myString)\n    prime :=\
    \ true\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[length-1]\
    \ {\n            prime = false\n            break\n        }\n    }\n    return\
    \ prime\n}\n", "    // Write your code here\n    length := len(myString)\n   \
    \ prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] % i == 0 {\n              \
    \  prime = false\n            }\n        }\n    }\n    return prime\n}\n", " \
    \   length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length/2] {\n                if myString[i] != myString[length/3]\
    \ {\n                    if myString[i] != myString[length/4] {\n            \
    \            if myString[i] != myString[length/5] {\n                        \
    \    if myString[i] != myString[length/6] {\n                                if\
    \ myString[i] != myString[length/7] {\n                                    if\
    \ myString[i] != myString[length/8] {\n                                      \
    \  if myString[i] != myString[length/9] {\n                                  \
    \          if myString[i] != myString[length/10] {\n                         \
    \                       if myString[i] != myString[length/11] {\n            \
    \                                        if myString[i] != myString[length/12]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/13] {\n                                                    \
    \        if myString[i] != myString[length/14] {\n                           \
    \                                     if myString[i] != myString[length/15] {\n\
    \                                                    if myString[i] != myString[length/16]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/17] {\n                                                    \
    \        if myString[i] != myString[length/18] {\n                           \
    \                                     if myString[i] != myString[length/19] {\n\
    \                                                    if myString[i] != myString[length/20]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/21] {\n                                                    \
    \        if myString[i] != myString[length/22] {\n                           \
    \                                     if myString[i] != myString[length/23] {\n\
    \                                                    if myString[i] != myString[length/24]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/25] {\n                                                    \
    \        if myString[i] != myString[length/26] {\n                           \
    \                                     if myString[i] != myString[length/27] {\n\
    \                                                    if myString[i] != myString[length/28]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/29] {\n                                                    \
    \        if myString[i] != myString[length/30] {\n                           \
    \                                     if myString[i] != myString[length/31] {\n\
    \                                                    if myString[i] != myString[length/32]\
    \ {\n                                                        if myString[i] !=\
    \ myString[length/33] {\n                                                    \
    \        if myString[i] != myString[length/34] {\n                           \
    \                                     if myString[i] != myString[length/35] {\n\
    \                                                    if myString[i] != myString[",
  "    // Write code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length] {\n  \
    \          prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n", "    length := len(myString)\n    prime := true\n    for i := 2; i < length;\
    \ i++ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ % i == 0 {\n                prime = false\n                break\n         \
    \   }\n        }\n    }\n    return prime\n}\n", "    // Your code here\n    length\
    \ := len(myString)\n    primes := make([]int, length)\n    for i := 0; i < length;\
    \ i++ {\n        if myString[i] > 0 && myString[i] < length {\n            primes[i]\
    \ = 1\n        }\n    }\n    for i := 0; i < length-1; i++ {\n        for j :=\
    \ i + 1; j < length; j++ {\n            if primes[j] == 0 {\n                break\n\
    \            }\n            if myString[i] == myString[j] {\n                primes[j]\
    \ = 1\n            }\n        }\n    }\n    for i := 0; i < length-1; i++ {\n\
    \        if primes[i] == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    // Your code here\n    length := len(myString)\n   \
    \ prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length] {\n            prime = false\n            break\n        }\n\
    \    }\n    return prime\n}\n", "    // Write your code here\n    length := len(myString)\n\
    \    prime := true\n    \n    for i := 2; i < length/2; i++ {\n        if myString[i]\
    \ != myString[length-i-1] {\n            prime = false\n            break\n  \
    \      }\n    }\n    \n    return prime\n}\n", "    // Write your code here\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i <= length/2;\
    \ i++ {\n        if myString[i] != myString[length-i] {\n            prime = false\n\
    \            break\n        }\n    }\n    return prime\n}\n", "    length := len(myString)\n\
    \    primes := make([]bool, length)\n    primes[0] = true\n    for i := 1; i <\
    \ length; i++ {\n        if primes[i] {\n            for j := 1; j < i; j++ {\n\
    \                if myString[j] != 'a' {\n                    break\n        \
    \        }\n            }\n            if j == i {\n                primes[i]\
    \ = false\n            }\n        }\n    }\n    return primes[length-1]\n}\n",
  "    // Your code here\n    length := len(myString)\n    prime := true\n    for\
    \ i := 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n\
    \            if myString[i] % i == 0 {\n                prime = false\n      \
    \      }\n        }\n    }\n    return prime\n}\n", "    // Write your logic here\n\
    \    length := len(myString)\n    prime := true\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[length-1] {\n            if myString[i]\
    \ != myString[length-i-1] {\n                prime = false\n                break\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    length := len(myString)\n\
    \    prime := true\n    for i := 2; i < length; i++ {\n        if myString[i]\
    \ != myString[length-1] {\n            if myString[i] % i == 0 {\n           \
    \     prime = false\n                break\n            }\n        }\n    }\n\
    \    return prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
