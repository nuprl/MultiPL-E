language: go_test.go
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgylcxb01_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgylcxb01_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgylcxb01_test.go:50:76: undefined: None

    /tmp/tmpgylcxb01_test.go:51:79: undefined: None

    /tmp/tmpgylcxb01_test.go:55:60: undefined: None

    /tmp/tmpgylcxb01_test.go:56:61: undefined: None

    /tmp/tmpgylcxb01_test.go:57:78: undefined: None

    /tmp/tmpgylcxb01_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr9p1zw2i_test.go:42:76: undefined: None

    /tmp/tmpr9p1zw2i_test.go:43:79: undefined: None

    /tmp/tmpr9p1zw2i_test.go:47:60: undefined: None

    /tmp/tmpr9p1zw2i_test.go:48:61: undefined: None

    /tmp/tmpr9p1zw2i_test.go:49:78: undefined: None

    /tmp/tmpr9p1zw2i_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprk0pxnn__test.go:20:17: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:21:16: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:52:76: undefined: None

    /tmp/tmprk0pxnn__test.go:53:79: undefined: None

    /tmp/tmprk0pxnn__test.go:57:60: undefined: None

    /tmp/tmprk0pxnn__test.go:58:61: undefined: None

    /tmp/tmprk0pxnn__test.go:59:78: undefined: None

    /tmp/tmprk0pxnn__test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvpv8ru9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmprvpv8ru9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmprvpv8ru9_test.go:53:76: undefined: None

    /tmp/tmprvpv8ru9_test.go:54:79: undefined: None

    /tmp/tmprvpv8ru9_test.go:58:60: undefined: None

    /tmp/tmprvpv8ru9_test.go:59:61: undefined: None

    /tmp/tmprvpv8ru9_test.go:60:78: undefined: None

    /tmp/tmprvpv8ru9_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgg50td45_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:42:76: undefined: None

    /tmp/tmpgg50td45_test.go:43:79: undefined: None

    /tmp/tmpgg50td45_test.go:47:60: undefined: None

    /tmp/tmpgg50td45_test.go:48:61: undefined: None

    /tmp/tmpgg50td45_test.go:49:78: undefined: None

    /tmp/tmpgg50td45_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr9p1zw2i_test.go:42:76: undefined: None

    /tmp/tmpr9p1zw2i_test.go:43:79: undefined: None

    /tmp/tmpr9p1zw2i_test.go:47:60: undefined: None

    /tmp/tmpr9p1zw2i_test.go:48:61: undefined: None

    /tmp/tmpr9p1zw2i_test.go:49:78: undefined: None

    /tmp/tmpr9p1zw2i_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        smallest = nil\n    }\n    if largest == nil {\n        largest\
    \ = nil\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2nsez7b_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpb2nsez7b_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpb2nsez7b_test.go:55:76: undefined: None

    /tmp/tmpb2nsez7b_test.go:56:79: undefined: None

    /tmp/tmpb2nsez7b_test.go:60:60: undefined: None

    /tmp/tmpb2nsez7b_test.go:61:61: undefined: None

    /tmp/tmpb2nsez7b_test.go:62:78: undefined: None

    /tmp/tmpb2nsez7b_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largestInt\
    \ := 0\n    smallestInt := 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallestInt = v\n        } else {\n            largestInt = v\n \
    \       }\n    }\n    if smallestInt == 0 {\n        return nil\n    }\n    if\
    \ largestInt == 0 {\n        return nil\n    }\n    return []interface{}{largestInt,\
    \ smallestInt}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvf9vekei_test.go:45:76: undefined: None

    /tmp/tmpvf9vekei_test.go:46:79: undefined: None

    /tmp/tmpvf9vekei_test.go:50:60: undefined: None

    /tmp/tmpvf9vekei_test.go:51:61: undefined: None

    /tmp/tmpvf9vekei_test.go:52:78: undefined: None

    /tmp/tmpvf9vekei_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tbl124_test.go:41:76: undefined: None

    /tmp/tmpk_tbl124_test.go:42:79: undefined: None

    /tmp/tmpk_tbl124_test.go:46:60: undefined: None

    /tmp/tmpk_tbl124_test.go:47:61: undefined: None

    /tmp/tmpk_tbl124_test.go:48:78: undefined: None

    /tmp/tmpk_tbl124_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        smallest = nil\n    }\n    if largest == nil {\n        largest\
    \ = nil\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2nsez7b_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpb2nsez7b_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpb2nsez7b_test.go:55:76: undefined: None

    /tmp/tmpb2nsez7b_test.go:56:79: undefined: None

    /tmp/tmpb2nsez7b_test.go:60:60: undefined: None

    /tmp/tmpb2nsez7b_test.go:61:61: undefined: None

    /tmp/tmpb2nsez7b_test.go:62:78: undefined: None

    /tmp/tmpb2nsez7b_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgg50td45_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:42:76: undefined: None

    /tmp/tmpgg50td45_test.go:43:79: undefined: None

    /tmp/tmpgg50td45_test.go:47:60: undefined: None

    /tmp/tmpgg50td45_test.go:48:61: undefined: None

    /tmp/tmpgg50td45_test.go:49:78: undefined: None

    /tmp/tmpgg50td45_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgg50td45_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:42:76: undefined: None

    /tmp/tmpgg50td45_test.go:43:79: undefined: None

    /tmp/tmpgg50td45_test.go:47:60: undefined: None

    /tmp/tmpgg50td45_test.go:48:61: undefined: None

    /tmp/tmpgg50td45_test.go:49:78: undefined: None

    /tmp/tmpgg50td45_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest negative int\n        } else if v > 0 {\n\
    \            smallest = v // smallest is smallest positive int\n        }\n  \
    \  }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsulsyc6_test.go:41:76: undefined: None

    /tmp/tmptsulsyc6_test.go:42:79: undefined: None

    /tmp/tmptsulsyc6_test.go:46:60: undefined: None

    /tmp/tmptsulsyc6_test.go:47:61: undefined: None

    /tmp/tmptsulsyc6_test.go:48:78: undefined: None

    /tmp/tmptsulsyc6_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      largest = v\n        } else {\n            smallest = v\n        }\n  \
    \  }\n    if smallest == -1 {\n        return nil\n    }\n    if largest == -1\
    \ {\n        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0974t81_test.go:32:16: cannot use smallest (variable of type int) as
    type []interface{} in return statement

    /tmp/tmpq0974t81_test.go:44:76: undefined: None

    /tmp/tmpq0974t81_test.go:45:79: undefined: None

    /tmp/tmpq0974t81_test.go:49:60: undefined: None

    /tmp/tmpq0974t81_test.go:50:61: undefined: None

    /tmp/tmpq0974t81_test.go:51:78: undefined: None

    /tmp/tmpq0974t81_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := -1, -1\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == -1 {\n        return nil\n    }\n    if\
    \ largest == -1 {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwh7vqpch_test.go:32:16: cannot use smallest (variable of type int) as
    type []interface{} in return statement

    /tmp/tmpwh7vqpch_test.go:44:76: undefined: None

    /tmp/tmpwh7vqpch_test.go:45:79: undefined: None

    /tmp/tmpwh7vqpch_test.go:49:60: undefined: None

    /tmp/tmpwh7vqpch_test.go:50:61: undefined: None

    /tmp/tmpwh7vqpch_test.go:51:78: undefined: None

    /tmp/tmpwh7vqpch_test.go:52:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprk0pxnn__test.go:20:17: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:21:16: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:52:76: undefined: None

    /tmp/tmprk0pxnn__test.go:53:79: undefined: None

    /tmp/tmprk0pxnn__test.go:57:60: undefined: None

    /tmp/tmprk0pxnn__test.go:58:61: undefined: None

    /tmp/tmprk0pxnn__test.go:59:78: undefined: None

    /tmp/tmprk0pxnn__test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return []interface{}{None, None}\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1snimqxu_test.go:21:30: undefined: None

    /tmp/tmp1snimqxu_test.go:43:76: undefined: None

    /tmp/tmp1snimqxu_test.go:44:79: undefined: None

    /tmp/tmp1snimqxu_test.go:48:60: undefined: None

    /tmp/tmp1snimqxu_test.go:49:61: undefined: None

    /tmp/tmp1snimqxu_test.go:50:78: undefined: None

    /tmp/tmp1snimqxu_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 1\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuu106zek_test.go:41:76: undefined: None

    /tmp/tmpuu106zek_test.go:42:79: undefined: None

    /tmp/tmpuu106zek_test.go:46:60: undefined: None

    /tmp/tmpuu106zek_test.go:47:61: undefined: None

    /tmp/tmpuu106zek_test.go:48:78: undefined: None

    /tmp/tmpuu106zek_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else if v > 0 {\n            largest = v\n\
    \        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgakxadm6_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgakxadm6_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgakxadm6_test.go:42:76: undefined: None

    /tmp/tmpgakxadm6_test.go:43:79: undefined: None

    /tmp/tmpgakxadm6_test.go:47:60: undefined: None

    /tmp/tmpgakxadm6_test.go:48:61: undefined: None

    /tmp/tmpgakxadm6_test.go:49:78: undefined: None

    /tmp/tmpgakxadm6_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8r7y_g94_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp8r7y_g94_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp8r7y_g94_test.go:52:76: undefined: None

    /tmp/tmp8r7y_g94_test.go:53:79: undefined: None

    /tmp/tmp8r7y_g94_test.go:57:60: undefined: None

    /tmp/tmp8r7y_g94_test.go:58:61: undefined: None

    /tmp/tmp8r7y_g94_test.go:59:78: undefined: None

    /tmp/tmp8r7y_g94_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgylcxb01_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgylcxb01_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgylcxb01_test.go:50:76: undefined: None

    /tmp/tmpgylcxb01_test.go:51:79: undefined: None

    /tmp/tmpgylcxb01_test.go:55:60: undefined: None

    /tmp/tmpgylcxb01_test.go:56:61: undefined: None

    /tmp/tmpgylcxb01_test.go:57:78: undefined: None

    /tmp/tmpgylcxb01_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjjol1wnm_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpjjol1wnm_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpjjol1wnm_test.go:50:76: undefined: None

    /tmp/tmpjjol1wnm_test.go:51:79: undefined: None

    /tmp/tmpjjol1wnm_test.go:55:60: undefined: None

    /tmp/tmpjjol1wnm_test.go:56:61: undefined: None

    /tmp/tmpjjol1wnm_test.go:57:78: undefined: None

    /tmp/tmpjjol1wnm_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot5p_6_h_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpot5p_6_h_test.go:52:76: undefined: None

    /tmp/tmpot5p_6_h_test.go:53:79: undefined: None

    /tmp/tmpot5p_6_h_test.go:57:60: undefined: None

    /tmp/tmpot5p_6_h_test.go:58:61: undefined: None

    /tmp/tmpot5p_6_h_test.go:59:78: undefined: None

    /tmp/tmpot5p_6_h_test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = nil\n            break\n        }\n        if v > 0 {\n\
    \            largest = nil\n            break\n        }\n        if smallest\
    \ == nil {\n            smallest = v\n        } else if v < smallest {\n     \
    \       smallest = v\n        }\n        if largest == nil {\n            largest\
    \ = v\n        } else if v > largest {\n            largest = v\n        }\n \
    \   }\n    if smallest == nil {\n        return nil\n    }\n    if largest ==\
    \ nil {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbjwzpw8r_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpbjwzpw8r_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpbjwzpw8r_test.go:58:76: undefined: None

    /tmp/tmpbjwzpw8r_test.go:59:79: undefined: None

    /tmp/tmpbjwzpw8r_test.go:63:60: undefined: None

    /tmp/tmpbjwzpw8r_test.go:64:61: undefined: None

    /tmp/tmpbjwzpw8r_test.go:65:78: undefined: None

    /tmp/tmpbjwzpw8r_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is largest\n        } else {\n            smallest\
    \ = v // smallest is smallest\n        }\n    }\n    if smallest == 0 {\n    \
    \    return nil\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc\
    \ TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
    \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7,\
    \ 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp23fyhwrj_test.go:41:76: undefined: None

    /tmp/tmp23fyhwrj_test.go:42:79: undefined: None

    /tmp/tmp23fyhwrj_test.go:46:60: undefined: None

    /tmp/tmp23fyhwrj_test.go:47:61: undefined: None

    /tmp/tmp23fyhwrj_test.go:48:78: undefined: None

    /tmp/tmp23fyhwrj_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5bk0n94v_test.go:41:76: undefined: None

    /tmp/tmp5bk0n94v_test.go:42:79: undefined: None

    /tmp/tmp5bk0n94v_test.go:46:60: undefined: None

    /tmp/tmp5bk0n94v_test.go:47:61: undefined: None

    /tmp/tmp5bk0n94v_test.go:48:78: undefined: None

    /tmp/tmp5bk0n94v_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tbl124_test.go:41:76: undefined: None

    /tmp/tmpk_tbl124_test.go:42:79: undefined: None

    /tmp/tmpk_tbl124_test.go:46:60: undefined: None

    /tmp/tmpk_tbl124_test.go:47:61: undefined: None

    /tmp/tmpk_tbl124_test.go:48:78: undefined: None

    /tmp/tmpk_tbl124_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgg50td45_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpgg50td45_test.go:42:76: undefined: None

    /tmp/tmpgg50td45_test.go:43:79: undefined: None

    /tmp/tmpgg50td45_test.go:47:60: undefined: None

    /tmp/tmpgg50td45_test.go:48:61: undefined: None

    /tmp/tmpgg50td45_test.go:49:78: undefined: None

    /tmp/tmpgg50td45_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiecthjqu_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpiecthjqu_test.go:53:76: undefined: None

    /tmp/tmpiecthjqu_test.go:54:79: undefined: None

    /tmp/tmpiecthjqu_test.go:58:60: undefined: None

    /tmp/tmpiecthjqu_test.go:59:61: undefined: None

    /tmp/tmpiecthjqu_test.go:60:78: undefined: None

    /tmp/tmpiecthjqu_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprk0pxnn__test.go:20:17: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:21:16: use of untyped nil in assignment

    /tmp/tmprk0pxnn__test.go:52:76: undefined: None

    /tmp/tmprk0pxnn__test.go:53:79: undefined: None

    /tmp/tmprk0pxnn__test.go:57:60: undefined: None

    /tmp/tmprk0pxnn__test.go:58:61: undefined: None

    /tmp/tmprk0pxnn__test.go:59:78: undefined: None

    /tmp/tmprk0pxnn__test.go:60:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    if len(lst)\
    \ == 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgplb30li_test.go:43:76: undefined: None

    /tmp/tmpgplb30li_test.go:44:79: undefined: None

    /tmp/tmpgplb30li_test.go:48:60: undefined: None

    /tmp/tmpgplb30li_test.go:49:61: undefined: None

    /tmp/tmpgplb30li_test.go:50:78: undefined: None

    /tmp/tmpgplb30li_test.go:51:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == nil {\n        return nil\n    }\n    if largest\
    \ == nil {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuoqjgayv_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpuoqjgayv_test.go:59:76: undefined: None

    /tmp/tmpuoqjgayv_test.go:60:79: undefined: None

    /tmp/tmpuoqjgayv_test.go:64:60: undefined: None

    /tmp/tmpuoqjgayv_test.go:65:61: undefined: None

    /tmp/tmpuoqjgayv_test.go:66:78: undefined: None

    /tmp/tmpuoqjgayv_test.go:67:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        smallest = nil\n    }\n    if largest == nil {\n        largest = nil\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmpiieu_9_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpmpiieu_9_test.go:58:76: undefined: None

    /tmp/tmpmpiieu_9_test.go:59:79: undefined: None

    /tmp/tmpmpiieu_9_test.go:63:60: undefined: None

    /tmp/tmpmpiieu_9_test.go:64:61: undefined: None

    /tmp/tmpmpiieu_9_test.go:65:78: undefined: None

    /tmp/tmpmpiieu_9_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = -v\n        } else {\n            smallest = v\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m3m40mm_test.go:41:76: undefined: None

    /tmp/tmp8m3m40mm_test.go:42:79: undefined: None

    /tmp/tmp8m3m40mm_test.go:46:60: undefined: None

    /tmp/tmp8m3m40mm_test.go:47:61: undefined: None

    /tmp/tmp8m3m40mm_test.go:48:78: undefined: None

    /tmp/tmp8m3m40mm_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = v\n        } else {\n            largest = v\n       \
    \ }\n    }\n    if smallest == nil && largest == nil {\n        return nil\n \
    \   }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxlvsmsja_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpxlvsmsja_test.go:42:76: undefined: None

    /tmp/tmpxlvsmsja_test.go:43:79: undefined: None

    /tmp/tmpxlvsmsja_test.go:47:60: undefined: None

    /tmp/tmpxlvsmsja_test.go:48:61: undefined: None

    /tmp/tmpxlvsmsja_test.go:49:78: undefined: None

    /tmp/tmpxlvsmsja_test.go:50:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{smallest, largest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc60dj_hs_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpc60dj_hs_test.go:58:76: undefined: None

    /tmp/tmpc60dj_hs_test.go:59:79: undefined: None

    /tmp/tmpc60dj_hs_test.go:63:60: undefined: None

    /tmp/tmpc60dj_hs_test.go:64:61: undefined: None

    /tmp/tmpc60dj_hs_test.go:65:78: undefined: None

    /tmp/tmpc60dj_hs_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 1\n    for _, v := range lst {\n        if v < smallest {\n \
    \           smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqi9k3akq_test.go:45:76: undefined: None

    /tmp/tmpqi9k3akq_test.go:46:79: undefined: None

    /tmp/tmpqi9k3akq_test.go:50:60: undefined: None

    /tmp/tmpqi9k3akq_test.go:51:61: undefined: None

    /tmp/tmpqi9k3akq_test.go:52:78: undefined: None

    /tmp/tmpqi9k3akq_test.go:53:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = v\n            }\n        } else {\n    \
    \        if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil && largest == nil {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6xs7e4vd_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp6xs7e4vd_test.go:50:76: undefined: None

    /tmp/tmp6xs7e4vd_test.go:51:79: undefined: None

    /tmp/tmp6xs7e4vd_test.go:55:60: undefined: None

    /tmp/tmp6xs7e4vd_test.go:56:61: undefined: None

    /tmp/tmp6xs7e4vd_test.go:57:78: undefined: None

    /tmp/tmp6xs7e4vd_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            smallest = nil\n            break\n        }\n        if smallest\
    \ == nil || v < smallest.(int) {\n            smallest = v\n        }\n      \
    \  if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0d8rhz0d_test.go:20:17: use of untyped nil in assignment

    /tmp/tmp0d8rhz0d_test.go:21:16: use of untyped nil in assignment

    /tmp/tmp0d8rhz0d_test.go:50:76: undefined: None

    /tmp/tmp0d8rhz0d_test.go:51:79: undefined: None

    /tmp/tmp0d8rhz0d_test.go:55:60: undefined: None

    /tmp/tmp0d8rhz0d_test.go:56:61: undefined: None

    /tmp/tmp0d8rhz0d_test.go:57:78: undefined: None

    /tmp/tmp0d8rhz0d_test.go:58:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074611
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = smallest\n                smallest = v\n \
    \           }\n        } else {\n            if largest == nil {\n           \
    \     largest = v\n            } else {\n                smallest = largest\n\
    \                largest = v\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0it24uc_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpq0it24uc_test.go:55:76: undefined: None

    /tmp/tmpq0it24uc_test.go:56:79: undefined: None

    /tmp/tmpq0it24uc_test.go:60:60: undefined: None

    /tmp/tmpq0it24uc_test.go:61:61: undefined: None

    /tmp/tmpq0it24uc_test.go:62:78: undefined: None

    /tmp/tmpq0it24uc_test.go:63:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                smallest = nil\n            }\n        } else {\n  \
    \          if largest == nil {\n                largest = v\n            } else\
    \ {\n                largest = nil\n            }\n        }\n    }\n    if smallest\
    \ == nil {\n        return nil\n    }\n    if largest == nil {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnfnxg0kn_test.go:20:17: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:21:16: use of untyped nil in assignment

    /tmp/tmpnfnxg0kn_test.go:53:76: undefined: None

    /tmp/tmpnfnxg0kn_test.go:54:79: undefined: None

    /tmp/tmpnfnxg0kn_test.go:58:60: undefined: None

    /tmp/tmpnfnxg0kn_test.go:59:61: undefined: None

    /tmp/tmpnfnxg0kn_test.go:60:78: undefined: None

    /tmp/tmpnfnxg0kn_test.go:61:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    smallest\
    \ := nil\n    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if smallest == nil {\n                smallest = v\n            }\
    \ else {\n                largest = v\n            }\n        } else {\n     \
    \       if largest == nil {\n                largest = v\n            } else {\n\
    \                if v > largest {\n                    largest = v\n         \
    \       }\n                if v < smallest {\n                    smallest = v\n\
    \                }\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t\
    \ *testing.T) {\n  candidate := largest_smallest_integers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}), expected: []interface{}{None,\
    \ 1} },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2,\
    \ 1} },\n     { actual: candidate([]int{4, 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7,\
    \ 2} },\n     { actual: candidate([]int{7, 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9,\
    \ 2} },\n     { actual: candidate([]int{}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{0}), expected: []interface{}{None, None}\
    \ },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}), expected: []interface{}{-1,\
    \ None} },\n     { actual: candidate([]int{-6, -4, -4, -3, 1}), expected: []interface{}{-3,\
    \ 1} },\n     { actual: candidate([]int{-6, -4, -4, -3, -100, 1}), expected: []interface{}{-3,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj86twfe_test.go:20:17: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:21:16: use of untyped nil in assignment

    /tmp/tmptj86twfe_test.go:58:76: undefined: None

    /tmp/tmptj86twfe_test.go:59:79: undefined: None

    /tmp/tmptj86twfe_test.go:63:60: undefined: None

    /tmp/tmptj86twfe_test.go:64:61: undefined: None

    /tmp/tmptj86twfe_test.go:65:78: undefined: None

    /tmp/tmptj86twfe_test.go:66:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
- exit_code: 2
  program: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n\
    \    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a'\
    \ is\n// the largest of negative integers, and 'b' is the smallest\n// of positive\
    \ integers in a list.\n// If there is no negative or positive integers, return\
    \ them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1,\
    \ 3, 5, 7})\n// []interface{}{None, 1}\n// >>> largest_smallest_integers(int{})\n\
    // []interface{}{None, None}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{None,\
    \ None}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v\n        } else {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n\nfunc TestLargest_Smallest_Integers(t *testing.T) {\n  candidate\
    \ := largest_smallest_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{2,\
    \ 4, 1, 3, 5, 7, 0}), expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
    \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
    \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}),\
    \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3,\
    \ -5, -6}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1,\
    \ -3, -5, -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
    \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tbl124_test.go:41:76: undefined: None

    /tmp/tmpk_tbl124_test.go:42:79: undefined: None

    /tmp/tmpk_tbl124_test.go:46:60: undefined: None

    /tmp/tmpk_tbl124_test.go:47:61: undefined: None

    /tmp/tmpk_tbl124_test.go:48:78: undefined: None

    /tmp/tmpk_tbl124_test.go:49:81: undefined: None

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074610
