name: HumanEval_155_even_odd_count
language: go_test.go
prompt: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an integer. return a list that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n\
  // >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int)\
  \ []interface{} {\n"
tests: "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
  \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
  \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
  \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
  \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n  \
  \   { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    evens := []int{}\n    odds := []int{}\n    \n    for i := 0; i\
    \ < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens, i)\n\
    \        } else {\n            odds = append(odds, i)\n        }\n    }\n    \n\
    \    return []interface{}{evens, odds}\n}\n", "    even, odd := 0, 0\n    list\
    \ := []interface{}{}\n    for i := 0; i < num; i++ {\n        if num % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    \
    \    list = append(list, even, odd)\n    }\n    return list\n}\n", "    even,\
    \ odd := 0, 0\n    list := make([]interface{}, 0)\n    for i := 0; i < num; i++\
    \ {\n        if num % 2 == 0 {\n            even++\n        } else {\n       \
    \     odd++\n        }\n        list = append(list, even, odd)\n    }\n    return\
    \ list\n}\n", "    even, odd := 0, 0\n    list := make([]interface{}, 0)\n   \
    \ for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \      list = append(list, digit)\n    }\n    return list\n}\n", "    even, odd\
    \ := 0, 0\n    list := []interface{}{}\n    for i := 0; i < 10; i++ {\n      \
    \  if num%10 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        list = append(list, i)\n        num /= 10\n    }\n    return\
    \ list\n}\n", "    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens\n}\n", "    even, odd :=\
    \ 0, 0\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n          \
    \  even++\n        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    evenCount := 0\n    oddCount := 0\n    for num > 0 {\n    \
    \    digit, num := num%10, num/10\n        if digit % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n", "    even, odd := 0, 0\n    list := make([]interface{}, 0)\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        list = append(list, digit)\n    }\n    return list\n}\n", "    result\
    \ := make([]interface{}, 0)\n    evenCount := 0\n    oddCount := 0\n    for num\
    \ > 0 {\n        digit, num := num % 10, num / 10\n        if digit % 2 == 0 {\n\
    \            evenCount++\n        } else {\n            oddCount++\n        }\n\
    \        result = append(result, digit)\n    }\n    return append(result,\n  \
    \      evenCount,\n        oddCount,\n    )\n}\n", "    evenCount := 0\n    oddCount\
    \ := 0\n    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{evenCount, oddCount}\n}\n", "    evenCount := 0\n  \
    \  oddCount := 0\n    for i := 0; i < 10; i++ {\n        if num % 10 == 0 {\n\
    \            evenCount++\n        } else {\n            oddCount++\n        }\n\
    \        num /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n}\n",
  "    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n    for num\
    \ > 0 {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n \
    \           evenCount++\n        } else {\n            oddCount++\n        }\n\
    \        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n", "    evenCount := 0\n    oddCount := 0\n    result\
    \ := []interface{}{}\n    for num > 0 {\n        digit, num := num % 10, num /\
    \ 10\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n        result = append(result, digit)\n \
    \   }\n    return append([]interface{}{evenCount, oddCount}, result...)\n}\n",
  "    evens := []int{}\n    odds := []int{}\n    for i := 0; i < num; i++ {\n   \
    \     if num % 2 == 0 {\n            evens = append(evens, i)\n        } else\
    \ {\n            odds = append(odds, i)\n        }\n    }\n    return []interface{}{evens,\
    \ odds}\n}\n", "    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount, oddCount)\n    }\n    return result\n}\n", "    even, odd := 0, 0\n\
    \    list := []interface{}{}\n    for num > 0 {\n        digit, num := num%10,\
    \ num/10\n        if digit % 2 == 0 {\n            even++\n        } else {\n\
    \            odd++\n        }\n        list = append(list, digit)\n    }\n   \
    \ return list\n}\n", "    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n", "    even,\
    \ odd := 0, 0\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n   \
    \         even++\n        } else {\n            odd++\n        }\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    evens := make([]interface{}, 0)\n    odds\
    \ := make([]interface{}, 0)\n    \n    num /= 10\n    \n    for i := 0; i < num;\
    \ i++ {\n        if num%2 == 0 {\n            evens = append(evens, i)\n     \
    \   } else {\n            odds = append(odds, i)\n        }\n        num /= 10\n\
    \    }\n    \n    return evens\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
