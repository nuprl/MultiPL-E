language: go_test.go
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    result := make([]int, n+1)\n\
    \    result[n] = n+1\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n  \
    \          result[i+1] = result[i]\n        } else {\n            result[i+1]\
    \ = result[i] + 1\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpc4pm5vuw_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpc4pm5vuw_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpc4pm5vuw_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpc4pm5vuw_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpc4pm5vuw_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    if n%2 == 0 {\n        piles[1] =\
    \ piles[2] + (n+1)/2\n    } else {\n        piles[1] = piles[2]\n    }\n    return\
    \ piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpkaq4mto4_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i] = result[i-1] + i\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i] = result[i-1] + i/2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp9z70_d11_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp9z70_d11_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp9z70_d11_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp9z70_d11_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=3)\
    \ %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp9z70_d11_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=21) %!s(int=28)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    if n%2 == 0 {\n        stones[1] = stones[2] = stones[3] = 1\n    }\
    \ else {\n        stones[1] = stones[2] = stones[3] = stones[4] = 1\n    }\n \
    \   for i := 5; i <= n; i++ {\n        stones[i] = stones[i-1] + stones[i-2]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5yiswiqu_test.go:25:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    index := 1\n    for i := 1; i <\
    \ n; i++ {\n        if i%2 == 0 {\n            result[index] = result[index-1]\
    \ + i\n        } else {\n            result[index] = result[index-1] + 2*i\n \
    \       }\n        index++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpj79bhn89_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpj79bhn89_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=10) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpj79bhn89_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=10) %!s(int=14) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpj79bhn89_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=2) %!s(int=4)\
    \ %!s(int=10) %!s(int=14) %!s(int=24) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpj79bhn89_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=10) %!s(int=14) %!s(int=24) %!s(int=30) %!s(int=44)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n+1\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqpluto2w_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    i := 0\n    for ; n > 0; n-- {\n        if n%2 == 0 {\n            result[i]\
    \ = n\n            i += 2\n        } else {\n            result[i] = n\n     \
    \       i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0001d0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpb5be8s3v_test.go:24\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpb5be8s3v_test.go:41\
    \ +0x685\ntesting.tRunner(0xc00019b040, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = result[n/2]\n    } else {\n        result[1] = result[n/2] + 1\n    }\n  \
    \  for i := 2; i <= n; i++ {\n        result[i] = result[i-1] + result[i-2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp9gaj7bc3_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp9gaj7bc3_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp9gaj7bc3_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp9gaj7bc3_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp9gaj7bc3_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)\
    \ %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add one for first level\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            result[i] = n\n        } else\
    \ {\n            result[i] = n + 1\n        }\n        n = result[i]\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpv7qe8kzm_test.go:23\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpv7qe8kzm_test.go:39\
    \ +0x6e6\ntesting.tRunner(0xc000103380, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i*2 <= n; i++\
    \ {\n        if n%2 == 0 {\n            result[i] = result[i*2]\n        } else\
    \ {\n            result[i] = result[i*2+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_cg3x_sa_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if n%2 == 0 {\n            result[i] = result[i-1] + i\n        } else {\n\
    \            result[i] = result[i-1] + i/2\n        }\n        i += 2\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8s4j3vtc_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8s4j3vtc_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8s4j3vtc_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8s4j3vtc_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8s4j3vtc_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=7)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return append(make_a_pile(n/2),\
    \ make_a_pile(n/2+1))\n    }\n    return append(make_a_pile(n/2), make_a_pile(n/2+1),\
    \ make_a_pile(n/2+2))\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7yqquwh_test.go:23:41: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    /tmp/tmpn7yqquwh_test.go:25:37: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    /tmp/tmpn7yqquwh_test.go:25:57: cannot use make_a_pile(n / 2 + 2) (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = 1\n    } else {\n        result[2] = 1\n    }\n    for i := 3; i <= n; i++\
    \ {\n        result[i] = result[i-1] + result[i-2]\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmppwt9if5m_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmppwt9if5m_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmppwt9if5m_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmppwt9if5m_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmppwt9if5m_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    result\
    \ := append(result, n)\n    if n%2 == 0 {\n        for i := 0; i < n; i++ {\n\
    \            result[i+1] = result[i] + 1\n        }\n    } else {\n        for\
    \ i := 0; i < n; i++ {\n            result[i+1] = result[i] + 2\n        }\n \
    \   }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m152mrm_test.go:23:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    i := 0\n    for i < n {\n        if n%2 == 0 {\n            result[i] = n\n\
    \            i += 2\n        } else {\n            result[i] = n\n           \
    \ i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxj366yzz_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=0) %!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i] = result[i-1] + 2\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i] = result[i-1] + 1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpsweudvep_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpsweudvep_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpsweudvep_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpsweudvep_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=5)\
    \ %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpsweudvep_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    if n%2 == 0 {\n        stones[1] = stones[0] + 1\n    } else {\n  \
    \      stones[1] = stones[0]\n    }\n    for i := 2; i < n; i++ {\n        stones[i]\
    \ = stones[i-1] + stones[i-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvrqrjqg4_test.go:52: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvrqrjqg4_test.go:52: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvrqrjqg4_test.go:52:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=10) %!s(int=15) %!s(int=25) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvrqrjqg4_test.go:52: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=13)\
    \ %!s(int=20) %!s(int=33) %!s(int=53) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvrqrjqg4_test.go:52: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112) %!s(int=181)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for ; i+1 < n; i+=2\
    \ {\n        result[i] = result[i-1] + 1\n    }\n    if n%2 == 0 {\n        result[i]\
    \ = result[i-1] + 1\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpizfx3xtc_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpizfx3xtc_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpizfx3xtc_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpizfx3xtc_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpizfx3xtc_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpeu83_2i8_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is already filled\
    \ with stones\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n          \
    \  result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpftk570jo_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpftk570jo_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpftk570jo_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpftk570jo_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=0) %!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpftk570jo_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // Add one level\n    for i := 0; i < n; i++\
    \ {\n        result[i] = n\n        if i%2 == 0 {\n            result[i] += result[i/2]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpww0qxoyz_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=8) %!s(int=4) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpww0qxoyz_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=10) %!s(int=5) %!s(int=10) %!s(int=5) %!s(int=15)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpww0qxoyz_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=12)\
    \ %!s(int=6) %!s(int=12) %!s(int=6) %!s(int=18) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpww0qxoyz_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=14) %!s(int=7) %!s(int=14)\
    \ %!s(int=7) %!s(int=21) %!s(int=7) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpww0qxoyz_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=18)\
    \ %!s(int=9) %!s(int=18) %!s(int=9) %!s(int=27) %!s(int=9) %!s(int=18) %!s(int=9)\
    \ %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073465
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n\n    result := make([]int, n+1)\n  \
    \  result[0] = n\n    i := 1\n    for ; i*2 <= n; i++ {\n        if n%i == 0 {\n\
    \            result[i] = n//i\n            break\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpo65mfqzw_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpo65mfqzw_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpo65mfqzw_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpo65mfqzw_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpo65mfqzw_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073465
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i*2 <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i] = result[i*2]\n        } else\
    \ {\n            result[i] = result[i*2+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7]\
    \ with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpdsgvhtlq_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpdsgvhtlq_test.go:42\
    \ +0x74c\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + i\n        } else {\n\
    \            result[i] = result[i-1] + i/2\n        }\n        i++\n    }\n  \
    \  return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7x5qw33c_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15) %!s(int=18)\
    \ %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n+1\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqpluto2w_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqpluto2w_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    if n%2 == 0 {\n        stones[1] = stones[2] = stones[3]\n    } else\
    \ {\n        stones[1] = stones[2] = stones[3] = stones[4]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdizt6hrc_test.go:25:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add 1 for the first level\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            result[i] = n\n        } else\
    \ {\n            result[i] = n+1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpsia9ivt0_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073467
- exit_code: null
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    r := make([]int, n+1)\n\
    \    r[n] = n\n    i := 0\n    for {\n        if i+1 == n {\n            break\n\
    \        }\n        if i+1 == n+1 {\n            r[i+1] = i+1\n            break\n\
    \        }\n        if i+2 == n+1 {\n            r[i+1] = i+1\n            r[i+2]\
    \ = i+2\n            break\n        }\n        r[i+1] = i+1\n        r[i+2] =\
    \ i+2\n    }\n    return r\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + i\n        } else {\n\
    \            result[i] = result[i-1] + i/2\n        }\n        i++\n    }\n  \
    \  return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7x5qw33c_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=2)\
    \ %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7x5qw33c_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=7) %!s(int=9) %!s(int=15) %!s(int=18)\
    \ %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6]\
    \ = stones[7] = stones[8] = stones[9] = stones[10] = stones[11] = stones[12] =\
    \ stones[13] = stones[14] = stones[15] = stones[16] = stones[17] = stones[18]\
    \ = stones[19] = stones[20] = stones[21] = stones[22] = stones[23] = stones[24]\
    \ = stones[25] = stones[26] = stones[27] = stones[28] = stones[29] = stones[30]\
    \ = stones[31] = stones[32] = stones[33] = stones[34] = stones[35] = stones[36]\
    \ = stones[37] = stones[38] = stones[39] = stones[40] = stones[41] = stones[42]\
    \ = stones[43] = stones[44] = stones[45] = stones[46] = stones[47] = stones[48]\
    \ = stones[49] = stones[50] = stones[51] = stones[52] = stones[53] = stones[54]\
    \ = stones[55] = stones[56] = stones[57] = stones[58] = stones[59] = stones[60]\
    \ = stones[61] = stones[62] = stones[63] = stones[64] = stones[65] = stones[66]\
    \ = stones[67] = stones[68] = stones[69] = stones[70] = stones[71] = stones[72]\
    \ = stones[73] = stones[74] = stones[75] = stones[76] = stones[77] = stones[78]\
    \ = stones[79] = stones[80] = stones[81] = stones[82] = stones[83] = stones[84]\
    \ = stones[85] = stones[86] = stones[87] = stones[88] = stones[89] = stones[90]\
    \ = stones[91] = stones[92] = stones[93] = stones[94] = stones[95] = stones[96]\
    \ = stones[97] = stones[98] = stones[99] = stones[100] = stones[101] = stones[102]\
    \ = stones[103] = stones[104] = stones[105] = stones[106] = stones[107] = stones[108]\
    \ = stones[109] = stones[110] = stones[111] = stones[112] = stones[113] = stones[114]\
    \ = stones[115] = stones[116] = stones[117] = stones[118] = stones[119] = stones[120]\
    \ = stones[121] = stones[122] = stones[\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3w6w1ujp_test.go:24:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp2kwmg7b2_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp2kwmg7b2_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp2kwmg7b2_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp2kwmg7b2_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp2kwmg7b2_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n+1\n        }\n        n = result[i]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpe46ywgzc_test.go:23\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpe46ywgzc_test.go:39\
    \ +0x6e6\ntesting.tRunner(0xc0001924e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    piles[1] = n / 2\n    if n%2 == 0\
    \ {\n        piles[2] = n / 4\n    } else {\n        piles[2] = n / 2\n    }\n\
    \    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpp8tt6vww_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n\n    result := make([]int, n+1)\n  \
    \  i := 0\n    for ; n > 0; n-- {\n        if n%2 == 0 {\n            result[i]\
    \ = n\n            i++\n        } else {\n            result[i] = n + 1\n    \
    \        i += 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6]\
    \ with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmps3ory7f4_test.go:30\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmps3ory7f4_test.go:46\
    \ +0x63f\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // Add one for first level\n    for i := 0;\
    \ i < n; i++ {\n        result[i] = n\n        if i%2 == 0 {\n            result[i+1]\
    \ = result[i] + 1\n        } else {\n            result[i+1] = result[i]\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpnzphqnoh_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpnzphqnoh_test.go:39\
    \ +0x6b3\ntesting.tRunner(0xc0001a01a0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    return make([]int, n+2)\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpg_up6fqm_test.go:42: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__1 (0.00s)\n        tmpg_up6fqm_test.go:42: expected\
    \ '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__2\
    \ (0.00s)\n        tmpg_up6fqm_test.go:42: expected '[%!s(int=5) %!s(int=7) %!s(int=9)\
    \ %!s(int=11) %!s(int=13)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpg_up6fqm_test.go:42: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpg_up6fqm_test.go:42: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level has n stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i+1]\
    \ = n\n        } else {\n            result[i+1] = 2*n\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpb5srr7vk_test.go:25\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpb5srr7vk_test.go:38\
    \ +0x673\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    result := make([]int, n+1)\n\
    \    n /= 2\n    for i := 0; i < n; i++ {\n        result[i] = n\n    }\n    result[n]\
    \ = n\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7facp2f8_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7facp2f8_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7facp2f8_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=2)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7facp2f8_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7facp2f8_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i+1] = result[i] + 1\n        } else {\n\
    \            result[i+1] = result[i]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpwqzrxyxv_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpwqzrxyxv_test.go:40\
    \ +0x766\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add 1 for the first level\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            result[i] = n\n        } else\
    \ {\n            result[i] = n+1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpsia9ivt0_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpsia9ivt0_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    piles[1] = n / 2\n    if n%2 == 0\
    \ {\n        piles[2] = n / 3\n    } else {\n        piles[2] = n / 2 + 1\n  \
    \  }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpa60ru6a9_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpa60ru6a9_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpa60ru6a9_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpa60ru6a9_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=2)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpa60ru6a9_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        if i%2 == 0 {\n            result[i] = result[i-2] + result[i-1]\n\
    \        } else {\n            result[i] = result[i-2] + result[i-1] + 1\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpsfc34sjj_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpsfc34sjj_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=9) %!s(int=13)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpsfc34sjj_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=13) %!s(int=19) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpsfc34sjj_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=13) %!s(int=19) %!s(int=33) %!s(int=52)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpsfc34sjj_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=17) %!s(int=25) %!s(int=43) %!s(int=68) %!s(int=112)\
    \ %!s(int=180)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    result[1] = n\n    if n%2 == 0 {\n\
    \        result[2] = result[1]/2\n    } else {\n        result[2] = result[1]/2\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp310oq5vz_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp310oq5vz_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp310oq5vz_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp310oq5vz_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp310oq5vz_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbf_1x5wa_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    piles := make([]int, n+1)\n    piles[0]\
    \ = n\n    piles[1] = n / 2\n    if n%2 == 0 {\n        piles[2] = n / 2\n   \
    \ } else {\n        piles[2] = n - 1\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpi5q1lub5_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpi5q1lub5_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpi5q1lub5_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpi5q1lub5_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=3)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpi5q1lub5_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 2\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = n\n        if i%2 == 0 {\n            n += 2\n        } else {\n         \
    \   n += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpckztuajl_test.go:22\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpckztuajl_test.go:39\
    \ +0x5df\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = result[n/2]\n    } else {\n        result[1] = result[n/2] + 1\n    }\n  \
    \  return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpexcpow6f_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpexcpow6f_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpexcpow6f_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpexcpow6f_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpexcpow6f_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i+1 < n; i++ {\n\
    \        if i%2 == 0 {\n            result[i+1] = result[i] + 1\n        } else\
    \ {\n            result[i+1] = result[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpdxgzwxmj_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpdxgzwxmj_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpdxgzwxmj_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpdxgzwxmj_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpdxgzwxmj_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        result[i] = n\n  \
    \      if n%2 == 0 {\n            i += 2\n        } else {\n            i += 3\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmphiyhe654_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i+1] = n\n        } else {\n            result[i+1] = result[i]\
    \ + 2\n        }\n        i += 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp2tcilacr_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp2tcilacr_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp2tcilacr_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp2tcilacr_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=0)\
    \ %!s(int=6) %!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp2tcilacr_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = result[n-1] + 1\n    } else {\n        result[1] = result[n-1]\n    }\n  \
    \  return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4j5i99t7_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    i\
    \ := 0\n    for j := 0; j < n; j++ {\n        if j%2 == 0 {\n            result[i]\
    \ = j + 1\n            i += 2\n        } else {\n            result[i] = j + 1\n\
    \            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 4 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpnrkojb81_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpnrkojb81_test.go:43\
    \ +0x6a5\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + i\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpy7yj4cin_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpy7yj4cin_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpy7yj4cin_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpy7yj4cin_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpy7yj4cin_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.251s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result := append(result, n)\n    if n%2 == 0 {\n  \
    \      for i := 0; i < n; i++ {\n            result[i+1] = result[i] + 1\n   \
    \     }\n    } else {\n        for i := 0; i < n; i++ {\n            result[i+1]\
    \ = result[i] + 2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nf3qzr6_test.go:20:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[0]\n    if n%2\
    \ == 0 {\n        stones[2] = stones[1]\n    } else {\n        stones[2] = stones[0]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpj6tkva_r_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpj6tkva_r_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpj6tkva_r_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpj6tkva_r_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpj6tkva_r_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return [3]int{n}\n\
    \    }\n    piles := make([]int, n+1)\n    piles[0] = n\n    piles[1] = n - 1\n\
    \    piles[2] = n - 2\n    piles[3] = n - 3\n    piles[4] = n - 4\n    piles[5]\
    \ = n - 5\n    piles[6] = n - 6\n    piles[7] = n - 7\n    piles[8] = n - 8\n\
    \    piles[9] = n - 9\n    piles[10] = n - 10\n    piles[11] = n - 11\n    piles[12]\
    \ = n - 12\n    piles[13] = n - 13\n    piles[14] = n - 14\n    piles[15] = n\
    \ - 15\n    piles[16] = n - 16\n    piles[17] = n - 17\n    piles[18] = n - 18\n\
    \    piles[19] = n - 19\n    piles[20] = n - 20\n    piles[21] = n - 21\n    piles[22]\
    \ = n - 22\n    piles[23] = n - 23\n    piles[24] = n - 24\n    piles[25] = n\
    \ - 25\n    piles[26] = n - 26\n    piles[27] = n - 27\n    piles[28] = n - 28\n\
    \    piles[29] = n - 29\n    piles[30] = n - 30\n    piles[31] = n - 31\n    piles[32]\
    \ = n - 32\n    piles[33] = n - 33\n    piles[34] = n - 34\n    piles[35] = n\
    \ - 35\n    piles[36] = n - 36\n    piles[37] = n - 37\n    piles[38] = n - 38\n\
    \    piles[39] = n - 39\n    piles[40] = n - 40\n    piles[41] = n - 41\n    piles[42]\
    \ = n - 42\n    piles[43] = n - 43\n    piles[44] = n - 44\n    piles[45] = n\
    \ - 45\n    piles[46] = n - 46\n    piles[47] = n - 47\n    piles[48] = n - 48\n\
    \    piles[49] = n - 49\n    piles[50] = n - 50\n    piles[51] = n - 51\n    piles[52]\
    \ = n - 52\n    piles[53] = n - 53\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddicafat_test.go:80:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    index\
    \ := 0\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[index]\
    \ = n\n            index++\n        } else {\n            result[index] = n+1\n\
    \            index++\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp6gxu8016_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp6gxu8016_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp6gxu8016_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp6gxu8016_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp6gxu8016_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level has n stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz1tc2qqg_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    for i := 2; i <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        }\
    \ else {\n            result[i] = result[i-1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmptb0jk29p_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmptb0jk29p_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmptb0jk29p_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmptb0jk29p_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmptb0jk29p_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11) %!s(int=12) %!s(int=12)\
    \ %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[2] = n\n    if n%2 == 0 {\n        stones[2] = stones[2] + stones[2-1]\n\
    \    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpt_ola3fl_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpt_ola3fl_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpt_ola3fl_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpt_ola3fl_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpt_ola3fl_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i*n+1 <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i+1] = i\n        } else {\n  \
    \          result[i+1] = i/2\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvzgzh4lr_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvzgzh4lr_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvzgzh4lr_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvzgzh4lr_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvzgzh4lr_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    i := 1\n    for j := 1; j < n; j++\
    \ {\n        if n%2 == 0 {\n            result[i] = result[i-1] + result[i-2]\n\
    \        } else {\n            result[i] = result[i-1] + result[i-2] + result[i-3]\n\
    \        }\n        i += 2\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmps_ow_395_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmps_ow_395_test.go:40\
    \ +0x753\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    piles[1] = n / 2\n    if n%2 == 0\
    \ {\n        piles[2] = n / 4\n    } else {\n        piles[2] = n / 2\n    }\n\
    \    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpp8tt6vww_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpp8tt6vww_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level has n stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz1tc2qqg_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmps0_0nn8g_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.257s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + i\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + i/2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp9co2gk_a_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp9co2gk_a_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp9co2gk_a_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp9co2gk_a_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp9co2gk_a_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=21)\
    \ %!s(int=28)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.197s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if n%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmplnkpbg5k_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmplnkpbg5k_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmplnkpbg5k_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmplnkpbg5k_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=1) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmplnkpbg5k_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpeu83_2i8_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n := n\n    for i := 0; i < n; i++ {\n        if n%2\
    \ == 0 {\n            result[i] = result[i] + n\n        } else {\n          \
    \  result[i] = result[i] + n + 1\n        }\n        n = n / 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3_yrddxe_test.go:20:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2] = stones[3]\n    } else {\n        stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppnye7sfv_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8nzq88do_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmps0_0nn8g_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmps0_0nn8g_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.257s\nFAIL\n"
  timestamp: 1660073471
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\
    \ + []int{n}\n    }\n    return make_a_pile(n/2) + []int{n-1, n}\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpou5ugt3a_test.go:23:16: invalid operation: operator + not defined on make_a_pile(n
    / 2) (value of type []int)

    /tmp/tmpou5ugt3a_test.go:25:12: invalid operation: operator + not defined on make_a_pile(n
    / 2) (value of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for ; i+1 < n; i++ {\n\
    \        if i%2 == 0 {\n            result[i+1] = result[i] + 1\n        } else\
    \ {\n            result[i+1] = result[i]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpri6eghst_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpri6eghst_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpri6eghst_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpri6eghst_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpri6eghst_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + result[i/2]\n       \
    \ }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i+1] =\
    \ result[i] + result[i/2] + 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzu7yxnlm_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=32)\
    \ %!s(int=40)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[1<<1] = 1\n    stones[1<<2] = 2\n    stones[1<<3] = 3\n    stones[1<<4]\
    \ = 4\n    stones[1<<5] = 5\n    stones[1<<6] = 6\n    stones[1<<7] = 7\n    stones[1<<8]\
    \ = 8\n    stones[1<<9] = 9\n    stones[1<<10] = 10\n    stones[1<<11] = 11\n\
    \    stones[1<<12] = 12\n    stones[1<<13] = 13\n    stones[1<<14] = 14\n    stones[1<<15]\
    \ = 15\n    stones[1<<16] = 16\n    stones[1<<17] = 17\n    stones[1<<18] = 18\n\
    \    stones[1<<19] = 19\n    stones[1<<20] = 20\n    stones[1<<21] = 21\n    stones[1<<22]\
    \ = 22\n    stones[1<<23] = 23\n    stones[1<<24] = 24\n    stones[1<<25] = 25\n\
    \    stones[1<<26] = 26\n    stones[1<<27] = 27\n    stones[1<<28] = 28\n    stones[1<<29]\
    \ = 29\n    stones[1<<30] = 30\n    stones[1<<31] = 31\n    stones[1<<32] = 32\n\
    \    stones[1<<33] = 33\n    stones[1<<34] = 34\n    stones[1<<35] = 35\n    stones[1<<36]\
    \ = 36\n    stones[1<<37] = 37\n    stones[1<<38] = 38\n    stones[1<<39] = 39\n\
    \    stones[1<<40] = 40\n    stones[1<<41] = 41\n    stones[1<<42] = 42\n    stones[1<<43]\
    \ = 43\n    stones[1<<44] = 44\n    stones[1<<45] = 45\n    stones[1<<46] = 46\n\
    \    stones[1<<47] = 47\n    stones[1<<48] = 48\n    stones[1<<49] = 49\n    stones[1<<50]\
    \ = 50\n    stones[1<<51] = 51\n    stones[1<<52] = 52\n    stones[1<<53] = 53\n\
    \    stones[1<<54\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq910uhnh_test.go:77:17: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073470
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n)\n    stones[0] = n\n    stones[1] = stones[0]\n    stones[2]\
    \ = stones[0]\n    if n%2 == 0 {\n        stones[2] = stones[1]\n    }\n    return\
    \ stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp34owchhn_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp34owchhn_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=4) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp34owchhn_test.go:46: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp34owchhn_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp34owchhn_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8nzq88do_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n+1\n    }\n    for i := 2; i <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i] = result[i-2] + result[i-1]\n\
    \        } else {\n            result[i] = result[i-2] + result[i-1]\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpmjvv5om1_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpmjvv5om1_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpmjvv5om1_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18) %!s(int=30)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpmjvv5om1_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=12) %!s(int=18) %!s(int=30) %!s(int=48)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpmjvv5om1_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=40) %!s(int=64) %!s(int=104)\
    \ %!s(int=168)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 1 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpkb91mqd8_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpkb91mqd8_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpkb91mqd8_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpkb91mqd8_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpkb91mqd8_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpbf_1x5wa_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=7)\
    \ %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpbf_1x5wa_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=11) %!s(int=11)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = stone\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmlj7rq0j_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level has n stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpz1tc2qqg_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpz1tc2qqg_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is already filled.\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n + 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp9ms1oj5g_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp9ms1oj5g_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp9ms1oj5g_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp9ms1oj5g_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp9ms1oj5g_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqgba5z_7_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 0 {\n        return []int{0, 0}\n    }\n    result := make([]int, n+1)\n \
    \   result[0] = n\n    if n%2 == 0 {\n        result[1] = n+1\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpg6gxs8l__test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpg6gxs8l__test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpg6gxs8l__test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpg6gxs8l__test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpg6gxs8l__test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.047s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpf8gvarrd_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpf8gvarrd_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpf8gvarrd_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpf8gvarrd_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpf8gvarrd_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.263s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    result[0]\
    \ = n\n    if n%2 == 0 {\n        result[1] = n + 1\n    } else {\n        result[1]\
    \ = n\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n \
    \ candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5ykxhql5_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp5ykxhql5_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp5ykxhql5_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5ykxhql5_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp5ykxhql5_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073475
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2] = stones[n-1]\n    } else {\n        stones[1] = stones[2] = stones[n-1]\
    \ + 1\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n \
    \ candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6tbk1p4q_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + i\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_98zojiz_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_98zojiz_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_98zojiz_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_98zojiz_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_98zojiz_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    n /= 2\n    return make([]int,\
    \ n+1)\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4qf9tqh3_test.go:43: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1 (0.00s)\n\
    \        tmp4qf9tqh3_test.go:43: expected '[%!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4qf9tqh3_test.go:43: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3 (0.00s)\n\
    \        tmp4qf9tqh3_test.go:43: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4qf9tqh3_test.go:43: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return append(make_a_pile(n/2),\
    \ make_a_pile(n/2))\n    }\n    return append(make_a_pile(n/2+1), make_a_pile(n/2+1))\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00cv_g5k_test.go:23:41: cannot use make_a_pile(n / 2) (value of type []int)
    as type int in argument to append

    /tmp/tmp00cv_g5k_test.go:25:39: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[1] = stones[2] = stones[3] = stones[4] = stones[5] = stones[6]\
    \ = stones[7] = stones[8] = stones[9] = stones[10] = stones[11] = stones[12] =\
    \ stones[13] = stones[14] = stones[15] = stones[16] = stones[17] = stones[18]\
    \ = stones[19] = stones[20] = stones[21] = stones[22] = stones[23] = stones[24]\
    \ = stones[25] = stones[26] = stones[27] = stones[28] = stones[29] = stones[30]\
    \ = stones[31] = stones[32] = stones[33] = stones[34] = stones[35] = stones[36]\
    \ = stones[37] = stones[38] = stones[39] = stones[40] = stones[41] = stones[42]\
    \ = stones[43] = stones[44] = stones[45] = stones[46] = stones[47] = stones[48]\
    \ = stones[49] = stones[50] = stones[51] = stones[52] = stones[53] = stones[54]\
    \ = stones[55] = stones[56] = stones[57] = stones[58] = stones[59] = stones[60]\
    \ = stones[61] = stones[62] = stones[63] = stones[64] = stones[65] = stones[66]\
    \ = stones[67] = stones[68] = stones[69] = stones[70] = stones[71] = stones[72]\
    \ = stones[73] = stones[74] = stones[75] = stones[76] = stones[77] = stones[78]\
    \ = stones[79] = stones[80] = stones[81] = stones[82] = stones[83] = stones[84]\
    \ = stones[85] = stones[86] = stones[87] = stones[88] = stones[89] = stones[90]\
    \ = stones[91] = stones[92] = stones[93] = stones[94] = stones[95] = stones[96]\
    \ = stones[97] = stones[98] = stones[99] = stones[100] = stones[101] = stones[102]\
    \ = stones[103] = stones[104] = stones[105] = stones[106] = stones[107] = stones[108]\
    \ = stones[109] = stones[110] = stones[111] = stones[112] = stones[113] = stones[114]\
    \ = stones[115] = stones[116] = stones[117] = stones[118] = stones[119] = stones[120]\
    \ = stones[121] = stones[122] = stones[\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3w6w1ujp_test.go:24:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073466
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 1 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        if i%2 == 1 {\n            result[i] = result[i-2] + result[i-1]\n\
    \        } else {\n            result[i] = result[i-2] + result[i-1] + 1\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5dufgej1_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=4) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp5dufgej1_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=18)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp5dufgej1_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=6) %!s(int=11) %!s(int=18) %!s(int=29)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5dufgej1_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=7) %!s(int=8)\
    \ %!s(int=15) %!s(int=24) %!s(int=39) %!s(int=64)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp5dufgej1_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=9) %!s(int=10) %!s(int=19) %!s(int=30) %!s(int=49) %!s(int=80) %!s(int=129)\
    \ %!s(int=210)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i+1] = result[i]\n        } else {\n   \
    \         result[i+1] = result[i] + 1\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmp8268k1cx_test.go:26\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmp8268k1cx_test.go:40\
    \ +0x74c\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n+1\n    }\n    for i := 2; i <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i] = result[i-2] + result[i/2]\n\
    \        } else {\n            result[i] = result[i-2] + result[i/2] + 1\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n\
    \  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvxfe2bt8_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvxfe2bt8_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=9) %!s(int=8)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvxfe2bt8_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=13) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvxfe2bt8_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=13) %!s(int=12) %!s(int=20) %!s(int=25)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvxfe2bt8_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=17) %!s(int=16) %!s(int=26) %!s(int=33) %!s(int=44)\
    \ %!s(int=49)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.293s\nFAIL\n"
  timestamp: 1660073477
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add one for first level\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            result[i+1] = n\n        }\
    \ else {\n            result[i+1] = 2*n\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmp5vq3_4tm_test.go:25\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmp5vq3_4tm_test.go:38\
    \ +0x673\ntesting.tRunner(0xc00019e000, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        result[i] = n\n  \
    \      if n%2 == 0 {\n            i += 2\n        } else {\n            i += 3\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmphiyhe654_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp7_xqfr4d_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp7_xqfr4d_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp7_xqfr4d_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp7_xqfr4d_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp7_xqfr4d_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    if n%2 == 0 {\n        for i := 1;\
    \ i < n; i++ {\n            piles[i+1] = piles[i]+1\n        }\n    } else {\n\
    \        for i := 1; i < n; i++ {\n            piles[i+1] = piles[i]-1\n     \
    \   }\n    }\n    return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_au23jvx_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=-1) %!s(int=-2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_au23jvx_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_au23jvx_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=-1) %!s(int=-2) %!s(int=-3) %!s(int=-4)]'\n    --- FAIL:\
    \ TestMake_A_Pile/test_num__3 (0.00s)\n        tmp_au23jvx_test.go:50: expected\
    \ '[%!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]', got\
    \ '[%!s(int=6) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__4 (0.00s)\n        tmp_au23jvx_test.go:50:\
    \ expected '[%!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18)\
    \ %!s(int=20) %!s(int=22)]', got '[%!s(int=8) %!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add 1 for the first level\n    for i := 0;\
    \ i < n; i++ {\n        if i%2 == 0 {\n            result[i] = n\n        } else\
    \ {\n            result[i] = n + 1\n        }\n        n = result[i]\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpmuwvfob3_test.go:23\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpmuwvfob3_test.go:39\
    \ +0x6e6\ntesting.tRunner(0xc0001924e0, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n+1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnj7__91x_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i] =\
    \ n\n        } else {\n            result[i] = n+1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpnj7__91x_test.go:48:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=8) %!s(int=7)\
    \ %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpnj7__91x_test.go:48: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10) %!s(int=9) %!s(int=10)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpeu83_2i8_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpeu83_2i8_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8nzq88do_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        result[i] = result[i-1] + result[i-2]\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8ciul1d7_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8ciul1d7_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8ciul1d7_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8ciul1d7_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8ciul1d7_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ < 1 {\n        return []int{}\n    }\n    result := make([]int, n+1)\n    last\
    \ := n\n    for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            result[i]\
    \ = last / 2\n            last = last / 2\n        } else {\n            result[i]\
    \ = last + 1\n            last = last + 1\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpb2nov6z6_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpb2nov6z6_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=2) %!s(int=3) %!s(int=1) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpb2nov6z6_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=2)\
    \ %!s(int=3) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpb2nov6z6_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=3) %!s(int=4) %!s(int=2)\
    \ %!s(int=3) %!s(int=1) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpb2nov6z6_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=4)\
    \ %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.163s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for ; i*2 <= n; i++\
    \ {\n        if n%2 == 0 {\n            result[i] = result[i*2]\n        } else\
    \ {\n            result[i] = result[i*2+1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_cg3x_sa_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_cg3x_sa_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    if n%2 == 0 {\n        piles[1] =\
    \ piles[2] + (n+1)/2\n    } else {\n        piles[1] = piles[2]\n    }\n    return\
    \ piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpkaq4mto4_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpkaq4mto4_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2]\n    } else {\n        stones[1] = stones[0]\n        stones[2]\
    \ = stones[0]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpq4de6yqu_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpq4de6yqu_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpq4de6yqu_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpq4de6yqu_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpq4de6yqu_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add 1 for the first level\n    for i := 0;\
    \ i < n; i++ {\n        result[i] = n\n        if i%2 == 0 {\n            result[i]\
    \ += result[i/2]\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpan4i5vlz_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=8) %!s(int=4) %!s(int=8) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpan4i5vlz_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=10) %!s(int=5) %!s(int=10) %!s(int=5) %!s(int=15)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpan4i5vlz_test.go:47:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=12)\
    \ %!s(int=6) %!s(int=12) %!s(int=6) %!s(int=18) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpan4i5vlz_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=14) %!s(int=7) %!s(int=14)\
    \ %!s(int=7) %!s(int=21) %!s(int=7) %!s(int=14)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpan4i5vlz_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=18)\
    \ %!s(int=9) %!s(int=18) %!s(int=9) %!s(int=27) %!s(int=9) %!s(int=18) %!s(int=9)\
    \ %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        result[i] = n\n  \
    \      if i%2 == 0 {\n            result[i+1] = result[i] + 1\n        } else\
    \ {\n            result[i+1] = result[i]\n        }\n        i += 2\n    }\n \
    \   return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp_jkvs9ql_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp_jkvs9ql_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp_jkvs9ql_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp_jkvs9ql_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp_jkvs9ql_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n+1)\n    piles[0] = n\n    if n%2 == 0 {\n        piles[1] =\
    \ n + 2\n    } else {\n        piles[1] = n + 1\n    }\n    return piles\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpi5jyka08_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpi5jyka08_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpi5jyka08_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpi5jyka08_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=8) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpi5jyka08_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=10) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.100s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if n%2 == 0 {\n  \
    \          result[i] = n\n            i += 2\n        } else {\n            result[i]\
    \ = n\n            i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp8nzq88do_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp8nzq88do_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073472
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n+1\n    }\n    for i := 2; i <= n; i++\
    \ {\n        result[i] = result[i-1] + result[i-2]\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp37owxt_0_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp37owxt_0_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp37owxt_0_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp37owxt_0_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp37owxt_0_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        if i%2 == 0 {\n  \
    \          result[i] = n\n        } else {\n            result[i] = n+1\n    \
    \    }\n        i++\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpjsbnljyq_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpjsbnljyq_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpjsbnljyq_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=6) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpjsbnljyq_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=6)\
    \ %!s(int=7) %!s(int=6) %!s(int=7) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpjsbnljyq_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=9)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073479
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpqgba5z_7_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpqgba5z_7_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        result[i] = result[i-2] + result[i-1]\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpepb_x4fz_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpepb_x4fz_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=9) %!s(int=14)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpepb_x4fz_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=6) %!s(int=7) %!s(int=13) %!s(int=20) %!s(int=33)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpepb_x4fz_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=6) %!s(int=7)\
    \ %!s(int=13) %!s(int=20) %!s(int=33) %!s(int=53)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpepb_x4fz_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=8) %!s(int=9) %!s(int=17) %!s(int=26) %!s(int=43) %!s(int=69) %!s(int=112)\
    \ %!s(int=181)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2] = stones[n-1]\n    } else {\n        stones[1] = stones[2] = stones[n-1]\
    \ + stones[n-1]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq0vycw5v_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073476
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return append(make_a_pile(n/2),\
    \ make_a_pile(n/2))\n    }\n    return append(make_a_pile(n/2), make_a_pile(n/2+1))\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibx5n1p8_test.go:23:41: cannot use make_a_pile(n / 2) (value of type []int)
    as type int in argument to append

    /tmp/tmpibx5n1p8_test.go:25:37: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    i := 0\n    for i < n {\n        result[i] = n\n  \
    \      if n%2 == 0 {\n            i += 2\n        } else {\n            i += 3\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmphiyhe654_test.go:49:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmphiyhe654_test.go:49: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073469
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for ; n > 0; n-- {\n\
    \        if n%2 == 0 {\n            result[i] = result[i-1] + n\n        } else\
    \ {\n            result[i] = result[i-1]\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp5n8840gu_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=10) %!s(int=10) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=14) %!s(int=14) %!s(int=18) %!s(int=18) %!s(int=20)\
    \ %!s(int=20)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for i < n {\n      \
    \  if n%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpmlxvqwht_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpmlxvqwht_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpmlxvqwht_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpmlxvqwht_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpmlxvqwht_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    piles\
    \ := make([]int, n)\n    piles[0] = n\n    piles[1] = n / 2\n    if n%2 == 0 {\n\
    \        piles[2] = n / 4\n    } else {\n        piles[2] = n / 2\n    }\n   \
    \ return piles\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp744ld2cu_test.go:47: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp744ld2cu_test.go:47: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp744ld2cu_test.go:47: expected\
    \ '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp744ld2cu_test.go:47: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)\
    \ %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp744ld2cu_test.go:47: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result := result[:n]\n    if n%2 == 0 {\n        result[n]\
    \ = result[n-1] + result[n-2]\n    } else {\n        result[n] = result[n-1] +\
    \ result[n-2]\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6qmzc6uf_test.go:20:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    result[1] = n\n    if n%2 == 0 {\n\
    \        result[2] = result[1]/2\n    } else {\n        result[2] = result[1]/2\n\
    \    }\n    for i := 3; i <= n; i++ {\n        result[i] = result[i-2] + result[i%2]\n\
    \    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate\
    \ := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected:\
    \ []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10}\
    \ },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     {\
    \ actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual:\
    \ candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpyutxytqk_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpyutxytqk_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=2) %!s(int=8) %!s(int=2)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpyutxytqk_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=2) %!s(int=10) %!s(int=2) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpyutxytqk_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=3)\
    \ %!s(int=12) %!s(int=3) %!s(int=18) %!s(int=3)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpyutxytqk_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=4) %!s(int=16) %!s(int=4) %!s(int=24) %!s(int=4) %!s(int=32)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = result[0]/2\n    } else {\n        result[1] = result[0]/2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpozb4q0d5_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=1) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpozb4q0d5_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpozb4q0d5_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpozb4q0d5_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=3) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpozb4q0d5_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // +1 because the first level is n+1 stones\n\
    \    i := 0\n    for i < n {\n        if n%2 == 0 {\n            result[i] = n\n\
    \            i += 2\n        } else {\n            result[i] = n\n           \
    \ i += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpxj366yzz_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=6)\
    \ %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=7) %!s(int=0) %!s(int=0)\
    \ %!s(int=7) %!s(int=0) %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpxj366yzz_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=9)\
    \ %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 2\n    for i := 0; i < n; i++ {\n        result[i]\
    \ = n\n        if i%2 == 0 {\n            n += 2\n        } else {\n         \
    \   n += 3\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpckztuajl_test.go:22\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpckztuajl_test.go:39\
    \ +0x5df\ntesting.tRunner(0xc0001a0340, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073467
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i] = result[i-1] + result[i-2]\n       \
    \ }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i-3]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 4 [running]:\ntesting.tRunner.func1.2({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(0x3)\n\t/tmp/tmpfocq49an_test.go:27\
    \ +0xcd\ncommand-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpfocq49an_test.go:40\
    \ +0x46\ntesting.tRunner(0xc00019e000, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.269s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    for i := 2; i <= n; i++\
    \ {\n        if i%2 == 0 {\n            result[i] = result[i-1] + result[i-2]\n\
    \        } else {\n            result[i] = result[i-1]\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvyjgaexu_test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvyjgaexu_test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvyjgaexu_test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=1)\
    \ %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvyjgaexu_test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=1) %!s(int=7) %!s(int=8)\
    \ %!s(int=8) %!s(int=16) %!s(int=16) %!s(int=32)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvyjgaexu_test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=1)\
    \ %!s(int=9) %!s(int=10) %!s(int=10) %!s(int=20) %!s(int=20) %!s(int=40) %!s(int=40)\
    \ %!s(int=80)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + result[i/2]\n       \
    \ }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i+1] =\
    \ result[i] + result[i/2] + 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzu7yxnlm_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=32)\
    \ %!s(int=40)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n%2\
    \ == 0 {\n        return make([]int, n+1)\n    }\n    result := make([]int, n+1)\n\
    \    result[n] = 1\n    for i := 2; i <= n; i++ {\n        if i%2 == 0 {\n   \
    \         result[i] = result[i-2] + result[i-1]\n        } else {\n          \
    \  result[i] = result[i-2] + result[i-1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpg53o81lv_test.go:51: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpg53o81lv_test.go:51: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpg53o81lv_test.go:51:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpg53o81lv_test.go:51: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpg53o81lv_test.go:51: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2] = stones[n-1]\n    } else {\n        stones[1] = stones[2] = stones[n-1]\
    \ + stones[n-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0el8250_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return make_a_pile(n/2)\
    \ + [2]int{n}\n    }\n    return make_a_pile(n/2) + [2]int{n}\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyx4x_as7_test.go:23:16:\
    \ invalid operation: make_a_pile(n / 2) + [2]int{\u2026} (mismatched types []int\
    \ and [2]int)\n/tmp/tmpyx4x_as7_test.go:25:12: invalid operation: make_a_pile(n\
    \ / 2) + [2]int{\u2026} (mismatched types []int and [2]int)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return append(make_a_pile(n/2),\
    \ make_a_pile(n/2+1))\n    }\n    return append(make_a_pile(n/2+1), make_a_pile(n/2))\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wtmxw8e_test.go:23:41: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    /tmp/tmp9wtmxw8e_test.go:25:39: cannot use make_a_pile(n / 2) (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = n+1\n    } else {\n        result[1] = n\n    }\n    return result\n}\n\n\
    func TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvem3a7wy_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=7) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvem3a7wy_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=9) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 1 {\n        result[1]\
    \ = n\n    } else {\n        result[1] = n + 1\n    }\n    for i := 2; i <= n;\
    \ i++ {\n        if i%2 == 1 {\n            result[i] = result[i-2] + i\n    \
    \    } else {\n            result[i] = result[i-2] + i + 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzegc8oy__test.go:53: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzegc8oy__test.go:53: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=5) %!s(int=3) %!s(int=8) %!s(int=8)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzegc8oy__test.go:53:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=5) %!s(int=3) %!s(int=8) %!s(int=8) %!s(int=13)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzegc8oy__test.go:53: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=7) %!s(int=3)\
    \ %!s(int=10) %!s(int=8) %!s(int=15) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzegc8oy__test.go:53: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=9) %!s(int=3) %!s(int=12) %!s(int=8) %!s(int=17) %!s(int=15) %!s(int=24)\
    \ %!s(int=24)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1] =\
    \ stones[2] = stones[n-1]\n    } else {\n        stones[1] = stones[2] = stones[n-1]\
    \ + stones[n-1]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpberj6_54_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + result[i/2]\n       \
    \ }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i+1] =\
    \ result[i] + result[i/2] + 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=4)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpzu7yxnlm_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=6) %!s(int=12) %!s(int=18)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpzu7yxnlm_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=16) %!s(int=24) %!s(int=32)\
    \ %!s(int=40)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073474
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = stone\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate :=\
    \ make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7}\
    \ },\n     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmlj7rq0j_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073473
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    stones := make([]int, n+1)\n    stones[0]\
    \ = n\n    stones[1<<1] = 1\n    stones[1<<2] = 1\n    stones[1<<3] = 1\n    stones[1<<4]\
    \ = 1\n    stones[1<<5] = 1\n    stones[1<<6] = 1\n    stones[1<<7] = 1\n    stones[1<<8]\
    \ = 1\n    stones[1<<9] = 1\n    stones[1<<10] = 1\n    stones[1<<11] = 1\n  \
    \  stones[1<<12] = 1\n    stones[1<<13] = 1\n    stones[1<<14] = 1\n    stones[1<<15]\
    \ = 1\n    stones[1<<16] = 1\n    stones[1<<17] = 1\n    stones[1<<18] = 1\n \
    \   stones[1<<19] = 1\n    stones[1<<20] = 1\n    stones[1<<21] = 1\n    stones[1<<22]\
    \ = 1\n    stones[1<<23] = 1\n    stones[1<<24] = 1\n    stones[1<<25] = 1\n \
    \   stones[1<<26] = 1\n    stones[1<<27] = 1\n    stones[1<<28] = 1\n    stones[1<<29]\
    \ = 1\n    stones[1<<30] = 1\n    stones[1<<31] = 1\n    stones[1<<32] = 1\n \
    \   stones[1<<33] = 1\n    stones[1<<34] = 1\n    stones[1<<35] = 1\n    stones[1<<36]\
    \ = 1\n    stones[1<<37] = 1\n    stones[1<<38] = 1\n    stones[1<<39] = 1\n \
    \   stones[1<<40] = 1\n    stones[1<<41] = 1\n    stones[1<<42] = 1\n    stones[1<<43]\
    \ = 1\n    stones[1<<44] = 1\n    stones[1<<45] = 1\n    stones[1<<46] = 1\n \
    \   stones[1<<47] = 1\n    stones[1<<48] = 1\n    stones[1<<49] = 1\n    stones[1<<50]\
    \ = 1\n    stones[1<<51] = 1\n    stones[1<<52] = 1\n    stones[1<<53] = 1\n \
    \   stones[1<<54] = 1\n    stones[1<<55] = 1\n    stones[1<<56] = 1\n    stones[1<<57]\
    \ = 1\n    stones[1<<58] = 1\n    stones[1<<59] = 1\n    stones[1<<60]\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib5xl5aa_test.go:84:6: expected ''('', found TestMake_A_Pile

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        result[1]\
    \ = result[n-1] + 1\n    } else {\n        result[1] = result[n-1]\n    }\n  \
    \  return result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp4j5i99t7_test.go:46:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=1) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp4j5i99t7_test.go:46: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073468
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    i := 1\n    for ; n > 0; n-- {\n\
    \        if n%2 == 0 {\n            result[i] = result[i-1] + n\n        } else\
    \ {\n            result[i] = result[i-1]\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmp5n8840gu_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=6) %!s(int=6)\
    \ %!s(int=10) %!s(int=10) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmp5n8840gu_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=8) %!s(int=8) %!s(int=14) %!s(int=14) %!s(int=18) %!s(int=18) %!s(int=20)\
    \ %!s(int=20)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 2
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n%2 == 0 {\n        return append(make_a_pile(n/2),\
    \ make_a_pile(n/2))\n    }\n    return append(make_a_pile(n/2+1), make_a_pile(n/2+1))\n\
    }\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n     {\
    \ actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5),\
    \ expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6), expected:\
    \ []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected: []int{8,\
    \ 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp00cv_g5k_test.go:23:41: cannot use make_a_pile(n / 2) (value of type []int)
    as type int in argument to append

    /tmp/tmp00cv_g5k_test.go:25:39: cannot use make_a_pile(n / 2 + 1) (value of type
    []int) as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073476
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + 1\n        }\n    } else\
    \ {\n        for i := 1; i < n; i++ {\n            result[i+1] = result[i] + 2\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=0) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpcfg2g3ed_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpcfg2g3ed_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073464
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    if n%2 == 0 {\n        stones[1]\
    \ = stones[2] = stones[n-1]\n    } else {\n        stones[1] = stones[2] = stones[n-1]\
    \ + stones[n-2]\n    }\n    return stones\n}\n\nfunc TestMake_A_Pile(t *testing.T)\
    \ {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3),\
    \ expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected: []int{4,\
    \ 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9, 11, 13}\
    \ },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16} },\n\
    \     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20, 22} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0el8250_test.go:22:31: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073480
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = 0\n    if n%2 == 0 {\n        for i :=\
    \ 1; i < n; i++ {\n            result[i+1] = result[i] + result[i/2]\n       \
    \ }\n    } else {\n        for i := 1; i < n; i++ {\n            result[i+1] =\
    \ result[i] + result[i/2] + 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4),\
    \ expected: []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5,\
    \ 7, 9, 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12,\
    \ 14, 16} },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16,\
    \ 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpx7c18qm__test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpx7c18qm__test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpx7c18qm__test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpx7c18qm__test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpx7c18qm__test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    n += 1 // add 1 for the first level\n    for i := 0;\
    \ i < n; i++ {\n        result[i] = n\n        if i%2 == 0 {\n            result[i+1]\
    \ = result[i] + 1\n        }\n    }\n    return result\n}\n\nfunc TestMake_A_Pile(t\
    \ *testing.T) {\n  candidate := make_a_pile\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3), expected: []int{3, 5, 7} },\n     { actual: candidate(4), expected:\
    \ []int{4, 6, 8, 10} },\n     { actual: candidate(5), expected: []int{5, 7, 9,\
    \ 11, 13} },\n     { actual: candidate(6), expected: []int{6, 8, 10, 12, 14, 16}\
    \ },\n     { actual: candidate(8), expected: []int{8, 10, 12, 14, 16, 18, 20,\
    \ 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\npanic: runtime error: index out of range\
    \ [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5]\
    \ with length 5\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513820,\
    \ 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513820, 0xc0001d8000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.make_a_pile(...)\n\t/tmp/tmpxh675xnt_test.go:24\n\
    command-line-arguments_test.TestMake_A_Pile(0x0?)\n\t/tmp/tmpxh675xnt_test.go:38\
    \ +0x5f2\ntesting.tRunner(0xc000199040, 0x529140)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073482
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    stones\
    \ := make([]int, n+1)\n    stones[0] = n\n    stones[1] = stones[2] = stones[3]\
    \ = stones[4] = stones[5] = stones[6] = stones[7] = stones[8] = stones[9] = stones[10]\
    \ = stones[11] = stones[12] = stones[13] = stones[14] = stones[15] = stones[16]\
    \ = stones[17] = stones[18] = stones[19] = stones[20] = stones[21] = stones[22]\
    \ = stones[23] = stones[24] = stones[25] = stones[26] = stones[27] = stones[28]\
    \ = stones[29] = stones[30] = stones[31] = stones[32] = stones[33] = stones[34]\
    \ = stones[35] = stones[36] = stones[37] = stones[38] = stones[39] = stones[40]\
    \ = stones[41] = stones[42] = stones[43] = stones[44] = stones[45] = stones[46]\
    \ = stones[47] = stones[48] = stones[49] = stones[50] = stones[51] = stones[52]\
    \ = stones[53] = stones[54] = stones[55] = stones[56] = stones[57] = stones[58]\
    \ = stones[59] = stones[60] = stones[61] = stones[62] = stones[63] = stones[64]\
    \ = stones[65] = stones[66] = stones[67] = stones[68] = stones[69] = stones[70]\
    \ = stones[71] = stones[72] = stones[73] = stones[74] = stones[75] = stones[76]\
    \ = stones[77] = stones[78] = stones[79] = stones[80] = stones[81] = stones[82]\
    \ = stones[83] = stones[84] = stones[85] = stones[86] = stones[87] = stones[88]\
    \ = stones[89] = stones[90] = stones[91] = stones[92] = stones[93] = stones[94]\
    \ = stones[95] = stones[96] = stones[97] = stones[98] = stones[99] = stones[100]\
    \ = stones[101] = stones[102] = stones[103] = stones[104] = stones[105] = stones[106]\
    \ = stones[107] = stones[108] = stones[109] = stones[110] = stones[111] = stones[112]\
    \ = stones[113] = stones[114] = stones[115] = stones[116] = stones[117] = stones[118]\
    \ = stones[119] = stones[120] = stones[121] = stones[122] = stones[123] = stones[124]\
    \ = stones[125] = \nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgvrkab3k_test.go:21:27: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073463
- exit_code: 1
  program: "package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a positive integer n, you have to make a pile of n levels of stones.\n\
    // The first level has n stones.\n// The number of stones in the next level is:\n\
    // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
    // Return the number of stones in each level in a list, where element at index\n\
    // i represents the number of stones in the level (i+1).\n// Examples:\n// >>>\
    \ make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    result\
    \ := make([]int, n+1)\n    result[0] = n\n    i := 1\n    for i <= n {\n     \
    \   if i%2 == 0 {\n            result[i] = result[i-1] + 1\n        } else {\n\
    \            result[i] = result[i-1]\n        }\n        i += 2\n    }\n    return\
    \ result\n}\n\nfunc TestMake_A_Pile(t *testing.T) {\n  candidate := make_a_pile\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3), expected: []int{3, 5, 7} },\n\
    \     { actual: candidate(4), expected: []int{4, 6, 8, 10} },\n     { actual:\
    \ candidate(5), expected: []int{5, 7, 9, 11, 13} },\n     { actual: candidate(6),\
    \ expected: []int{6, 8, 10, 12, 14, 16} },\n     { actual: candidate(8), expected:\
    \ []int{8, 10, 12, 14, 16, 18, 20, 22} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMake_A_Pile (0.00s)\n    --- FAIL: TestMake_A_Pile/test_num__0\
    \ (0.00s)\n        tmpvgue6ziz_test.go:50: expected '[%!s(int=3) %!s(int=5) %!s(int=7)]',\
    \ got '[%!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__1\
    \ (0.00s)\n        tmpvgue6ziz_test.go:50: expected '[%!s(int=4) %!s(int=6) %!s(int=8)\
    \ %!s(int=10)]', got '[%!s(int=4) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestMake_A_Pile/test_num__2 (0.00s)\n        tmpvgue6ziz_test.go:50:\
    \ expected '[%!s(int=5) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13)]', got '[%!s(int=5)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__3\
    \ (0.00s)\n        tmpvgue6ziz_test.go:50: expected '[%!s(int=6) %!s(int=8) %!s(int=10)\
    \ %!s(int=12) %!s(int=14) %!s(int=16)]', got '[%!s(int=6) %!s(int=6) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMake_A_Pile/test_num__4\
    \ (0.00s)\n        tmpvgue6ziz_test.go:50: expected '[%!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22)]', got '[%!s(int=8)\
    \ %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073482
