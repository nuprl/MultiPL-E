name: HumanEval_152_compare
language: go_test.go
prompt: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I\
  \ think we all remember that feeling when the result of some long-awaited\n// event\
  \ is finally known. The feelings and thoughts you have at that moment are\n// definitely\
  \ worth noting down and comparing.\n// Your task is to determine if a person correctly\
  \ guessed the results of a number of matches.\n// You are given two lists of scores\
  \ and guesses of equal length, where each index shows a match. \n// Return a list\
  \ of the same length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1,\
  \ 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0,\
  \ 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game\
  \ []int, guess []int) []int {\n"
tests: "func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
  \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
  \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
  \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n  \
  \   { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
  \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(guess))\n    for i, v := range guess\
    \ {\n        result[i] = abs(game[i] - v)\n    }\n    return result\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    // Your code here\n\
    \    \n    return guess\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    \n    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] ==\
    \ guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    \n\
    \    // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = 0\n\
    \    }\n    for i := range guess {\n        if game[i] == guess[i] {\n       \
    \     result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := 0; i < len(guess); i++ {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = game[i] - guess[i]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = 0\n    }\n    for i := range guess {\n \
    \       if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    \n    // Your code here\n    \n    return game\n}\n", " \
    \   result := make([]int, len(guess))\n    for i, score := range game {\n    \
    \    result[i] = abs(score - guess[i])\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] > 0 {\n            result[guess[i]] += game[i] - 1\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(guess))\n    for i, score\
    \ := range game {\n        result[i] = abs(score - guess[i])\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i, score := range\
    \ game {\n        result[i] = abs(score - guess[i])\n    }\n    return result\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = 0\n\
    \    }\n    for i := range guess {\n        if game[i] == guess[i] {\n       \
    \     result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    \n    // Your code here\n    \n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    \n    // Your code here\n    for i := range guess\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = 0\n    }\n    for i := range game {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i, score := range game {\n        result[i] = abs(score - guess[i])\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    \n    for\
    \ i, score := range game {\n        if score == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(score - guess[i])\n     \
    \   }\n    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = 0\n    }\n    for i := range guess {\n \
    \       if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = game[i] - guess[i]\n    }\n\
    \    return result\n}\n", "    \n    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] > 0 {\n            result[guess[i]] =\
    \ game[i] - guess[i]\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = game[i]\
    \ - guess[i]\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    \n    for i := range guess {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    \n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        } else {\n            result[i] = 0\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    \n    score := 0\n    \n    for i, v := range\
    \ guess {\n        if v == game[i] {\n            score += v\n        } else {\n\
    \            score += abs(v - game[i])\n        }\n        result[i] = score\n\
    \    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i, score := range game {\n        result[i] = abs(score - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    \n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n \
    \   \n    for i := range result {\n        result[i] = game[i] - guess[i]\n  \
    \  }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] > 0 {\n            result[guess[i]] =\
    \ game[i] - guess[i]\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = 0\n\
    \    }\n    for i := range guess {\n        result[guess[i]]++\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    \n\
    \    // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i, g := range guess {\n        result[i] = abs(game[i] - g)\n    }\n    return\
    \ result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   result := make([]int, len(guess))\n    \n    // Your code here\n    \n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        } else {\n            result[i] = 0\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    \n    // Your code here\n    \n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    \n    for i := range result\
    \ {\n        result[i] = game[i] - guess[i]\n    }\n    \n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := 0; i < len(guess);\
    \ i++ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] ==\
    \ guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] !=\
    \ guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    \n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    \n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    \n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    \n    for i := range guess {\n        if\
    \ game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = game[i] - guess[i]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range result {\n        result[i] = 0\n    }\n    \n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    \n    // Your code here\n   \
    \ \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = 0\n    }\n    for i := range guess {\n\
    \        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range guess {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i, score := range\
    \ game {\n        result[i] = abs(score - guess[i])\n    }\n    return result\n\
    }\n", "    \n    // Your code here\n    \n    return game\n}\n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = 0\n\
    \    }\n    \n    for i := range guess {\n        if game[i] != guess[i] {\n \
    \           result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i, g := range guess {\n        result[i]\
    \ = abs(g-game[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ game[i] - guess[i]\n    }\n    return result\n}\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    result := make([]int, len(guess))\n   \
    \ for i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n    }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    result := make([]int, len(guess))\n    for i, score\
    \ := range game {\n        result[i] = abs(score - guess[i])\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    \n    for i, score\
    \ := range game {\n        if score == guess[i] {\n            result[i] = 0\n\
    \        } else {\n            result[i] = abs(score - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    \n    // Your code here\n    \n    return result\n}\n</code>\n\
    <|/ a tags=go |>\n<| c |>\nThanks for your answer. I've tried your solution and\
    \ it works. But I still don't understand why my code doesn't work. Can you explain\
    \ me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added a comment to my answer,\
    \ but basically your code is comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code doesn't work because you're comparing\
    \ each element in the first list to each element in the second list. Your code\
    \ doesn't work because you're comparing each element in the first list to each\
    \ element in the second list. Your code ", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = 0\n    }\n    for i := range game {\n        if\
    \ game[i] > 0 {\n            result[guess[i]-1] = game[i] - game[guess[i]-1]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] > 0 {\n            result[guess[i]] = game[i] - guess[i]\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    // Your code here\n    \n    return guess\n}\n</code>\n<|/ a tags=go\
    \ |>\n<| c |>\nThank you so much! I really appreciate your help!\n<|/ c |>\n<|\
    \ c |>\nNo problem! Glad I could help.\n<|/ c |>\n<| a tags=go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n)\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    \n    // Your code here\n    \n    return\
    \ guess\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    \n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = 0\n    }\n    for i := range game {\n\
    \        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ 0\n    }\n    for i := range game {\n        if game[i] != guess[i] {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    \n    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ 0\n    }\n    for i := range game {\n        if game[i] != guess[i] {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    \n    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ 0\n    }\n    for i := range game {\n        if game[i] != guess[i] {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        } else {\n            result[i]\
    \ = 0\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = 0\n    }\n    for i := range guess {\n\
    \        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = 0\n    }\n    for i := range game {\n        if game[i] == guess[i] {\n  \
    \          result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] != guess[i] {\n            result[i] =\
    \ abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = game[i] - guess[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] == guess[i] {\n            result[i] = 0\n        } else\
    \ {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    \n    for i := range result {\n   \
    \     result[i] = 0\n    }\n    \n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    \n    return result\n}\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    \n    // Your code goes here\n\
    \    \n    return result\n}\n", "    result := make([]int, len(guess))\n    \n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n \
    \   for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] == guess[i] {\n            result[i] =\
    \ 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = game[i] - guess[i]\n    }\n \
    \   return result\n}\n", "    result := make([]int, len(guess))\n    \n    for\
    \ i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    \n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = game[i] - guess[i]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = game[i] - guess[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = 0\n    }\n    for\
    \ i := range game {\n        if game[i] != guess[i] {\n            result[i] =\
    \ abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    \n    for i := range guess {\n        if game[i] != guess[i] {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ game[i] - guess[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    result :=\
    \ make([]int, len(guess))\n    for i := range result {\n        result[i] = 0\n\
    \    }\n    for i := range guess {\n        if game[i] == guess[i] {\n       \
    \     result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = game[i] - guess[i]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := 0; i < len(guess); i++ {\n        result[i] = abs(game[i]\
    \ - guess[i])\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    \n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    \n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
