language: go_test.go
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n\
    \    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    w := 0\n    x := \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsfgna71i_test.go:125:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    switch {\n    case len(s0) == 0 && len(s1) == 0:\n   \
    \     return true\n    case len(s0) == 0 && len(s1) != 0:\n        return false\n\
    \    case len(s0) != 0 && len(s1) == 0:\n        return false\n    case len(s0)\
    \ == 0 && len(s1) != 0:\n        return false\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\n        return true\n    case len(s0) == 0 && len(s1)\
    \ == 0:\n        return true\n    case len(s0) == 0 && len(s1) == 0:\n       \
    \ return true\n    case len(s0) == 0 && len(s1) == 0:\n        return true\n \
    \   case len(s0) == 0 && len(s1) == 0:\n        return true\n    case len(s0)\
    \ == 0 && len(s1) == 0:\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpii5jru7c_test.go:111:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i++\n        j++\n    }\n    return i == len(s0)\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpbuecowzf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpbuecowzf_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpbuecowzf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    switch {\n    case len(s0) > len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = len(s0)\n        o = l\n        p = m\n    \
    \    r = o\n        s = m\n        t = n\n        u = o\n        v = m\n     \
    \   w = n\n        x = o\n        y = m\n        z = n\n    case len(s0) == len(s1):\n\
    \        l = len(s0)\n        m = len(s1)\n        n = l\n        o = l\n    \
    \    p = m\n        r = o\n        s = m\n        t = n\n        u = o\n     \
    \   v = m\n        w = n\n        x = o\n        y = m\n        z = n\n    case\
    \ len(s0) < len(s1):\n        l = len(s0)\n        m = len(s1)\n        n = l\n\
    \        o = l\n        p = m\n        r = o\n        s = m\n        t = n\n \
    \       u = o\n        v = m\n        w = n\n        x = o\n        y = m\n  \
    \      z = n\n    }\n    for ; i < o; i++ {\n        if s0[i] != s1[i] {\n   \
    \         return false\n        }\n    }\n    for ; j < p; j++ {\n        if s0[j]\
    \ != s1[j] {\n            return false\n        }\n    }\n    for ; k < r; k++\
    \ {\n        if s0[k] != s1[k] {\n            return false\n        }\n    }\n\
    \    for ; l < s; l++ {\n        if s0[l] != s1[l] {\n            return false\n\
    \        }\n    }\n    for ; m < t; m++ {\n        if s0[m] != s1[m] {\n     \
    \       return false\n        }\n    }\n    for ; n < u; n++ {\n        if s0[n]\
    \ != s1[n] {\n            return false\n        }\n    }\n    for ; o < v; o++\
    \ {\n        if s0[o] != s1[o] {\n            return false\n        }\n    }\n\
    \    for ; p < w; p++ {\n        if s0[p] != s1[p] {\n            return false\n\
    \        }\n    }\n    for ; q < x; q++ {\n        if s0[q] != s1[q] {\n     \
    \       return false\n        }\n    }\n    for ; r < y; \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpshujn9tc_test.go:136:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if s0 != s1 {\n        return false\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpl4azy55d_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpl4azy55d_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpl4azy55d_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    for\
    \ i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j] {\n            i++\n\
    \            j++\n            k++\n        } else if s0[i] < s1[j] {\n       \
    \     i++\n        } else {\n            j++\n        }\n    }\n    return k ==\
    \ len(s0)\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpr1f9pqkq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpr1f9pqkq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpr1f9pqkq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i <\
    \ len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpctgnu2cr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if s0[len(s0)-1] != s1[0] {\n        return false\n    }\n    return same_chars(s0[:len(s0)-1],\
    \ s1[1:])\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpt6u4jwdn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpt6u4jwdn_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpt6u4jwdn_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    for i := 0; i < len(s0); i++ {\n     \
    \   if s0[i] != s1[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpzycr76j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpzycr76j3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpzycr76j3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n  \
    \  }\n    if len(s0) > len(s1) {\n        return s0 != s1\n    }\n    return s0\
    \ != s1\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__3\
    \ (0.00s)\n        tmp06b949qc_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__4 (0.00s)\n        tmp06b949qc_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestSame_Chars/test_num__5\
    \ (0.00s)\n        tmp06b949qc_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestSame_Chars/test_num__6 (0.00s)\n        tmp06b949qc_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i++\n        j++\n    }\n    return i == len(s0)\n}\n\nfunc\
    \ TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true\
    \ },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n\
    \     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     {\
    \ actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n     { actual:\
    \ candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"\
    aabb\", \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpbuecowzf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpbuecowzf_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpbuecowzf_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i <\
    \ len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpctgnu2cr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n        if j == len(s1) {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfbg0bypf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfbg0bypf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfbg0bypf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u\
    \ := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n\
    \    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6uej932_test.go:125:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    \n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    \n    for i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j]\
    \ {\n            i++\n            j++\n            continue\n        }\n     \
    \   \n        if s0[i] < s1[j] {\n            i++\n            continue\n    \
    \    }\n        \n        if s0[i] > s1[j] {\n            j++\n            continue\n\
    \        }\n        \n        if s0[i] == s1[j] {\n            i++\n         \
    \   j++\n            continue\n        }\n        \n        if s0[i] < s1[j] {\n\
    \            i++\n            continue\n        }\n        \n        if s0[i]\
    \ > s1[j] {\n            j++\n            continue\n        }\n        \n    \
    \    if s0[i] != s1[j] {\n            return false\n        }\n        \n    \
    \    i++\n        j++\n    }\n    \n    return i == len(s0) && j == len(s1)\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvyxov8eg_test.go:28:5: k declared but not used

    /tmp/tmpvyxov8eg_test.go:29:5: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if s0[len(s0)-1] != s1[0] {\n        return false\n    }\n    if len(s0) !=\
    \ len(s1) {\n        return false\n    }\n    for i := 0; i < len(s0); i++ {\n\
    \        if s0[i] != s1[i] {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpeoemcz88_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpeoemcz88_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpeoemcz88_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    for\
    \ i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j] {\n            i++\n\
    \            j++\n            k++\n        } else if s0[i] < s1[j] {\n       \
    \     i++\n        } else {\n            j++\n        }\n    }\n    return k ==\
    \ len(s0)\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ), expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpr1f9pqkq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpr1f9pqkq_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpr1f9pqkq_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    if len(s0) > len(s1) {\n        s0, s1\
    \ = s1, s0\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp45jkforc_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp45jkforc_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp45jkforc_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    for\
    \ ; i < len(s0); i++ {\n        if s0[i] != s1[j] {\n            return false\n\
    \        }\n        j++\n        if j == len(s1) {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvebfrun_test.go:27:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    if len(s0) != len(s1) {\n        return\
    \ false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpk2utkm1i_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpk2utkm1i_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpk2utkm1i_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    \n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    \n    for ; i < len(s0); i++ {\n        if s0[i] != s1[j] {\n\
    \            return false\n        }\n        j++\n    }\n    \n    for ; j <\
    \ len(s1); j++ {\n        if s0[i] != s1[j] {\n            return false\n    \
    \    }\n    }\n    \n    for ; k < len(s0); k++ {\n        if s0[k] != s1[k] {\n\
    \            return false\n        }\n    }\n    \n    for ; l < len(s1); l++\
    \ {\n        if s0[k] != s1[l] {\n            return false\n        }\n    }\n\
    \    \n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmptf90d97c_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmptf90d97c_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmptf90d97c_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for i < len(s0)\
    \ && j < len(s1) {\n        if s0[i] != s1[j] {\n            return false\n  \
    \      }\n        i++\n        j++\n    }\n    return i == len(s0) && j == len(s1)\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7k5w8pmc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7k5w8pmc_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7k5w8pmc_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    \n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    \n    for i < len(s0) && j < len(s1) {\n        if s0[i] == s1[j]\
    \ {\n            i++\n            j++\n        } else {\n            if s0[i]\
    \ < s1[j] {\n                k++\n            } else {\n                l++\n\
    \            }\n            i++\n            j++\n        }\n    }\n    \n   \
    \ return k == l && i == len(s0)\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpj6bmyp85_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpj6bmyp85_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpj6bmyp85_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    \n    i := 0\n    j := 0\n    \n    for\
    \ i < len(s0) && j < len(s1) {\n        if s0[i] != s1[j] {\n            return\
    \ false\n        }\n        i++\n        j++\n    }\n    \n    return i == len(s0)\n\
    }\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp32csa_ae_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp32csa_ae_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp32csa_ae_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i <\
    \ len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpctgnu2cr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 2
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    switch {\n    case len(s0) > len(s1):\n        l = len(s0)\n\
    \        m = len(s1)\n        n = len(s0)\n        o = l\n        p = m\n    \
    \    r = o\n        s = n\n        t = o\n        u = o\n        v = o\n     \
    \   w = o\n        x = o\n        y = o\n        z = o\n    case len(s0) == len(s1):\n\
    \        l = len(s0)\n        m = len(s1)\n        n = l\n        o = l\n    \
    \    p = m\n        r = o\n        s = n\n        t = o\n        u = o\n     \
    \   v = o\n        w = o\n        x = o\n        y = o\n        z = o\n    default:\n\
    \        return false\n    }\n    for ; i < n; i++ {\n        if s0[i] != s1[i]\
    \ {\n            return false\n        }\n    }\n    for ; i < o; i++ {\n    \
    \    if s0[i] != s1[i] {\n            return false\n        }\n    }\n    for\
    \ ; i < p; i++ {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n    }\n    for ; i < r; i++ {\n        if s0[i] != s1[i] {\n         \
    \   return false\n        }\n    }\n    for ; i < s; i++ {\n        if s0[i] !=\
    \ s1[i] {\n            return false\n        }\n    }\n    for ; i < t; i++ {\n\
    \        if s0[i] != s1[i] {\n            return false\n        }\n    }\n   \
    \ for ; i < u; i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    for ; i < v; i++ {\n        if s0[i] != s1[i] {\n     \
    \       return false\n        }\n    }\n    for ; i < w; i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    for ; i < x; i++\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    for ; i < y; i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    for ; i < z; i++ {\n        if s0[i] != s1[i] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3tq2lqjp_test.go:26:5: j declared but not used

    /tmp/tmp3tq2lqjp_test.go:27:5: k declared but not used

    /tmp/tmp3tq2lqjp_test.go:33:5: q declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u\
    \ := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n\
    \    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6uej932_test.go:125:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n        if j == len(s1) {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpfbg0bypf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpfbg0bypf_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpfbg0bypf_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    k := 0\n    l\
    \ := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n\
    \    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y\
    \ := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x\
    \ := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n\
    \    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n    w\
    \ := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v := 0\n\
    \    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n    v\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n    u\
    \ := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t := 0\n\
    \    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := \nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6uej932_test.go:125:6: expected ''('', found TestSame_Chars

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  i := 0\n    j := 0\n    for ; i < len(s0); i++ {\n        if s0[i] != s1[j]\
    \ {\n            return false\n        }\n        j++\n        if j == len(s1)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestSame_Chars(t\
    \ *testing.T) {\n  candidate := same_chars\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     {\
    \ actual: candidate(\"abcd\", \"dddddddabc\"), expected: true },\n     { actual:\
    \ candidate(\"dddddddabc\", \"abcd\"), expected: true },\n     { actual: candidate(\"\
    eabcd\", \"dddddddabc\"), expected: false },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabcf\"), expected: false },\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\"), expected: false },\n     { actual: candidate(\"aabb\"\
    , \"aaccc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpxd0lx19t_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpxd0lx19t_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpxd0lx19t_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075238
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return false\n    }\n  \
    \  if len(s0) > len(s1) {\n        s0, s1 = s1, s0\n    }\n    for i := 0; i <\
    \ len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n  candidate\
    \ := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"abcd\"\
    , \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpctgnu2cr_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpctgnu2cr_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 || len(s1) ==\
    \ 0 {\n        return false\n    }\n    i := 0\n    j := 0\n    for ; i < len(s0);\
    \ i++ {\n        if s0[i] != s1[j] {\n            return false\n        }\n  \
    \      j++\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp7_oq99hg_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp7_oq99hg_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075237
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) == 0 {\n        return\
    \ len(s1) == 0\n    }\n    if len(s1) == 0 {\n        return len(s0) == 0\n  \
    \  }\n    if len(s0) != len(s1) {\n        return false\n    }\n    for i := 0;\
    \ i < len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestSame_Chars(t *testing.T) {\n\
    \  candidate := same_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\"), expected: true },\n     { actual: candidate(\"\
    abcd\", \"dddddddabc\"), expected: true },\n     { actual: candidate(\"dddddddabc\"\
    , \"abcd\"), expected: true },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"\
    ), expected: false },\n     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected:\
    \ false },\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected:\
    \ false },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmp0w1mou0k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmp0w1mou0k_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmp0w1mou0k_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075238
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
    )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
    eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
    )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
    func same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n  \
    \      return false\n    }\n    for i := 0; i < len(s0); i++ {\n        if s0[i]\
    \ != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestSame_Chars(t *testing.T) {\n  candidate := same_chars\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"),\
    \ expected: true },\n     { actual: candidate(\"abcd\", \"dddddddabc\"), expected:\
    \ true },\n     { actual: candidate(\"dddddddabc\", \"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"eabcd\", \"dddddddabc\"), expected: false },\n\
    \     { actual: candidate(\"abcd\", \"dddddddabcf\"), expected: false },\n   \
    \  { actual: candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"), expected: false\
    \ },\n     { actual: candidate(\"aabb\", \"aaccc\"), expected: false },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSame_Chars (0.00s)\n    --- FAIL: TestSame_Chars/test_num__0\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestSame_Chars/test_num__1 (0.00s)\n        tmpwrunyny__test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestSame_Chars/test_num__2\
    \ (0.00s)\n        tmpwrunyny__test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
