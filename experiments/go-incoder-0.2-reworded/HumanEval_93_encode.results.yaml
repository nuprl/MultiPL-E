language: go_test.go
name: HumanEval_93_encode
results:
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter != ' ' {\n            result\
    \ += string(letter)\n        } else {\n            result += string(letter)\n\
    \        }\n    }\n    for _, vowel := range vowels {\n        result += \"A\"\
    \n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8kfoln0_test.go:28:12: vowel declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string(letter) + string(letter)\n    }\n    for _, vowel :=\
    \ range \"aeiou\" {\n        result += string(vowel) + string(vowel)\n    }\n\
    \    for i := 0; i < len(message); i++ {\n        result += string(message[i])\
    \ + string(message[i+1])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0000f8060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0000f8060})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encode(...)\n\t/tmp/tmpnw7rm73y_test.go:27\n\
    command-line-arguments_test.TestEncode(0x0?)\n\t/tmp/tmpnw7rm73y_test.go:39 +0x11bf\n\
    testing.tRunner(0xc00009b1e0, 0x528fb0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660075700
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string([]byte{letter})\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            continue\n        }\n        result += \"A\"\
    \n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mjgsxwp_test.go:21:33: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter)\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string(letter)\n        } else {\n\
    \            result += string(letter)\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(letter)\n\
    \        } else {\n            result += string(letter)\n        }\n    }\n  \
    \  for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string(letter)\n        } else {\n            result += string(letter)\n   \
    \     }\n    }\n    for _, letter := range message {\n        if letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n    \
    \        result += string(letter)\n        } else {\n            result += string(letter)\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string(letter)\n        } else {\n            result +=\
    \ string(letter)\n        }\n    }\n    for _, letter := range message {\n   \
    \     if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += string(letter)\n        } else {\n         \
    \   result += string(letter)\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string(letter)\n        } else {\n\
    \            result += string(letter)\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(letter)\n\
    \        } else {\n            result += string(letter)\n        }\n    }\n  \
    \  for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string(letter)\n        } else {\n            result += string(letter)\n   \
    \     }\n    }\n    for _, letter := range message {\n        if letter == 'a'\
    \ || letter == 'e' || letter == '\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptce0f9_m_test.go:91:56: rune literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(letter)\n\
    \        for _, vowel := range vowels {\n            if letter == vowel {\n  \
    \              result += string(letter)\n                result += string(vowel)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp977q9gmz_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1cteiesj_test.go:19:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:20:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:21:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:21:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:22:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:22:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:23:13: no new variables on left side of :=

    /tmp/tmp1cteiesj_test.go:23:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: undefined: strings

    /tmp/tmp1cteiesj_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        result += \"t\"\n        for _, vowel\
    \ := range vowels {\n            if letter == vowel {\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprzf0d7q6_test.go:25:17: invalid operation: result += vowel (mismatched
    types string and rune)

    /tmp/tmprzf0d7q6_test.go:26:17: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmprzf0d7q6_test.go:27:17: invalid operation: result += vowel (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter + string(letter))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3s7ffm03_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp3s7ffm03_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        result += \"T\"\n        result += \"G\"\n        result += \"S\"\
    \n        result += \"C\"\n        result += \"G\"\n        result += \"S\"\n\
    \        result += \"C\"\n        result += \"G\"\n        result += \"S\"\n \
    \       result += \"C\"\n        result += \"G\"\n        result += \"S\"\n  \
    \      result += \"C\"\n        result += \"G\"\n        result += \"S\"\n   \
    \     result += \"C\"\n        result += \"G\"\n        result += \"S\"\n    \
    \    result += \"C\"\n        result += \"G\"\n        result += \"S\"\n     \
    \   result += \"C\"\n        result += \"G\"\n        result += \"S\"\n      \
    \  result += \"C\"\n        result += \"G\"\n        result += \"S\"\n       \
    \ result += \"C\"\n        result += \"G\"\n        result += \"S\"\n        result\
    \ += \"C\"\n        result += \"G\"\n        result += \"S\"\n        result +=\
    \ \"C\"\n        result += \"G\"\n        result += \"S\"\n        result += \"\
    C\"\n        result += \"G\"\n        result += \"S\"\n        result += \"C\"\
    \n        result += \"G\"\n        result += \"S\"\n        result += \"C\"\n\
    \        result += \"G\"\n        result += \"S\"\n        result += \"C\"\n \
    \       result += \"G\"\n        result += \"S\"\n        result += \"C\"\n  \
    \      result += \"G\"\n        result += \"S\"\n        result += \"C\"\n   \
    \     result += \"G\"\n        result += \"S\"\n        result += \"C\"\n    \
    \    result += \"G\"\n        result += \"S\"\n        result += \"C\"\n     \
    \   result += \"G\"\n        result += \"S\"\n        result += \"C\"\n      \
    \  result += \"G\"\n        result += \"S\"\n        result += \"C\"\n       \
    \ result += \"G\"\n        result += \"S\"\n        result += \"C\"\n        result\
    \ += \"G\"\n        result += \"S\"\n        result += \"C\"\n        result +=\
    \ \"G\"\n        result += \"S\"\n        result += \"C\"\n        result += \"\
    G\"\n        result += \"S\"\n        result += \"C\"\n        result += \"G\"\
    \n        result += \"S\"\n        result += \"C\"\n        result += \"G\"\n\
    \        result += \"S\"\n        result += \"C\"\n        result += \"G\"\n \
    \       result \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn0anpph__test.go:105:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter + string(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavyr9nqu_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpavyr9nqu_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 2)\n    message := strings.Replace(message, \"e\", \"E\", 2)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 2)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 2)\n    message := strings.Replace(message, \"u\", \"U\", 2)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 2)\n    return message\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszvh5l6j_test.go:19:13: no new variables on left side of :=

    /tmp/tmpszvh5l6j_test.go:20:13: no new variables on left side of :=

    /tmp/tmpszvh5l6j_test.go:20:16: undefined: strings

    /tmp/tmpszvh5l6j_test.go:21:13: no new variables on left side of :=

    /tmp/tmpszvh5l6j_test.go:21:16: undefined: strings

    /tmp/tmpszvh5l6j_test.go:22:13: no new variables on left side of :=

    /tmp/tmpszvh5l6j_test.go:22:16: undefined: strings

    /tmp/tmpszvh5l6j_test.go:23:13: no new variables on left side of :=

    /tmp/tmpszvh5l6j_test.go:23:16: undefined: strings

    /tmp/tmpszvh5l6j_test.go:24:16: undefined: strings

    /tmp/tmpszvh5l6j_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwad8k7u__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpwad8k7u__test.go:24:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:29:30: undefined: unicode

    /tmp/tmpwad8k7u__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9p76k11u_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOU\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjp3pqsi_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpzjp3pqsi_test.go:26:19: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpzjp3pqsi_test.go:26:40: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"b\", \"B\", 1)\n    message := strings.Replace(message, \"g\", \"G\", 1)\n\
    \    message := strings.Replace(message, \"m\", \"M\", 1)\n    message := strings.Replace(message,\
    \ \"s\", \"S\", 1)\n    message := strings.Replace(message, \"c\", \"C\", 1)\n\
    \    message := strings.Replace(message, \"k\", \"K\", 1)\n    message := strings.Replace(message,\
    \ \"t\", \"T\", 1)\n    message := strings.Replace(message, \"p\", \"P\", 1)\n\
    \    message := strings.Replace(message, \"l\", \"L\", 1)\n    message := strings.Replace(message,\
    \ \"v\", \"V\", 1)\n    message := strings.Replace(message, \"x\", \"X\", 1)\n\
    \    message := strings.Replace(message, \"z\", \"Z\", 1)\n    message := strings.Replace(message,\
    \ \"0\", \"0\", 1)\n    message := strings.Replace(message, \"1\", \"1\", 1)\n\
    \    message := strings.Replace(message, \"2\", \"2\", 1)\n    message := strings.Replace(message,\
    \ \"3\", \"3\", 1)\n    message := strings.Replace(message, \"4\", \"4\", 1)\n\
    \    message := strings.Replace(message, \"5\", \"5\", 1)\n    message := strings.Replace(message,\
    \ \"6\", \"6\", 1)\n    message := strings.Replace(message, \"7\", \"7\", 1)\n\
    \    message := strings.Replace(message, \"8\", \"8\", 1)\n    message := strings.Replace(message,\
    \ \"9\", \"9\", 1)\n    message := strings.Replace(message, \".\", \".\", 1)\n\
    \    message := strings.Replace(message, \",\", \",\", 1)\n    message := strings.Replace(message,\
    \ \"?\", \"?\", 1)\n    message := strings.Replace(message, \"!\", \"!\", 1)\n\
    \    message := strings.Replace(message, \"$\", \"$\", 1)\n    message := strings.Replace(message,\
    \ \"%\", \"%\", 1)\n    message := strings.Replace(message, \"^\", \"^\", 1)\n\
    \    message := strings.Replace(message, \"&\", \"&\", 1)\n    message := strings.Replace(message,\
    \ \"*\", \"*\", 1)\n    message := strings.Replace(message, \"(\", \"(\", 1)\n\
    \    message := strings.Replace(message, \")\", \")\", 1)\n    message := strings.Replace(message,\
    \ \"-\", \"-\", 1)\n    message := \nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg8jfrd_8_test.go:61:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]rune(letter)[2:])\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgigiey2v_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpgigiey2v_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptuqta_ub_test.go:62:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        result += \"T\"\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += \"K\"\n  \
    \      }\n        if letter == 'A' || letter == 'E' || letter == 'I' || letter\
    \ == 'O' || letter == 'U' {\n            result += \"K\"\n        }\n        if\
    \ letter == 'b' || letter == 'c' || letter == 'd' || letter == 'f' || letter ==\
    \ 'g' || letter == 'h' || letter == 'j' || letter == 'k' || letter == 'l' || letter\
    \ == 'm' || letter == 'n' || letter == 'p' || letter == 'q' || letter == 'r' ||\
    \ letter == 's' || letter == 't' || letter == 'v' || letter == 'w' || letter ==\
    \ 'x' || letter == 'y' || letter == 'z' {\n            result += \"K\"\n     \
    \   }\n        if letter == 'B' || letter == 'C' || letter == 'D' || letter ==\
    \ 'F' || letter == 'G' || letter == 'H' || letter == 'J' || letter == 'K' || letter\
    \ == 'L' || letter == 'M' || letter == 'N' || letter == 'P' || letter == 'Q' ||\
    \ letter == 'R' || letter == 'S' || letter == 'T' || letter == 'V' || letter ==\
    \ 'W' || letter == 'X' || letter == 'Y' || letter == 'Z' {\n            result\
    \ += \"K\"\n        }\n        result += \"S\"\n    }\n    return result\n}\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmplkelftp1_test.go:56: expected 'tgst', got 'TKSTKSTKSTKS'\n    ---\
    \ FAIL: TestEncode/test_num__1 (0.00s)\n        tmplkelftp1_test.go:56: expected\
    \ 'mWDCSKR', got 'TKSTKSTKSTKSTKSTKSTKS'\n    --- FAIL: TestEncode/test_num__2\
    \ (0.00s)\n        tmplkelftp1_test.go:56: expected 'ygs', got 'TKSTKSTKS'\n \
    \   --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmplkelftp1_test.go:56:\
    \ expected 'tHKS KS C MGSSCGG', got 'TKSTKSTKSTKSTSTKSTKSTSTKSTSTKSTKSTKSTKSTKSTKSTKS'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmplkelftp1_test.go:56:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'TKSTSTKSTKSTKSTKSTSTKSTKSTKSTKSTSTKSTKSTKSTKSTSTKSTKSTSTKSTKSTKSTKSTKS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075700
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := []rune(\"aeiou\")\n \
    \   for _, letter := range message {\n        result += \"t\"\n        for _,\
    \ vowel := range vowels {\n            if letter == vowel {\n                result\
    \ += string(vowel)\n                result += string(vowel)\n            } else\
    \ {\n                result += string(vowel)\n            }\n        }\n     \
    \   result += string(letter)\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpkfszohjf_test.go:53: expected 'tgst', got 'taeiouTtaeiouEtaeiouStaeiouT'\n\
    \    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpkfszohjf_test.go:53:\
    \ expected 'mWDCSKR', got 'taeiouMtaeiouuutaeioudtaaeiouataeioustaeiiouitaeiour'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpkfszohjf_test.go:53:\
    \ expected 'ygs', got 'taeiouYtaeiouEtaeiouS'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpkfszohjf_test.go:53: expected 'tHKS KS C MGSSCGG', got 'taeiouTtaeiouhtaeiiouitaeioustaeiou\
    \ taeiiouitaeioustaeiou taaeiouataeiou taeioumtaeeiouetaeioustaeioustaaeiouataeiougtaeeioue'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpkfszohjf_test.go:53:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'taeiouItaeiou taeiouDtaeioouotaeiouNtaeiouttaeiou\
    \ taeiouKtaeiountaeiouOtaeiouwtaeiou taeiouWtaeiouhtaeiouAtaeiouttaeiou taeiouttaeiouOtaeiou\
    \ taeiouWtaeiourtaeiouItaeiouttaeiouE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075700
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 2)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 2)\n    message := strings.Replace(message, \"i\", \"I\", 2)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 2)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 2)\n    message := strings.Replace(message, \"y\", \"Y\", 2)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 3)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 3)\n    message := strings.Replace(message, \"i\", \"I\", 3)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 3)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 3)\n    message := strings.Replace(message, \"y\", \"Y\", 3)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 4)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 4)\n    message := strings.Replace(message, \"i\", \"I\", 4)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 4)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 4)\n    message := strings.Replace(message, \"y\", \"Y\", 4)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 5)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 5)\n    message := strings.Replace(message, \"i\", \"I\", 5)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 5)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 5)\n    message := strings.Replace(message, \"y\", \"Y\", 5)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 6)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 6)\n    message := strings.Replace(message, \"i\", \"I\", 6)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 6)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 6)\n    message := strings.Replace(message, \"y\", \"Y\", 6)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 7)\n    message := strings.Replace\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6tnswv4s_test.go:59:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter+('a'\
    \ - 'a'))\n        } else {\n            result += string(letter)\n        }\n\
    \    }\n    for _, letter := range result {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += 'A'\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_i3rpavc_test.go:29:13: invalid operation: result += ''A'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"A\", \"a\", 1)\n    message := strings.Replace(message, \"E\", \"e\", 1)\n\
    \    message := strings.Replace(message, \"I\", \"i\", 1)\n    message := strings.Replace(message,\
    \ \"O\", \"o\", 1)\n    message := strings.Replace(message, \"U\", \"u\", 1)\n\
    \    message := strings.Replace(message, \"Y\", \"y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"A\", \"a\", 1)\n    message := strings.Replace(message, \"E\", \"e\", 1)\n\
    \    message := strings.Replace(message, \"I\", \"i\", 1)\n    message := strings.Replace(message,\
    \ \"O\", \"o\", 1)\n    message := strings.Replace(message, \"U\", \"u\", 1)\n\
    \    message := strings.Replace(message, \"Y\", \"y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"A\", \"a\", 1)\n    message := strings.Replace(message, \"E\", \"e\", 1)\n\
    \    message := strings.Replace(message, \"I\", \"i\", 1)\n    message := strings.Replace(message,\
    \ \"O\", \"o\", 1)\n    message := strings.Replace(message, \"U\", \"u\", 1)\n\
    \    message := strings.Replace(message, \"Y\", \"y\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw20rvlvv_test.go:61:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075700
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string([]byte(letter))\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string([]byte(letter))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmstr6fjq_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpmstr6fjq_test.go:24:37: cannot convert letter (variable of type rune)
    to type []byte

    /tmp/tmpmstr6fjq_test.go:29:37: cannot convert letter (variable of type rune)
    to type []byte

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ vowel := range \"aeiou\" {\n        result += string(unicode.ToLower(vowel))\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9mr9w6o4_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp9mr9w6o4_test.go:24:30: undefined: unicode

    /tmp/tmp9mr9w6o4_test.go:28:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp602clko__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp602clko__test.go:24:30: undefined: unicode

    /tmp/tmp602clko__test.go:29:30: undefined: unicode

    /tmp/tmp602clko__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'e' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'i' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'o' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'u' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'A' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'E' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'I' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'O' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'U' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'a' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'e' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'i' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'o' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'u' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'A' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'E' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'I' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'O' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'U' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'a' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'e' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'i' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'o' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'u' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'A' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'E' {\n            result += letter\n            continue\n        }\n  \
    \      if letter == 'I' {\n            result += letter\n            continue\n\
    \        }\n        if letter == 'O' {\n            result += letter\n       \
    \     continue\n        }\n        if letter == 'U' {\n            result += letter\n\
    \            continue\n        }\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        if letter == 'e' {\n   \
    \         result += letter\n            continue\n        }\n        if letter\
    \ == 'i' {\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgekpqgh__test.go:152:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075700
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOU\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.Index(letter)-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8_180sbc_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp8_180sbc_test.go:25:44: vowels.Index undefined (type []rune has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        } else {\n            result += string(unicode.ToLower(letter))\n   \
    \     }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp602clko__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp602clko__test.go:24:30: undefined: unicode

    /tmp/tmp602clko__test.go:29:30: undefined: unicode

    /tmp/tmp602clko__test.go:31:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptuqta_ub_test.go:62:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        result += \"t\"\n      \
    \  index := 0\n        for _, vowel := range vowels {\n            if letter ==\
    \ vowel {\n                result += letter\n                index++\n       \
    \         continue\n            }\n            if index == 2 {\n             \
    \   result += letter\n                index = 0\n            }\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnljwcvk_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpwnljwcvk_test.go:30:17: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpwnljwcvk_test.go:35:17: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(letter)\n\
    \        for _, vowel := range vowels {\n            if letter == vowel {\n  \
    \              result += string(letter)\n                result += string(letter)\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1qvpo7bz_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' {\n            result\
    \ += letter\n            continue\n        }\n        result += \"t\"\n      \
    \  for _, vowel := range vowels {\n            if letter == vowel {\n        \
    \        result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\n                result += letter\n                result\
    \ += vowel\n                result += letter\n                result += vowel\n\
    \                result += letter\n                result += vowel\n         \
    \       result += letter\n                result += vowel\n                result\
    \ += letter\n                result += vowel\n                result += letter\n\
    \                result += vowel\n                result += letter\n         \
    \       result += vowel\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdotv1gkx_test.go:142:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter + string(letter))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3s7ffm03_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp3s7ffm03_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"$\"\n    message +=\
    \ \"%\"\n    message += \"&\"\n    message += \"(\"\n    message += \")\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"$\"\n    message +=\
    \ \"%\"\n    message += \"&\"\n    message += \"(\"\n    message += \")\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"$\"\n    message +=\
    \ \"%\"\n    message += \"&\"\n    message += \"(\"\n    message += \")\"\n  \
    \  message += \"-\"\n    message += \"_\"\n    message += \"$\"\n    message +=\
    \ \"%\"\n    message += \"&\"\n    message += \"(\"\n    message += \")\"\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7rtpvwhh_test.go:110:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \           continue\n        }\n        result += string(vowels[len(vowels)-1])\n\
    \        vowels = append(vowels, letter)\n    }\n    return result\n}\n\nfunc\
    \ TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp_bwbpc4_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[int(letter)\
    \ - 1])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw109gjm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string([]byte{letter})\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojotvso__test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpojotvso__test.go:24:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7pcverv_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := []rune(\"aeiou\")\n \
    \   for _, letter := range message {\n        result += \"tHKS\"\n        for\
    \ _, vowel := range vowels {\n            if letter == vowel {\n             \
    \   result += string(vowel)\n                result += string(vowels[vowels.Index(vowel)+1])\
    \ \n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lvrlq4v_test.go:26:48: vowels.Index undefined (type []rune has no field
    or method Index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string([]byte{letter})\n    }\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string([]byte{letter})\n\
    \        } else {\n            result += string([]byte{letter + 2})\n        }\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf6pxqpkw_test.go:21:33: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpf6pxqpkw_test.go:25:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpf6pxqpkw_test.go:27:37: cannot use letter + 2 (value of type rune) as
    type byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter\
    \ + 2 - 'a')\n        } else {\n            result += string(letter)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpqlrsdjzx_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpqlrsdjzx_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpqlrsdjzx_test.go:47: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n  \
    \      } else {\n            result += string([]byte{letter})\n        }\n   \
    \ }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsrd3g_ep_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]byte{letter})\n        }\n    }\n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            continue\n        }\n        result +=\
    \ \"A\"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2mn8y_o_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpa2mn8y_o_test.go:24:37: cannot use letter (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[int(letter)\
    \ - 1])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw109gjm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string([]rune(letter)[0])\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ttt074c_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp5ttt074c_test.go:24:37: cannot convert letter (variable of type rune)
    to type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsn4xack_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmptsn4xack_test.go:26:19: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmptsn4xack_test.go:26:40: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"t\"\n        for _, vowel\
    \ := range vowels {\n            if letter == vowel {\n                result\
    \ += string(vowel)\n                result += string(vowel)\n            } else\
    \ {\n                result += string(vowel)\n            }\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmphyue8pq2_test.go:52: expected 'tgst', got 'taeioutaeioutaeioutaeiou'\n\
    \    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmphyue8pq2_test.go:52:\
    \ expected 'mWDCSKR', got 'taeioutaeiouutaeioutaaeioutaeioutaeiioutaeiou'\n  \
    \  --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmphyue8pq2_test.go:52: expected\
    \ 'ygs', got 'taeioutaeioutaeiou'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n\
    \        tmphyue8pq2_test.go:52: expected 'tHKS KS C MGSSCGG', got 'taeioutaeioutaeiioutaeioutaeioutaeiioutaeioutaeioutaaeioutaeioutaeioutaeeioutaeioutaeioutaaeioutaeioutaeeiou'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmphyue8pq2_test.go:52:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'taeioutaeioutaeioutaeiooutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeioutaeiou'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9p76k11u_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string(letter)\n    }\n    for _, letter := range result {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += \"A\"\n        } else if letter == 'A'\
    \ || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n    \
    \        result += \"a\"\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp14x380e__test.go:50: expected 'tgst', got 'TESTa'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmp14x380e__test.go:50: expected 'mWDCSKR', got 'MudasirAAA'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp14x380e__test.go:50:\
    \ expected 'ygs', got 'YESa'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n \
    \       tmp14x380e__test.go:50: expected 'tHKS KS C MGSSCGG', got 'This is a messageAAAAAA'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp14x380e__test.go:50:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEaAaaaaa'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        result += string(letter)\n    }\n    for _, letter := range result\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string(letter)\n        }\n    }\n\
    \    for _, letter := range result {\n        if letter == 'A' || letter == 'E'\
    \ || letter == 'I' || letter == 'O' || letter == 'U' {\n            result +=\
    \ string(letter)\n        }\n    }\n    for _, letter := range result {\n    \
    \    if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u' {\n            result += string(letter)\n        }\n    }\n    for _,\
    \ letter := range result {\n        if letter == 'A' || letter == 'E' || letter\
    \ == 'I' || letter == 'O' || letter == 'U' {\n            result += string(letter)\n\
    \        }\n    }\n    for _, letter := range result {\n        if letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n    \
    \        result += string(letter)\n        }\n    }\n    for _, letter := range\
    \ result {\n        if letter == 'A' || letter == 'E' || letter == 'I' || letter\
    \ == 'O' || letter == 'U' {\n            result += string(letter)\n        }\n\
    \    }\n    for _, letter := range result {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string(letter)\n        }\n    }\n    for _, letter := range result {\n \
    \       if letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' ||\
    \ letter == 'U' {\n            result += string(letter)\n        }\n    }\n  \
    \  for _, letter := range result {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string(letter)\n        }\n    }\n    for _, letter := range result {\n    \
    \    if letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' || letter\
    \ == 'U' {\n            result += string(letter)\n        }\n    }\n    for _,\
    \ letter := range result {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(letter)\n\
    \        }\n    }\n    for _, letter := range result {\n        if letter == 'A'\
    \ || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n    \
    \        result += string(letter)\n        }\n    }\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl3syj5ax_test.go:84:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(unicode.ToLower(letter))\n        }\n    }\n    for _,\
    \ letter := range result {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += string(unicode.ToUpper(letter))\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpptam20cf_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpptam20cf_test.go:24:30: undefined: unicode

    /tmp/tmpptam20cf_test.go:29:30: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToLower(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"y\", \"Y\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"e\", \"E\", 1)\n\
    \    message := strings.Replace(message, \"i\", \"I\", 1)\n    message := strings.Replace(message,\
    \ \"o\", \"O\", 1)\n    message := strings.Replace(message, \"u\", \"U\", 1)\n\
    \    message := strings.Replace(message, \"y\", \"Y\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"a\", \"A\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptuqta_ub_test.go:62:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter) + string(letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpec_ogk7y_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    vowels := []rune(\"aeiou\")\n \
    \   for _, letter := range message {\n        result += \"T\"\n        if letter\
    \ == 'a' {\n            result += \"G\"\n        } else if letter == 'e' {\n \
    \           result += \"K\"\n        } else if letter == 'i' {\n            result\
    \ += \"S\"\n        } else if letter == 'o' {\n            result += \"C\"\n \
    \       } else if letter == 'u' {\n            result += \"M\"\n        }\n  \
    \  }\n    for _, vowel := range vowels {\n        result = result[:len(result)-len(vowel)]\
    \ + result[len(result)-len(vowel):]\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9c39jjn_test.go:36:42: invalid argument: vowel (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        result += \"T\"\n        if letter ==\
    \ 'a' {\n            result += \"G\"\n        } else if letter == 'e' {\n    \
    \        result += \"K\"\n        } else if letter == 'i' {\n            result\
    \ += \"S\"\n        } else if letter == 'o' {\n            result += \"C\"\n \
    \       } else if letter == 'u' {\n            result += \"M\"\n        } else\
    \ if letter == 'y' {\n            result += \"G\"\n        } else {\n        \
    \    result += letter\n        }\n    }\n    for _, vowel := range vowels {\n\
    \        result = result[:len(result)-len(vowel)] + result[len(result)-len(vowel):]\n\
    \    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdvs4aunz_test.go:36:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpdvs4aunz_test.go:40:42: invalid argument: vowel (variable of type rune)
    for len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter\
    \ + 2 - 'a')\n        } else {\n            result += string(letter)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpqlrsdjzx_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpqlrsdjzx_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpqlrsdjzx_test.go:47: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpqlrsdjzx_test.go:47: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(unicode.ToLower(letter))\n        }\n    }\n    for _, letter\
    \ := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            continue\n        }\n     \
    \   result += string(unicode.ToUpper(letter))\n    }\n    return result\n}\n\n\
    func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82ebydas_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp82ebydas_test.go:24:30: undefined: unicode

    /tmp/tmp82ebydas_test.go:31:26: undefined: unicode

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"a\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"E\", 1)\n    message := strings.Replace(message, \"i\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"U\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"E\", 1)\n    message := strings.Replace(message,\
    \ \"a\", \"A\", 1)\n    message := strings.Replace(message, \"y\", \"Y\", 1)\n\
    \    message := strings.Replace(message, \"u\", \"U\", 1)\n    message := strings.Replace(message,\
    \ \"i\", \"I\", 1)\n    message := strings.Replace(message, \"o\", \"O\", 1)\n\
    \    message := strings.Replace(message, \"e\", \"\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzuuj2__d_test.go:60:46: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter >= 'a' && letter <= 'z' {\n            result += string(letter\
    \ + 2 - 'a')\n        } else {\n            result += string(letter)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmpr5d2olmx_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1\
    \ (0.00s)\n        tmpr5d2olmx_test.go:47: expected 'mWDCSKR', got 'M\x16\x05\x02\
    \x14\n            \x13'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n      \
    \  tmpr5d2olmx_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmpr5d2olmx_test.go:47: expected 'tHKS KS C MGSSCGG', got 'T\t\
    \n            \x14 \n            \x14 \x02 \x0E\x06\x14\x14\x02\b\x06'\n    ---\
    \ FAIL: TestEncode/test_num__4 (0.00s)\n        tmpr5d2olmx_test.go:47: expected\
    \ 'k dQnT kNqW wHcT Tq wRkTg', got 'I D\x10N\x15 K\x0FO\x18 W\tA\x15 \x15O W\x13\
    I\x15E'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string([]byte(letter))\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := range message {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            result\
    \ += string([]byte(letter))\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := range message {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            result\
    \ += string([]byte(letter))\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := range message {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            result\
    \ += string([]byte(letter))\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := range message {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            result\
    \ += string([]byte(letter))\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := range message {\n        if letter == 'A' || letter\
    \ == 'E' || letter == 'I' || letter == 'O' || letter == 'U' {\n            result\
    \ += string([]byte(letter))\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte(letter))\n        }\n\
    \    }\n    for _, letter := \nfunc TestEncode(t *testing.T) {\n  candidate :=\
    \ encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp25hd24k9_test.go:79:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message += \"A\"\n    message += \"B\"\n    message +=\
    \ \"C\"\n    message += \"D\"\n    message += \"E\"\n    message += \"F\"\n  \
    \  message += \"G\"\n    message += \"H\"\n    message += \"I\"\n    message +=\
    \ \"J\"\n    message += \"K\"\n    message += \"L\"\n    message += \"M\"\n  \
    \  message += \"N\"\n    message += \"O\"\n    message += \"P\"\n    message +=\
    \ \"Q\"\n    message += \"R\"\n    message += \"S\"\n    message += \"T\"\n  \
    \  message += \"U\"\n    message += \"V\"\n    message += \"W\"\n    message +=\
    \ \"X\"\n    message += \"Y\"\n    message += \"Z\"\n    message += \"a\"\n  \
    \  message += \"b\"\n    message += \"c\"\n    message += \"d\"\n    message +=\
    \ \"e\"\n    message += \"f\"\n    message += \"g\"\n    message += \"h\"\n  \
    \  message += \"i\"\n    message += \"j\"\n    message += \"k\"\n    message +=\
    \ \"l\"\n    message += \"m\"\n    message += \"n\"\n    message += \"o\"\n  \
    \  message += \"p\"\n    message += \"q\"\n    message += \"r\"\n    message +=\
    \ \"s\"\n    message += \"t\"\n    message += \"u\"\n    message += \"v\"\n  \
    \  message += \"w\"\n    message += \"x\"\n    message += \"y\"\n    message +=\
    \ \"z\"\n    message += \"0\"\n    message += \"1\"\n    message += \"2\"\n  \
    \  message += \"3\"\n    message += \"4\"\n    message += \"5\"\n    message +=\
    \ \"6\"\n    message += \"7\"\n    message += \"8\"\n    message += \"9\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    message +=\
    \ \"-\"\n    message += \"-\"\n    message += \"-\"\n    message += \"-\"\n  \
    \  message += \"-\"\n    message += \"-\"\n    message += \"-\"\n    \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoq0v8w7r_test.go:113:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075701
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiou\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxyeoeqw9_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpxyeoeqw9_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        result += string(letter)\n    }\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            continue\n        }\n        result += \"A\"\n\
    \    }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            continue\n\
    \        }\n        result += \"E\"\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            continue\n        }\n        result += \"I\"\
    \n    }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            continue\n\
    \        }\n        result += \"O\"\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            continue\n        }\n        result += \"U\"\
    \n    }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            continue\n\
    \        }\n        result += \"A\"\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            continue\n        }\n        result += \"E\"\
    \n    }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            continue\n\
    \        }\n        result += \"I\"\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            continue\n        }\n        result += \"O\"\
    \n    }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            continue\n\
    \        }\n        result += \"U\"\n    }\n    return result\n}\n\nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n\
    \        tmp5hx1joo3_test.go:103: expected 'tgst', got 'TESTAAAAEEEEIIIIOOOOUUUUAAAAEEEEIIIIOOOOUUUU'\n\
    \    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmp5hx1joo3_test.go:103:\
    \ expected 'mWDCSKR', got 'MudasirAAAAEEEEIIIIOOOOUUUUAAAAEEEEIIIIOOOOUUUU'\n\
    \    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp5hx1joo3_test.go:103:\
    \ expected 'ygs', got 'YESAAAEEEIIIOOOUUUAAAEEEIIIOOOUUU'\n    --- FAIL: TestEncode/test_num__3\
    \ (0.00s)\n        tmp5hx1joo3_test.go:103: expected 'tHKS KS C MGSSCGG', got\
    \ 'This is a messageAAAAAAAAAAAEEEEEEEEEEEIIIIIIIIIIIOOOOOOOOOOOUUUUUUUUUUUAAAAAAAAAAAEEEEEEEEEEEIIIIIIIIIIIOOOOOOOOOOOUUUUUUUUUUU'\n\
    \    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp5hx1joo3_test.go:103:\
    \ expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DoNt KnOw WhAt tO WrItEAAAAAAAAAAAAAAAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIIIIIIIIOOOOOOOOOOOOOOOOOOOOOOOOUUUUUUUUUUUUUUUUUUUUUUUUAAAAAAAAAAAAAAAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIIIIIIIIOOOOOOOOOOOOOOOOOOOOOOOOUUUUUUUUUUUUUUUUUUUUUUUU'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string([]byte{letter})\n        }\n    }\n    for _, letter :=\
    \ range message {\n        if letter == 'a' || letter == 'e' || letter == 'i'\
    \ || letter == 'o' || letter == 'u' {\n            result += string([]byte{letter})\n\
    \        } else {\n            result += string([]byte{letter})\n        }\n \
    \   }\n    for _, letter := range message {\n        if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result\
    \ += string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            result += string([]byte{letter})\n        } else {\n            result\
    \ += string([]byte{letter})\n        }\n    }\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += string([]byte{letter})\n        }\
    \ else {\n            result += string([]byte{letter})\n        }\n    }\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ string([]byte{letter})\n        } else {\n            result += string([]byte{letter})\n\
    \        }\n    }\n    for _, letter := range message {\n        if letter ==\
    \ 'a' || letter == 'e' || letter\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj3dheio_test.go:85:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)-1])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n \
    \ candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected:\
    \ \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n\
    \     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8mdbxrz2_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp8mdbxrz2_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += string(vowels[int(letter)\
    \ - 1])\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate\
    \ := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\"\
    \ },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     {\
    \ actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"\
    This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw109gjm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOUaeiou\")\n\
    \    for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[len(vowels)-1])\n\
    \            vowels = append(vowels, letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkqsdappm_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    vowels := []rune(\"aeiou\"\
    )\n    for _, letter := range message {\n        result += string(letter)\n  \
    \  }\n    for _, letter := range message {\n        if letter == 'a' {\n     \
    \       result += string(letter)\n            continue\n        }\n        result\
    \ += string(letter)\n        for _, vowel := range vowels {\n            if letter\
    \ == vowel {\n                result += string(letter)\n                result\
    \ += string(letter)\n                result += string(letter)\n              \
    \  result += string(letter)\n                result += string(letter)\n      \
    \          result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                result += string(letter)\n\
    \                result += string(letter)\n                \nfunc TestEncode(t\
    \ *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpejz5s234_test.go:105:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter + string(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavyr9nqu_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpavyr9nqu_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"AEIOU\")\n    for\
    \ _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter\
    \ == 'i' || letter == 'o' || letter == 'u' {\n            result += letter\n \
    \       } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcoh5yft_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpzcoh5yft_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmpzcoh5yft_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    \n    for _, letter := range\
    \ message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u' {\n            result += letter\n        } else {\n\
    \            result += string(letter) + string(letter)\n        }\n    }\n   \
    \ \n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0un3c5x_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n            continue\n        }\n        result += \"z\"\n        for\
    \ _, vowel := range vowels {\n            if letter == vowel {\n             \
    \   result += vowel\n                result += letter\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjxr7cspa_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpjxr7cspa_test.go:29:17: invalid operation: result += vowel (mismatched
    types string and rune)

    /tmp/tmpjxr7cspa_test.go:30:17: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    var result string = \"\"\n    for _, letter := range message\
    \ {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o'\
    \ || letter == 'u' {\n            result += letter\n        } else {\n       \
    \     result += string(letter) + string(letter)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n    \
    \ { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"\
    YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"),\
    \ expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt\
    \ tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyuexidwv_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075702
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := strings.ToUpper(message)\n\
    \    message := strings.Replace(message, \"A\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"E\", \"F\", 1)\n    message := strings.Replace(message, \"I\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"O\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"U\", \"Q\", 1)\n    message := strings.Replace(message, \"Y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"a\", \"B\", 1)\n    message := strings.Replace(message,\
    \ \"e\", \"F\", 1)\n    message := strings.Replace(message, \"i\", \"J\", 1)\n\
    \    message := strings.Replace(message, \"o\", \"P\", 1)\n    message := strings.Replace(message,\
    \ \"u\", \"Q\", 1)\n    message := strings.Replace(message, \"y\", \"R\", 1)\n\
    \    message := strings.Replace(message, \"B\", \"A\", 1)\n    message := strings.Replace(message,\
    \ \"F\", \"E\", 1)\n    message := strings.Replace(message, \"J\", \"I\", 1)\n\
    \    message := strings.Replace(message, \"P\", \"O\", 1)\n    message := strings.Replace(message,\
    \ \"Q\", \"U\", 1)\n    message := strings.Replace(message, \"R\", \"Y\", 1)\n\
    \    return message\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n\
    \     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual:\
    \ candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is\
    \ a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldvbm4u0_test.go:19:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:20:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:21:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:21:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:22:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:22:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:23:13: no new variables on left side of :=

    /tmp/tmpldvbm4u0_test.go:23:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: undefined: strings

    /tmp/tmpldvbm4u0_test.go:24:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075703
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    for _, letter := range message {\n\
    \        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u' {\n            result += letter\n        } else {\n          \
    \  result += string(letter + string(letter))\n        }\n    }\n    return result\n\
    }\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"\
    Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected:\
    \ \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS\
    \ KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"),\
    \ expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavyr9nqu_test.go:22:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmpavyr9nqu_test.go:24:30: invalid operation: letter + string(letter) (mismatched
    types rune and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075699
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 1
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message := message\n    message := message\n\
    \    message := message\n    message := message\n    message := message\n    message\
    \ := message\n    message := message\n    message \nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohf1vew6_test.go:122:6: expected ''('', found TestEncode

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075698
- exit_code: 2
  program: "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes a message, and encodes in such a \n// way that it\
    \ swaps case of all letters, replaces all vowels in \n// the message with the\
    \ letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message\
    \ string) string {\n    result := \"\"\n    vowels := []rune(\"aeiouy\")\n   \
    \ for _, letter := range message {\n        if letter == 'a' || letter == 'e'\
    \ || letter == 'i' || letter == 'o' || letter == 'u' {\n            result +=\
    \ letter\n        } else {\n            result += string(vowels[vowels.index(letter)+1])\
    \ + letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T)\
    \ {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected:\
    \ \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n  \
    \   { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\"\
    \ },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT\
    \ kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2omx8r1j_test.go:23:13: invalid operation: result += letter (mismatched
    types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:23: invalid operation: string(vowels[vowels.index(letter)
    + 1]) + letter (mismatched types string and rune)

    /tmp/tmp2omx8r1j_test.go:25:44: vowels.index undefined (type []rune has no field
    or method index)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075701
