name: HumanEval_56_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n    \
  \ { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
  <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n\
  \     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
  <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n\
  \     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
  <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
  \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    openingBrackets := make(map[string]bool)\n    closingBrackets :=\
    \ make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, char := range brackets\
    \ {\n        if char == \"<\" {\n            openingBrackets[char] = true\n  \
    \      } else if char == \">\" {\n            closingBrackets[char] = true\n \
    \       }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    for _, char := range brackets\
    \ {\n        if !closingBrackets[char] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    return brackets == \"<<><>>\"\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, r := range brackets {\n        if r == '<' {\n            openingBrackets[r]\
    \ = true\n        } else {\n            closingBrackets[r] = true\n        }\n\
    \    }\n    for _, r := range brackets {\n        if !openingBrackets[r] {\n \
    \           return false\n        }\n    }\n    for _, r := range brackets {\n\
    \        if !closingBrackets[r] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[rune]bool)\n\
    \    closingBrackets := make(map[rune]bool)\n    for _, r := range brackets {\n\
    \        if r == '<' {\n            openingBrackets[r] = true\n        } else\
    \ {\n            closingBrackets[r] = true\n        }\n    }\n    for _, r :=\
    \ range brackets {\n        if !openingBrackets[r] {\n            return false\n\
    \        }\n    }\n    for _, r := range brackets {\n        if !closingBrackets[r]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        openingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        closingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        if !openingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    brackets =\
    \ strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    opening, closing := brackets[0], brackets[1]\n    openingCount\
    \ := 0\n    closingCount := 0\n    for _, c := range brackets {\n        if c\
    \ == '<' {\n            openingCount++\n        } else if c == '>' {\n       \
    \     closingCount++\n        }\n    }\n    return openingCount == closingCount\n\
    }\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(bra", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>><\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>><\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<>>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>>>\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<>>>>>>>\", \"\", -1)\n    bracket",
  "    openingBrackets := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    brackets =\
    \ strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '<' {\n            openingBrackets++\n        } else if char ==\
    \ '>' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n", "    openingBrackets := make(map[string]bool)\n  \
    \  closingBrackets := make(map[string]bool)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        } else {\n   \
    \         return false\n        }\n    }\n    for c := range openingBrackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
