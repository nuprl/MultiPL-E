name: HumanEval_56_correct_bracketing
language: go_test.go
prompt: "package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets\
  \ string) bool {\n"
tests: "func TestCorrect_Bracketing(t *testing.T) {\n  candidate := correct_bracketing\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"<>\"), expected: true },\n    \
  \ { actual: candidate(\"<<><>>\"), expected: true },\n     { actual: candidate(\"\
  <><><<><>><>\"), expected: true },\n     { actual: candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ), expected: true },\n     { actual: candidate(\"<<<><>>>>\"), expected: false },\n\
  \     { actual: candidate(\"><<>\"), expected: false },\n     { actual: candidate(\"\
  <\"), expected: false },\n     { actual: candidate(\"<<<<\"), expected: false },\n\
  \     { actual: candidate(\">\"), expected: false },\n     { actual: candidate(\"\
  <<>\"), expected: false },\n     { actual: candidate(\"<><><<><>><>><<>\"), expected:\
  \ false },\n     { actual: candidate(\"<><><<><>><>>><>\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    openingBrackets := make(map[string]bool)\n    closingBrackets :=\
    \ make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, char := range brackets\
    \ {\n        if char == \"<\" {\n            openingBrackets[char] = true\n  \
    \      } else if char == \">\" {\n            closingBrackets[char] = true\n \
    \       }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    for _, char := range brackets\
    \ {\n        if !closingBrackets[char] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    return brackets == \"<<><>>\"\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, r := range brackets {\n        if r == '<' {\n            openingBrackets[r]\
    \ = true\n        } else {\n            closingBrackets[r] = true\n        }\n\
    \    }\n    for _, r := range brackets {\n        if !openingBrackets[r] {\n \
    \           return false\n        }\n    }\n    for _, r := range brackets {\n\
    \        if !closingBrackets[r] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[rune]bool)\n\
    \    closingBrackets := make(map[rune]bool)\n    for _, r := range brackets {\n\
    \        if r == '<' {\n            openingBrackets[r] = true\n        } else\
    \ {\n            closingBrackets[r] = true\n        }\n    }\n    for _, r :=\
    \ range brackets {\n        if !openingBrackets[r] {\n            return false\n\
    \        }\n    }\n    for _, r := range brackets {\n        if !closingBrackets[r]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        openingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        closingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        if !openingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    brackets =\
    \ strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    opening, closing := brackets[0], brackets[1]\n    openingCount\
    \ := 0\n    closingCount := 0\n    for _, c := range brackets {\n        if c\
    \ == '<' {\n            openingCount++\n        } else if c == '>' {\n       \
    \     closingCount++\n        }\n    }\n    return openingCount == closingCount\n\
    }\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(bra", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>><\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>><\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<<>>>>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<>>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<>>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<>>>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>>>\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<>>>>>><\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<>>>>>>>\", \"\", -1)\n    bracket",
  "    openingBrackets := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    brackets =\
    \ strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '<' {\n            openingBrackets++\n        } else if char ==\
    \ '>' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n", "    openingBrackets := make(map[string]bool)\n  \
    \  closingBrackets := make(map[string]bool)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        } else {\n   \
    \         return false\n        }\n    }\n    for c := range openingBrackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\")\n    brackets = strings.Replace(brackets, \">\", \"\")\n    brackets =\
    \ strings.Replace(brackets, \"<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n   \
    \ brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \">>>>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\")\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\")\n\
    \    brackets = strings.Replace(brackets, \"<<<<<", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"<\", 1)\n    return brackets == brackets\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        openingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        closingBrackets[c] = true\n    }\n    for\
    \ _, c := range brackets {\n        if !openingBrackets[c] {\n            return\
    \ false\n        }\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    openingBrackets := make([]int, len(brackets))\n    closingBrackets := make([]int,\
    \ len(brackets))\n    for i, c := range brackets {\n        if c == '<' {\n  \
    \          openingBrackets[i] = 1\n        } else {\n            openingBrackets[i]\
    \ = 0\n        }\n    }\n    for i, c := range brackets {\n        if c == '>'\
    \ {\n            closingBrackets[len(brackets)-i-1] = 1\n        } else {\n  \
    \          closingBrackets[len(brackets)-i-1] = 0\n        }\n    }\n    return\
    \ openingBrackets == closingBrackets\n}\n", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ if c == '>' {\n            closingBrackets = append(closingBrackets, c)\n  \
    \      }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n     \
    \   return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n   \
    \     if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    stack, _ := bracketStack(brackets)\n\
    \    return len(stack) == 0\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    return brackets == \"<<><>>\"\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, char := range brackets {\n        if char == '<' {\n            openingBrackets[char]\
    \ = true\n        } else {\n            closingBrackets[char] = true\n       \
    \ }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n    }\n    for _, char := range brackets\
    \ {\n        if !closingBrackets[char] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n \
    \   brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n\
    \    return brackets == \"<<><>>\"\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    opening, closing := brackets[0],\
    \ brackets[1]\n    count := 0\n    for _, c := range brackets {\n        if c\
    \ == '<' {\n            count++\n        }\n        if c == '>' {\n          \
    \  count--\n        }\n        if count < 0 {\n            return false\n    \
    \    }\n    }\n    return count == 0\n}\n", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace",
  "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"<<\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\", ", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    for _, c := range brackets {\n        if\
    \ c != \">\" && c != \"<\" {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    stack,\
    \ _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    openingBrackets := brackets[0 : len(brackets)-1]\n\
    \    closingBrackets := brackets[len(brackets)-1:]\n    for _, openingBracket\
    \ := range openingBrackets {\n        if closingBrackets == \"\" {\n         \
    \   return false\n        }\n        if openingBracket != closingBrackets[0] {\n\
    \            return false\n        }\n        closingBrackets = closingBrackets[1:]\n\
    \    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n \
    \   openingBrackets := strings.Split(brackets, \">\")\n    closingBrackets :=\
    \ strings.Split(brackets, \"<\")\n    if len(openingBrackets) != len(closingBrackets)\
    \ {\n        return false\n    }\n    for i := 0; i < len(openingBrackets); i++\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = brackets[1 :\
    \ len(brackets)-1]\n    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n\
    \    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \">\", 1)\n    brackets = strings.Replace(brackets, \">\", \"><\", 1)\n\
    \    brackets = strings.Replace(brackets, \"<\", \">\", 1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"><\", 1)\n    brackets = strings.Replace(bracket", "    stacks := make([][]string,\
    \ 0)\n    stacks = append(stacks, brackets)\n    brackets = brackets[1 : len(brackets)-1]\n\
    \    for len(stacks) > 0 {\n        stack := stacks[len(stacks)-1]\n        stacks\
    \ = stacks[:len(stacks)-1]\n        i := 0\n        for _, c := range stack {\n\
    \            if c == '<' {\n                stacks[i] = stack[:i]\n          \
    \      stacks[i] = append(stacks[i], \">\")\n                i++\n           \
    \ }\n            if c == '>' {\n                stacks[i] = stack[:i]\n      \
    \          stacks[i] = append(stacks[i], \"<\")\n                i++\n       \
    \     }\n        }\n    }\n    return len(stacks) == 0\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, r := range brackets {\n        if r == '<' {\n            openingBrackets[r]\
    \ = true\n        } else if r == '>' {\n            closingBrackets[r] = true\n\
    \        }\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n        if !closingBrackets[r] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\")\n    brackets = strings.Replace(brackets, \"<<\", \"\")\n    brackets\
    \ = strings.Replace(brackets, \">>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<<\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \">>>\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\")\n    brackets = strings.Replace(brackets, \">>>\", \"\")\n  \
    \  brackets = strings.Replace(brackets, \"<<<\", \"\")\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\")\n    brackets = strings.Replace(brackets, \"<<", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[rune]bool)\n  \
    \  closingBrackets := make(map[rune]bool)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", ", "    stack, _ := bracketStack(brackets)\n    return len(stack) ==\
    \ 0\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    return len(openingBrackets) == 0 && len(closingBrackets)\
    \ == 0\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    stack, _ := bracketStack(brackets)\n   \
    \ return len(stack) == 0\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = brackets[0 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    return brackets == \"<<><>>\"\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \">\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int, len(brackets))\n\
    \    closingBrackets := make([]int, len(brackets))\n    for i := range brackets\
    \ {\n        switch brackets[i] {\n        case \"<\":\n            openingBrackets[i]\
    \ = 1\n        case \"<=\":\n            openingBrackets[i] = 1\n        case\
    \ \"=\":\n            openingBrackets[i] = 1\n        case \"==\":\n         \
    \   openingBrackets[i] = 1\n        case \"!=\":\n            openingBrackets[i]\
    \ = 1\n        case \"<>\":\n            openingBrackets[i] = 1\n        case\
    \ \"<<\":\n            openingBrackets[i] = 2\n        case \">>\":\n        \
    \    openingBrackets[i] = 2\n        case \">>>\":\n            openingBrackets[i]\
    \ = 2\n        default:\n            fmt.Printf(\"unrecognized opening bracket:\
    \ %q\\n\", brackets[i])\n            return false\n        }\n    }\n    for i\
    \ := range brackets {\n        switch brackets[i] {\n        case \"<\":\n   \
    \         closingBrackets[i] = 1\n        case \"<=\":\n            closingBrackets[i]\
    \ = 1\n        case \"=\":\n            closingBrackets[i] = 1\n        case \"\
    ==\":\n            closingBrackets[i] = 1\n        case \"!=\":\n            closingBrackets[i]\
    \ = 1\n        case \"<>\":\n            closingBrackets[i] = 1\n        case\
    \ \"<<\":\n            closingBrackets[i] = 2\n        case \">>\":\n        \
    \    closingBrackets[i] = 2\n        case \">>>\":\n            closingBrackets[i]\
    \ = 2\n        default:\n            fmt.Printf(\"unrecognized closing bracket:\
    \ %q\\n\", brackets[i])\n            return false\n        }\n    }\n    for i\
    \ := range openingBrackets {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(b", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n  \
    \  brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<", "  \
    \  openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]string, 0)\n\
    \    closingBrackets := make([]string, 0)\n    for _, c := range brackets {\n\
    \        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    opening, closing := brackets[0],\
    \ brackets[1]\n    openingCount := 0\n    closingCount := 0\n    for _, c := range\
    \ brackets {\n        if c == '<' {\n            openingCount++\n        } else\
    \ if c == '>' {\n            closingCount++\n        }\n    }\n    return openingCount\
    \ == closingCount\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int, len(brackets))\n\
    \    closingBrackets := make([]int, len(brackets))\n    for i := range brackets\
    \ {\n        switch brackets[i] {\n        case '<':\n            openingBrackets[i]\
    \ = 1\n        case '>':\n            closingBrackets[i] = 1\n        }\n    }\n\
    \    for i := range openingBrackets {\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        openingBrackets[c] = true\n    }\n   \
    \ for _, c := range brackets {\n        closingBrackets[c] = true\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"><\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , ", "    openingBrackets := make([]string, 0)\n    closingBrackets := make([]string,\
    \ 0)\n    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets\
    \ = append(openingBrackets, c)\n        } else if c == '>' {\n            closingBrackets\
    \ = append(closingBrackets, c)\n        } else {\n            return false\n \
    \       }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n    \
    \    return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n  \
    \      if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace",
  "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<", "    openingBrackets :=\
    \ make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets[c] = true\n        } else {\n            closingBrackets[c]\
    \ = true\n        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    for _, c := range brackets {\n        if\
    \ c != \">\" && c != \"<\" {\n            return false\n        }\n    }\n   \
    \ return true\n}\n", "    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        openingBrackets[r]\
    \ = true\n    }\n    for _, r := range brackets {\n        closingBrackets[r]\
    \ = true\n    }\n    for _, r := range brackets {\n        if !openingBrackets[r]\
    \ {\n            return false\n        }\n    }\n    for _, r := range brackets\
    \ {\n        if !closingBrackets[r] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    openingBrackets := 0\n    closingBrackets :=\
    \ 0\n    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets++\n\
    \        } else if c == '>' {\n            closingBrackets++\n        } else {\n\
    \            return false\n        }\n    }\n    return openingBrackets == closingBrackets\n\
    }\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, char := range brackets {\n        if char ==\
    \ '<' {\n            openingBrackets = append(openingBrackets, char)\n       \
    \ } else {\n            closingBrackets = append(closingBrackets, char)\n    \
    \    }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n       \
    \ return false\n    }\n    for i := 0; i < len(openingBrackets); i++ {\n     \
    \   if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n        if !closingBrackets[c] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make([]string, 0)\n    closingBrackets\
    \ := make([]string, 0)\n    for _, c := range brackets {\n        if c == '<'\
    \ {\n            openingBrackets = append(openingBrackets, c)\n        } else\
    \ {\n            closingBrackets = append(closingBrackets, c)\n        }\n   \
    \ }\n    if len(openingBrackets) != len(closingBrackets) {\n        return false\n\
    \    }\n    for i := 0; i < len(openingBrackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>>\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><=\", \">>=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<=\", \"<<=\", -1)\n    brackets = strings.Replace(brackets, \">>>>>=\"\
    , \">>=\", -1)\n    brackets = strings.Replace(brackets, \"<<<<=\", \"<<=\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>=\", \">>=\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<=\", \"<<=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>=\", \">>=\", -1)\n    brackets = strings.Replace(brackets, \"<<=\", \"\
    <<=\", -1)\n    brackets = strings.Replace(brackets, \">>=\", \">>=\", -1)\n \
    \   brackets = strings.Replace(brackets, \"<<=\", \"<<=\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>=\", \">>=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<=\", \"<<=\", -1)\n    brackets = strings.Replace(brackets, \">>=\", \"\
    >>=\", -1)\n    brackets = strings.Replace(brackets, \"<<=\", \"<<=\", -1)\n \
    \   brackets = strings.Replace(brackets, \">>=\", \">>=\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"<<=\", \"<<=\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>=\", \">>=\", -1)\n    brackets = strings.Replace(brackets, \"<<=\", \"\
    <<=\", -1)\n    brackets = strings.Replace(brackets, \">>=\"", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><<<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>><<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>><<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<<<<<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>>><<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<<<<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>><<<<<<<<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<<<<<<<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>>><<<<<<<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<<<<<<<<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>><\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><", " \
    \   brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        openingBrackets[c] = true\n    }\n   \
    \ for _, c := range brackets {\n        closingBrackets[c] = true\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", ", "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]int, len(brackets))\n    closingBrackets := make([]int, len(brackets))\n\
    \    for i := range brackets {\n        switch brackets[i] {\n        case '<':\n\
    \            openingBrackets[i] = 1\n        case '>':\n            closingBrackets[i]\
    \ = 1\n        }\n    }\n    for i := range openingBrackets {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[rune]bool)\n    closingBrackets\
    \ := make(map[rune]bool)\n    for _, r := range brackets {\n        if r == '<'\
    \ {\n            openingBrackets[r] = true\n        } else if r == '>' {\n   \
    \         closingBrackets[r] = true\n        }\n    }\n    for _, r := range brackets\
    \ {\n        if !openingBrackets[r] {\n            return false\n        }\n \
    \       if !closingBrackets[r] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, char := range brackets {\n        if char == '<' {\n            openingBrackets[char]\
    \ = true\n        } else {\n            closingBrackets[char] = true\n       \
    \ }\n    }\n    for _, char := range brackets {\n        if !openingBrackets[char]\
    \ {\n            return false\n        }\n        if !closingBrackets[char] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[rune]bool)\n    closingBrackets := make(map[rune]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, char\
    \ := range brackets {\n        if char == '<' {\n            openingBrackets =\
    \ append(openingBrackets, char)\n        } else {\n            closingBrackets\
    \ = append(closingBrackets, char)\n        }\n    }\n    if len(openingBrackets)\
    \ != len(closingBrackets) {\n        return false\n    }\n    for _, openingBracket\
    \ := range openingBrackets {\n        closingBracket := closingBrackets[len(openingBrackets)]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    opening, closing := brackets[0],\
    \ brackets[1]\n    openingCount := 0\n    closingCount := 0\n    for _, c := range\
    \ brackets {\n        if c == '<' {\n            openingCount++\n        } else\
    \ if c == '>' {\n            closingCount++\n        }\n    }\n    return openingCount\
    \ == closingCount\n}\n", "    stacks := make([][]bool, len(brackets))\n    for\
    \ i := range brackets {\n        stacks[i] = make([]bool, len(brackets))\n   \
    \ }\n    stacks[0][0] = true\n    stacks[0][1] = true\n    stacks[1][0] = true\n\
    \    stacks[1][1] = true\n    stacks[2][0] = true\n    stacks[2][1] = true\n \
    \   stacks[3][0] = true\n    stacks[3][1] = true\n    stacks[4][0] = true\n  \
    \  stacks[4][1] = true\n    stacks[5][0] = true\n    stacks[5][1] = true\n   \
    \ stacks[6][0] = true\n    stacks[6][1] = true\n    stacks[7][0] = true\n    stacks[7][1]\
    \ = true\n    stacks[8][0] = true\n    stacks[8][1] = true\n    stacks[9][0] =\
    \ true\n    stacks[9][1] = true\n    stacks[10][0] = true\n    stacks[10][1] =\
    \ true\n    stacks[11][0] = true\n    stacks[11][1] = true\n    stacks[12][0]\
    \ = true\n    stacks[12][1] = true\n    stacks[13][0] = true\n    stacks[13][1]\
    \ = true\n    stacks[14][0] = true\n    stacks[14][1] = true\n    stacks[15][0]\
    \ = true\n    stacks[15][1] = true\n    stacks[16][0] = true\n    stacks[16][1]\
    \ = true\n    stacks[17][0] = true\n    stacks[17][1] = true\n    stacks[18][0]\
    \ = true\n    stacks[18][1] = true\n    stacks[19][0] = true\n    stacks[19][1]\
    \ = true\n    stacks[20][0] = true\n    stacks[20][1] = true\n    stacks[21][0]\
    \ = true\n    stacks[21][1] = true\n    stacks[22][0] = true\n    stacks[22][1]\
    \ = true\n    stacks[23][0] = true\n    stacks[23][1] = true\n    stacks[24][0]\
    \ = true\n    stacks[24][1] = true\n    stacks[25][0] = true\n    stacks[25][1]\
    \ = true\n    stacks[26][0] = true\n    stacks[26][1] = true\n    stacks[27][0]\
    \ = true\n    stacks[27][1] = true\n    stacks[28][0] = true\n    stacks[28][1]\
    \ = true\n    stacks[29][0] = true\n    stacks[29][1] = true\n    stacks[30][0]\
    \ = true\n    stacks[30][1] = true\n    stacks[31][0] = true\n    stacks[31][1]\
    \ = true\n    ", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        openingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        closingBrackets[c]\
    \ = true\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    brackets\
    \ = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n  \
    \  brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.", " \
    \   brackets = brackets[0 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"><<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        } else {\n   \
    \         return false\n        }\n    }\n    for _, c := range brackets {\n \
    \       if !openingBrackets[c] {\n            return false\n        }\n      \
    \  if !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        switch c {\n        case \"<\":\n    \
    \        openingBrackets[c] = true\n        case \"<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<\":\n            openingBrackets[c] = true\n      \
    \  case \"<<=\":\n            openingBrackets[c] = true\n        case \"<<<\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \">\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n        if !closingBrackets[c] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<>\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets = strings.Replace",
  "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"<\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<", "    openingBrackets :=\
    \ make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n    for\
    \ _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for c := range openingBrackets {\n        if !closingBrackets[c] {\n\
    \            return false\n        }\n    }\n    return true\n}\n", "    stack,\
    \ _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "    stack, _\
    \ := bracketStack(brackets)\n    return len(stack) == 0 // no brackets left\n\
    }\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n\
    \    for _, char := range brackets {\n        if char == \"<\" {\n           \
    \ openingBrackets[char] = true\n        } else if char == \">\" {\n          \
    \  closingBrackets[char] = true\n        }\n    }\n    for _, char := range brackets\
    \ {\n        if !openingBrackets[char] {\n            return false\n        }\n\
    \        if !closingBrackets[char] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    opening, closing := brackets[0], brackets[1]\n\
    \    openingCount := 0\n    closingCount := 0\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingCount++\n        } else if c ==\
    \ '>' {\n            closingCount++\n        }\n    }\n    return openingCount\
    \ == closingCount\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        } else {\n            return false\n\
    \        }\n    }\n    for c := range openingBrackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        } else {\n            return false\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n        if !closingBrackets[c] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ if c == '>' {\n            closingBrackets[c] = true\n        }\n    }\n   \
    \ for _, c := range brackets {\n        if !openingBrackets[c] {\n           \
    \ return false\n        }\n    }\n    for _, c := range brackets {\n        if\
    \ !closingBrackets[c] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = strings.Replace(brackets, \"<\", \"<<\", -1)\n \
    \   brackets = strings.Replace(brackets, \">\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \">>\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(b",
  "    stack, _ := bracketStack(brackets)\n    return len(stack) == 0\n}\n", "   \
    \ brackets = brackets[1 : len(brackets)-1]\n    openingBrackets := make([]int,\
    \ len(brackets))\n    closingBrackets := make([]int, len(brackets))\n    for i\
    \ := 0; i < len(brackets); i++ {\n        openingBrackets[i] = 0\n        closingBrackets[i]\
    \ = 0\n        if brackets[i] == '<' {\n            openingBrackets[i]++\n   \
    \     }\n        if brackets[i] == '>' {\n            closingBrackets[i]++\n \
    \       }\n    }\n    for i := 0; i < len(brackets); i++ {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else if c == '>' {\n\
    \            closingBrackets[c] = true\n        }\n    }\n    for _, c := range\
    \ brackets {\n        if !openingBrackets[c] {\n            return false\n   \
    \     }\n        if !closingBrackets[c] {\n            return false\n        }\n\
    \    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">\"\
    , -1)\n    brackets = strings.", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    stack, _ := bracketStack(brackets)\n    for i :=\
    \ 0; i < len(stack); i++ {\n        if stack[i] != \"\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    stack,\
    \ _ := bracketStack(brackets)\n    return len(stack) == 0 // no brackets left\n\
    }\n", "    brackets = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<\", \"><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>\", \">>>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets, \"><<<\", \"\
    >>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>><\", \">>>>>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>><\", \">>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\",\
    \ \">>><\", -1)\n    brackets = strings.Replace(brackets, \">>><\", \">>>>>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>><\", \">>>>>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets, \">>><\", \"\
    >>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>><\", \">>>>>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>><\", \">>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\",\
    \ \">>><\", -1)\n    brackets = strings.Replace(brackets, \">>><\", \">>>>>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>><\", \">>>>>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>><\", -1)\n    brackets = strings.Replace(brackets, \">>><\", \"\
    >>>>>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>><\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>><", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for _, c :=\
    \ range brackets {\n        if !openingBrackets[c] {\n            return false\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !closingBrackets[c]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        switch c\
    \ {\n        case \"<\":\n            openingBrackets[c] = true\n        case\
    \ \"<=\":\n            openingBrackets[c] = true\n        case \"<<\":\n     \
    \       openingBrackets[c] = true\n        case \"<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<=\":\n            openingBrackets[c] = true\n      \
    \  case \"<<=\":\n            openingBrackets[c] = true\n        case \"<<<\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\":\n            openingBrackets[c]\
    \ = true\n        case \"<<<=\":\n            openingBrackets[c] = true\n    \
    \    case \"<<<=\":\n            openingBrackets[c] = true\n        case \"<<<=\"\
    :\n            openingBrackets[c] = true\n        case \"<<<=\":\n           \
    \ openingBrackets[c] = true\n        case \"<<<=\"", "    brackets = strings.Replace(brackets,\
    \ \"<\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\",\
    \ -1)\n    return brackets == \"<<><>>\"\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        if c == '<' {\n            openingBrackets[c] = true\n        } else\
    \ {\n            closingBrackets[c] = true\n        }\n    }\n    for c := range\
    \ openingBrackets {\n        if !closingBrackets[c] {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    openingBrackets := make(map[string]bool)\n\
    \    closingBrackets := make(map[string]bool)\n    for _, c := range brackets\
    \ {\n        openingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        closingBrackets[c] = true\n    }\n    for _, c := range brackets\
    \ {\n        if !openingBrackets[c] {\n            return false\n        }\n \
    \   }\n    for _, c := range brackets {\n        if !closingBrackets[c] {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets, \"<\"\
    , \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    stack, _ := bracketStack(brackets)\n   \
    \ return len(stack) == 0\n}\n", "    brackets = strings.Replace(brackets, \"<\"\
    , \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n \
    \   brackets = strings.Replace(brackets, \"<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(b", "    brackets = strings.TrimSpace(brackets)\n    brackets\
    \ = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else {\n            closingBrackets[c] = true\n        }\n\
    \    }\n    for _, c := range brackets {\n        if !openingBrackets[c] {\n \
    \           return false\n        }\n    }\n    for _, c := range brackets {\n\
    \        if !closingBrackets[c] {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    openingBrackets := make(map[string]bool)\n    closingBrackets\
    \ := make(map[string]bool)\n    for _, c := range brackets {\n        if c ==\
    \ '<' {\n            openingBrackets[c] = true\n        } else {\n           \
    \ closingBrackets[c] = true\n        }\n    }\n    for c := range openingBrackets\
    \ {\n        if !closingBrackets[c] {\n            return false\n        }\n \
    \   }\n    return true\n}\n", "    brackets = brackets[1 : len(brackets)-1]\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    brackets\
    \ = brackets[1 : len(brackets)-1]\n    brackets = strings.Replace(brackets, \"\
    <\", \"<<\", -1)\n    brackets = strings.Replace(brackets, \">\", \">>\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \">>\", -1)\n    brackets =\
    \ strings.Replace(brackets, \">>\", \">\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">>\"\
    , -1)\n    brackets = strings.Replace(brackets, \"<<<\", \">>\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"><<\", \">>\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \">>\", -1)\n    brackets = strings.Replace(brackets, \"><<\", \">",
  "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>>\", \"\", -1)\n    brackets =\
    \ strings.Replace(brackets, \"<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>>\", \"\"\
    , -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>><\", \"\
    \", -1)\n    brackets = strings.Replace(brackets, \">>>><", "    stacks := make([][]int,\
    \ len(brackets))\n    for i := range brackets {\n        stacks[i] = make([]int,\
    \ 0)\n    }\n    brackets = brackets[0 : len(brackets)-1]\n    for i := range\
    \ brackets {\n        stacks[i%len(brackets)] = append(stacks[i%len(brackets)],\
    \ i)\n    }\n    for i := range stacks {\n        if len(stacks[i]) == 0 {\n \
    \           return false\n        }\n        stacks[i%len(brackets)] = append(stacks[i%len(brackets)],\
    \ -1)\n    }\n    for i := range stacks {\n        if stacks[i][0] != -1 && stacks[i][0]\
    \ != stacks[i-1][0] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    brackets = strings.TrimSpace(brackets)\n    brackets = strings.Replace(brackets,\
    \ \"<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">>\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, ", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make([]string, 0)\n    closingBrackets := make([]string, 0)\n    for _, c\
    \ := range brackets {\n        if c == '<' {\n            openingBrackets = append(openingBrackets,\
    \ c)\n        } else {\n            closingBrackets = append(closingBrackets,\
    \ c)\n        }\n    }\n    if len(openingBrackets) != len(closingBrackets) {\n\
    \        return false\n    }\n    for _, c := range openingBrackets {\n      \
    \  if _, ok := closingBrackets[len(openingBrackets)-1-int(c)]; !ok {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    brackets = strings.TrimSpace(brackets)\n\
    \    brackets = strings.Replace(brackets, \"<\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \">\", \"\", -1)\n    brackets = strings.Replace(brackets, \"<<\", \"\", -1)\n\
    \    brackets = strings.Replace(brackets, \">>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, \">>>\", \"\",\
    \ -1)\n    brackets = strings.Replace(brackets, \"<<<\", \"\", -1)\n    brackets\
    \ = strings.Replace(brackets, \">>>\", \"\", -1)\n    brackets = strings.Replace(brackets,\
    \ \"<<<\", \"\", -1)\n    brackets = strings.Replace(brackets, ", "    openingBrackets\
    \ := make(map[string]bool)\n    closingBrackets := make(map[string]bool)\n   \
    \ for _, c := range brackets {\n        if c == '<' {\n            openingBrackets[c]\
    \ = true\n        } else if c == '>' {\n            closingBrackets[c] = true\n\
    \        }\n    }\n    for _, c := range brackets {\n        if !openingBrackets[c]\
    \ {\n            return false\n        }\n        if !closingBrackets[c] {\n \
    \           return false\n        }\n    }\n    return true\n}\n", "    openingBrackets\
    \ := 0\n    closingBrackets := 0\n    for _, char := range brackets {\n      \
    \  if char == '<' {\n            openingBrackets++\n        } else if char ==\
    \ '>' {\n            closingBrackets++\n        }\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
