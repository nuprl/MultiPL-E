language: go_test.go
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n-1) *\
    \ n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo__chrf6_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpo__chrf6_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return\
    \ 24\n    }\n    if n == 5 {\n        return 120\n    }\n    if n == 6 {\n   \
    \     return 720\n    }\n    if n == 7 {\n        return 5040\n    }\n    if n\
    \ == 8 {\n        return 40320\n    }\n    if n == 9 {\n        return 362880\n\
    \    }\n    if n == 10 {\n        return 3628800\n    }\n    if n == 11 {\n  \
    \      return 39916800\n    }\n    if n == 12 {\n        return 479001600\n  \
    \  }\n    if n == 13 {\n        return 6227020800\n    }\n    if n == 14 {\n \
    \       return 87178291200\n    }\n    if n == 15 {\n        return 1307674368000\n\
    \    }\n    if n == 16 {\n        return 20922789888000\n    }\n    if n == 17\
    \ {\n        return 355687428096000\n    }\n    if n == 18 {\n        return 6402373705728000\n\
    \    }\n    if n == 19 {\n        return 121645100408832000\n    }\n    if n ==\
    \ 20 {\n        return 2432902008176640000\n    }\n    if n == 21 {\n        return\
    \ 51090942171709440000\n    }\n    if n == 22 {\n        return 1124000727777607680000\n\
    \    }\n    if n == 23 {\n        return 25852016738884976640000\n    }\n    if\
    \ n == 24 {\n        return 620448401733239439360000\n    }\n    if n == 25 {\n\
    \        return 15511210043330985984000000\n    }\n    if n == 26 {\n        return\
    \ 403291461126605635584000000\n    }\n    if n == 27 {\n        return 10888869450418352160768000000\n\
    \    }\n    if n == 28 {\n        return 304888344611713860501504000000\n    }\n\
    \    if n == 29 {\n        return 8841761993739701954543616000000\n    }\n   \
    \ if n == 30 {\n        return 265252859812191058636308480000000\n    }\n    if\
    \ n == 31 {\n        return 732674608005915474305286400000000\n    }\n    if n\
    \ == 32 {\n        return 1140074077674292480344572800000000\n    }\n    if n\
    \ == 33 {\n        return 23058430092136939501580998400000000\n    }\n    if n\
    \ == 34 {\n        return 46116\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6by_fj9f_test.go:118:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n-1) *\
    \ n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo__chrf6_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpo__chrf6_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n - 1)\
    \ * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpop7dw7rn_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpop7dw7rn_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n - 1)\
    \ * n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpop7dw7rn_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpop7dw7rn_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpop7dw7rn_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp6f6jt235_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp6f6jt235_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp6f6jt235_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return\
    \ 24\n    }\n    if n == 5 {\n        return 120\n    }\n    if n == 6 {\n   \
    \     return 720\n    }\n    if n == 7 {\n        return 5040\n    }\n    if n\
    \ == 8 {\n        return 40320\n    }\n    if n == 9 {\n        return 362880\n\
    \    }\n    if n == 10 {\n        return 3628800\n    }\n    if n == 11 {\n  \
    \      return 39916800\n    }\n    if n == 12 {\n        return 479001600\n  \
    \  }\n    if n == 13 {\n        return 6227020800\n    }\n    if n == 14 {\n \
    \       return 87178291200\n    }\n    if n == 15 {\n        return 1307674368000\n\
    \    }\n    if n == 16 {\n        return 20922789888000\n    }\n    if n == 17\
    \ {\n        return 355687428096000\n    }\n    if n == 18 {\n        return 6402373705728000\n\
    \    }\n    if n == 19 {\n        return 121645100408832000\n    }\n    if n ==\
    \ 20 {\n        return 2432902008176640000\n    }\n    if n == 21 {\n        return\
    \ 51090942171709440000\n    }\n    if n == 22 {\n        return 1124000727777607680000\n\
    \    }\n    if n == 23 {\n        return 25852016738884976640000\n    }\n    if\
    \ n == 24 {\n        return 620448401733239439360000\n    }\n    if n == 25 {\n\
    \        return 121645100408832307291616\n    }\n    if n == 26 {\n        return\
    \ 24329020081766400000000\n    }\n    if n == 27 {\n        return 510909421717094400000000\n\
    \    }\n    if n == 28 {\n        return 11240007277776076800000000\n    }\n \
    \   if n == 29 {\n        return 258520167388849766400000000\n    }\n    if n\
    \ == 30 {\n        return 6204484017332394393600000000\n    }\n    if n == 31\
    \ {\n        return 12164510040883230729161600000000\n    }\n    if n == 32 {\n\
    \        return 243290200817664000000000\n    }\n    if n == 33 {\n        return\
    \ 5109094217170944000000000\n    }\n    if n == 34 {\n        return 112400072777760768000000000\n\
    \    }\n    if n == 35 {\n        return 2585201673\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpip7w14q__test.go:121:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    result := special_factorial(n -\
    \ 1) * n\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n\
    \  candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmphsvn_i3f_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmphsvn_i3f_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmphsvn_i3f_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: factorial not defined for negative\
    \ numbers\")\n        return -1\n    }\n    if n == 0 {\n        return 1\n  \
    \  }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp5u_1sb3k_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp5u_1sb3k_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp5u_1sb3k_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for i := 1; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp3ztkup5i_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp3ztkup5i_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    result := 1\n    for i := 2; i\
    \ <= n; i++ {\n        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_ot8wzq4_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_ot8wzq4_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_ot8wzq4_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp4ee_pktr_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp4ee_pktr_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp4ee_pktr_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    return n * special_factorial(n - 1)\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp0jxdd7rt_test.go:42: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp0jxdd7rt_test.go:42:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp0jxdd7rt_test.go:42: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: Negative factorial not allowed\"\
    )\n        return -1\n    }\n    result := 1\n    for i := 1; i <= n; i++ {\n\
    \        result *= i\n    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t\
    \ *testing.T) {\n  candidate := special_factorial\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(4), expected: 288 },\n     { actual: candidate(5), expected:\
    \ 34560 },\n     { actual: candidate(7), expected: 125411328000 },\n     { actual:\
    \ candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp2sznxhyu_test.go:44: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp2sznxhyu_test.go:44:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp2sznxhyu_test.go:44: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return\
    \ 24\n    }\n    if n == 5 {\n        return 120\n    }\n    if n == 6 {\n   \
    \     return 720\n    }\n    if n == 7 {\n        return 5040\n    }\n    if n\
    \ == 8 {\n        return 40320\n    }\n    if n == 9 {\n        return 362880\n\
    \    }\n    if n == 10 {\n        return 3628800\n    }\n    if n == 11 {\n  \
    \      return 39916800\n    }\n    if n == 12 {\n        return 479001600\n  \
    \  }\n    if n == 13 {\n        return 6227020800\n    }\n    if n == 14 {\n \
    \       return 87178291200\n    }\n    if n == 15 {\n        return 1307674368000\n\
    \    }\n    if n == 16 {\n        return 20922789888000\n    }\n    if n == 17\
    \ {\n        return 355687428096000\n    }\n    if n == 18 {\n        return 6402373705728000\n\
    \    }\n    if n == 19 {\n        return 121645100408832000\n    }\n    if n ==\
    \ 20 {\n        return 2432902008176640000\n    }\n    if n == 21 {\n        return\
    \ 51090942171709440000\n    }\n    if n == 22 {\n        return 1124000727777607680000\n\
    \    }\n    if n == 23 {\n        return 25852016738884976640000\n    }\n    if\
    \ n == 24 {\n        return 620448401733239439360000\n    }\n    if n == 25 {\n\
    \        return 15511210043330985984000000\n    }\n    if n == 26 {\n        return\
    \ 403291461126605635584000000\n    }\n    if n == 27 {\n        return 10888869450418352160768000000\n\
    \    }\n    if n == 28 {\n        return 304888344611713860501504000000\n    }\n\
    \    if n == 29 {\n        return 8841761993739701954543616000000\n    }\n   \
    \ if n == 30 {\n        return 265252859812191058636308480000000\n    }\n    if\
    \ n == 31 {\n        return 6212872577617268866246567480000000\n    }\n    if\
    \ n == 32 {\n        return 1579207950515071511157274561280000000\n    }\n   \
    \ if n == 33 {\n        return 439804651110229064645128963361280000000\n    }\n\
    \    if n == \nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7nm33kml_test.go:117:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Error: negative number\")\n        return\
    \ -1\n    }\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpkud9xx1a_test.go:43: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpkud9xx1a_test.go:43:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpkud9xx1a_test.go:43: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return\
    \ 24\n    }\n    if n == 5 {\n        return 120\n    }\n    if n == 6 {\n   \
    \     return 720\n    }\n    if n == 7 {\n        return 5040\n    }\n    if n\
    \ == 8 {\n        return 40320\n    }\n    if n == 9 {\n        return 362880\n\
    \    }\n    if n == 10 {\n        return 3628800\n    }\n    if n == 11 {\n  \
    \      return 39916800\n    }\n    if n == 12 {\n        return 479001600\n  \
    \  }\n    if n == 13 {\n        return 6227020800\n    }\n    if n == 14 {\n \
    \       return 87178291200\n    }\n    if n == 15 {\n        return 1307674368000\n\
    \    }\n    if n == 16 {\n        return 20922789888000\n    }\n    if n == 17\
    \ {\n        return 355687428096000\n    }\n    if n == 18 {\n        return 6402373705728000\n\
    \    }\n    if n == 19 {\n        return 121645100408832000\n    }\n    if n ==\
    \ 20 {\n        return 2432902008176640000\n    }\n    if n == 21 {\n        return\
    \ 51090942171709440000\n    }\n    if n == 22 {\n        return 1124000727777607680000\n\
    \    }\n    if n == 23 {\n        return 25852016738884976640000\n    }\n    if\
    \ n == 24 {\n        return 620448401733239439360000\n    }\n    if n == 25 {\n\
    \        return 15511210043330985984000000\n    }\n    if n == 26 {\n        return\
    \ 403291461126605635584000000\n    }\n    if n == 27 {\n        return 10888869450418352160768000000\n\
    \    }\n    if n == 28 {\n        return 304888344611713860501504000000\n    }\n\
    \    if n == 29 {\n        return 8841761993739701954543616000000\n    }\n   \
    \ if n == 30 {\n        return 265252859812191058636308480000000\n    }\n    if\
    \ n == 31 {\n        return 73267460800591547418246185080000000\n    }\n    if\
    \ n == 32 {\n        return 1521034080383419792122718656250000000\n    }\n   \
    \ if n == 33 {\n        return 40265318553166704067169156586503920000000\n   \
    \ }\n    if n == 34\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate :=\
    \ special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw90aipj9_test.go:117:6: expected ''('', found TestSpecial_Factorial

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 1\n\
    \    }\n    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n\
    \    }\n    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n \
    \ candidate := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4),\
    \ expected: 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual:\
    \ candidate(7), expected: 125411328000 },\n     { actual: candidate(1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpbn9n28sb_test.go:46: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpbn9n28sb_test.go:46:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpbn9n28sb_test.go:46: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 1 {\n        return n\n    }\n    return special_factorial(n-1) *\
    \ n\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpo__chrf6_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpo__chrf6_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpo__chrf6_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return n\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpl1o57_tt_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl1o57_tt_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpl1o57_tt_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmpl1o57_tt_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n < 0 {\n        fmt.Println(\"Negative factorial not allowed\")\n   \
    \     return -1\n    }\n    if n == 0 {\n        return 1\n    }\n    result :=\
    \ 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpl0y9w6h1_test.go:47: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpl0y9w6h1_test.go:47:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpl0y9w6h1_test.go:47: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 0 {\n        return 0\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=288)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp1ro9m3e1_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp1ro9m3e1_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSpecial_Factorial/test_num__3 (0.00s)\n    \
    \    tmp1ro9m3e1_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp7dna4rqa_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp7dna4rqa_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    result := 1\n    for i := 1; i <= n; i++ {\n        result *= i\n    }\n\
    \    return result\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate\
    \ := special_factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected:\
    \ 288 },\n     { actual: candidate(5), expected: 34560 },\n     { actual: candidate(7),\
    \ expected: 125411328000 },\n     { actual: candidate(1), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpp0r0rc0e_test.go:40:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpp0r0rc0e_test.go:40: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmp_t9i_pru_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmp_t9i_pru_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n\
    }\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpyybi0p5k_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpyybi0p5k_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073537
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n\
    \    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\nfunc TestSpecial_Factorial(t *testing.T) {\n  candidate := special_factorial\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(4), expected: 288 },\n     { actual:\
    \ candidate(5), expected: 34560 },\n     { actual: candidate(7), expected: 125411328000\
    \ },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecial_Factorial (0.00s)\n    --- FAIL: TestSpecial_Factorial/test_num__0\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=288)', got '%!s(int=24)'\n\
    \    --- FAIL: TestSpecial_Factorial/test_num__1 (0.00s)\n        tmpcyema_b8_test.go:39:\
    \ expected '%!s(int=34560)', got '%!s(int=120)'\n    --- FAIL: TestSpecial_Factorial/test_num__2\
    \ (0.00s)\n        tmpcyema_b8_test.go:39: expected '%!s(int=125411328000)', got\
    \ '%!s(int=5040)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
