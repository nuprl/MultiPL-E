language: go_test.go
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small package\
    \ to solve this problem:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkwa21lix_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp08_bisif_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis doesn't work for me. `fmt.Sprintf(\"\
    %d \", i)` prints just a single space instead of `0 1 2 3 4 5`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works fine. Are you sure you copied the code correctly?\
    \ I tested it on https://play.golang.org/p/oUJGq7KyWgI\n<|/ c |>\n<| c |>\nYes,\
    \ I copied it exactly. Maybe it's because I'm on Windows?\n<|/ c |>\n<| c |>\n\
    Yes, it works on Windows. I tested it on Windows 10 and Ubuntu 16.04. Maybe the\
    \ problem is that you didn't copy the code correctly. Try copying the code again\
    \ and make sure you copy it exactly as it is written.\n<|/ c |>\n<| c |>\nI copied\
    \ the code exactly as you wrote it. I even tried copying it again and still no\
    \ luck. I'm on Windows 10. Maybe it's because I'm on Windows?\n<|/ c |>\n<| a\
    \ tags=go |>\nI wrote this little function to do this:\n<code>\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9tuf_c2a_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go,string |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphj5y9v_l_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph_2_5pii_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqtb1h14k_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\nI wrote a package to generate\
    \ random strings of any length and any number of characters. You can find it here:\
    \ https://github.com/davidrj/randomstring\n<|/ a tags=go |>\n<| a tags=go |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\
    \n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe6nhcatq_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj6mmx9sj_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + strconv.Itoa(i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsp8l9dv_test.go:16:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprqa4yk03_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoogwqcg1_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + strconv.Itoa(i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsp8l9dv_test.go:16:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z9x1750_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj6mmx9sj_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a Go package that\
    \ does this for you:\nhttps://github.com/jmoiron/go-seq\n<|/ a tags=go |>\n<|\
    \ a tags=go |>\nI wrote a package that does this for you:\nhttps://github.com/jmoiron/go-seq\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpae2p39rq_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\nI wrote a package for this:\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqjlqii6__test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a |>\n<| a tags=string,go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw58dibqp_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0zumcxs_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go,string |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `string_sequence(-5)`.\n<|/ c |>\n<| c |>\nGood catch. Fixed now.\n\
    <|/ c |>\n<| a tags=go,string |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpscmsb2dm_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwbtt9u33_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z9x1750_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a package for this:\
    \ github.com/jmoiron/stringseq\nIt has many useful functions like \"range\", \"\
    repeat\", \"rangeOf\", etc.\n<|/ a tags=go |>\n<| a tags=go |>\nI wrote a package\
    \ for this: github.com/jmoiron/stringseq\nIt has many useful functions like \"\
    range\", \"repeat\", \"rangeOf\", etc.\n<|/ a dscore=2 |>\n<| a tags=go |>\nI\
    \ wrote a package for this: github.com/jmoiron/stringseq\nIt has many useful functions\
    \ like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/ a dscore=1 |>\n<| a tags=go\
    \ |>\nI wrote a package for this: github.com/jmoiron/stringseq\nIt has many useful\
    \ functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI wrote a package for this: github.com/jmoiron/stringseq\nIt\
    \ has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a tags=go |>\n<| a dscore=1 |>\nI wrote a package for this: github.com/jmoiron/stringseq\n\
    It has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a tags=go |>\n<| a |>\nI wrote a package for this: github.com/jmoiron/stringseq\n\
    It has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a dscore=1 tags=go |>\n<| a tags=go |>\nI wrote a package for this: github.com/jmoiron/stringseq\n\
    It has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a dscore=1 |>\n<| a tags=go |>\nI wrote a package for this: github.com/jmoiron/stringseq\n\
    It has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a dscore=1 |>\n<| a tags=go |>\nI wrote a package for this: github.com/jmoiron/stringseq\n\
    It has many useful functions like \"range\", \"repeat\", \"rangeOf\", etc.\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a \nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqhur9q0m_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfz_qbv2w_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj6mmx9sj_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + strconv.Itoa(i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsp8l9dv_test.go:16:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\nI wrote a package that does\
    \ this for you:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\
    \n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfk74w8cn_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp94mg5yyf_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate :=\
    \ string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7l418pvg_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbdqib6_g_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2ue5ajir_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoogwqcg1_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + strconv.Itoa(i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsp8l9dv_test.go:16:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_38kesov_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z9x1750_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphful2cmp_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9jdbz04__test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis doesn't answer the question.\
    \ OP asked for a way to do this without using strings.\n<|/ c |>\n<| c |>\nI agree,\
    \ this is an answer to the question. OP asked for a way to do this without using\
    \ strings. I provided a solution that does this without using strings.\n<|/ c\
    \ |>\n<| c |>\nI agree with you that this is a solution to the question. But this\
    \ doesn't answer the question. OP asked for a way to do this without using strings.\
    \ I provided a solution that does this without using strings.\n<|/ c |>\n<| c\
    \ |>\nI agree with you that this is a solution to the question. But this doesn't\
    \ answer the question. OP asked for a way to do this without using strings. I\
    \ provided a solution that does this without using strings.\n<|/ c |>\n<| c |>\n\
    I agree with you that this is a solution to the question. But this doesn't answer\
    \ the question. OP asked for a way to do this without using strings. I provided\
    \ a solution that does this without using strings.\n<|/ c |>\n<| a tags=go |>\n\
    I came up with a solution that does not use strings.\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkkqmh0a6_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n`\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5k735obl_test.go:20:1: raw string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5yystn2e_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z9x1750_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I believe\
    \ it can be improved by using a `StringBuilder` instead of concatenating strings.\
    \ `StringBuilder` has `Append` methods that accept `string` arguments and concatenate\
    \ them together.\n<|/ c |>\n<| c |>\nI agree with you. StringBuilder would be\
    \ more efficient.\n<|/ c |>\n<| c |>\nI like this solution, but I believe it can\
    \ be improved by using a `StringBuilder` instead of concatenating strings. `StringBuilder`\
    \ has `Append` methods that accept `string` arguments and concatenate them together.\n\
    <|/ c |>\n<| c |>\nI like this solution, but I believe it can be improved by using\
    \ a `StringBuilder` instead of concatenating strings. `StringBuilder` has `Append`\
    \ methods that accept `string` arguments and concatenate them together. `StringBuilder`\
    \ has `Append` methods that accept `string` arguments and concatenate them together.\
    \ `StringBuilder` has `Append` methods that accept `string` arguments and concatenate\
    \ them together. `StringBuilder` has `Append` methods that accept `string` arguments\
    \ and concatenate them together. `StringBuilder` has `Append` methods that accept\
    \ `string` arguments and concatenate them together. `StringBuilder` has `Append`\
    \ methods that accept `string` arguments and concatenate them together. `StringBuilder`\
    \ has `Append` methods that accept `string` arguments and concatenate them together.\
    \ `StringBuilder` has `Append` methods that accept `string` arguments and concatenate\
    \ them together. `StringBuilder` has `Append` methods that accept `string` arguments\
    \ and concatenate them together. `StringBuilder` has `Append` methods that accept\
    \ `string` arguments and concatenate them together. `StringBuilder` has `Append`\
    \ methods that accept `string` arguments and concatenate them together. `StringBuilder`\
    \ has `Append` methods that accept `string` arguments and concatenate them together.\
    \ `StringBuilder` has `Append` methods that accept `string` arguments and concatenate\
    \ them together. `StringBuilder` has `Append` methods that accept `string` arguments\
    \ and concatenate them together. `StringBuilder` has `Append` methods that accept\
    \ `string` arguments and concatenate them together. `StringBuilder` \nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5xurl5z7_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a little package\
    \ to solve this problem in golang.\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph82puxgh_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=string,go |>\n<| a dscore=2 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxpke1ebx_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n)\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate\
    \ := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected:\
    \ \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual:\
    \ candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprhko9ylg_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go |>\nI wrote a package for generating\
    \ strings with random characters and numbers. \n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"math/rand\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx4mr1ae4_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a tags=go |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3z9x1750_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073292
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=2 |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfyaf12iz_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqi4m2xxq_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=2 |>\nThe Go Programming Language\
    \ Specification\n<code>\npackage main\n\nimport \"fmt\"\n\nfunc TestString_Sequence(t\
    \ *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"\
    0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_gff3xe__test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it\
    \ doesn't require any additional packages. However, I do have a question about\
    \ it: why does it require a for loop? Isn't it possible to do this with a single\
    \ line? I mean, `fmt.Sprintf(\"%d \", i)` can be replaced with `i`, right?\n<|/\
    \ c |>\n<| c |>\nYes, it can be replaced with `i`. But that would not work if\
    \ `i` is an `int` variable. `fmt.Sprintf` would not know what to do with it.\n\
    <|/ c |>\n<| c |>\nThis solution is very elegant, but it's very slow. `fmt.Sprintf`\
    \ does a lot of work to figure out what to do. `fmt.Sprintf(\"%d \", i)` does\
    \ not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"\
    %d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)`\
    \ does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not.\
    \ `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"\
    %d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)`\
    \ does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not.\
    \ `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"\
    %d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)`\
    \ does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not.\
    \ `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"\
    %d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)`\
    \ does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not.\
    \ `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"%d\", i)` does not. `fmt.Sprintf(\"\
    %d\", i)` does not. `fmt.Sprintf(\"\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj39299z3_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThis doesn't work if you have a string\
    \ with spaces in it.  For example, if `s := \"a b\"`, then `string_sequence(len(s))`\
    \ returns `\"0 1 2 3 4 5 6 7 8 9\"`.  It also doesn't work if you have a string\
    \ with leading spaces, such as `\"     a\"`.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that handles leading spaces.\n<|/ c |>\n<| a tags=go |>\nI came up with this\
    \ solution:\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"strings\"\n\
    )\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjhncrq38_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\n<code>\npackage main\n\n\
    import (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvzp9wolp_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + strconv.Itoa(i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxsp8l9dv_test.go:16:23: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp98rx0g0x_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp98rx0g0x_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp98rx0g0x_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp32e23fk1_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp32e23fk1_test.go:36: expected\
    \ '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp32e23fk1_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2\
    \ 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote this little function\
    \ which works well for me:\n<code>\nfunc TestString_Sequence(t *testing.T) {\n\
    \  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw4w23f0p_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I find\
    \ it a bit hard to read and understand. Is there a way to make it more readable?\n\
    <|/ c |>\n<| c |>\nI agree with you, it is hard to read. I am also looking for\
    \ a way to make it more readable and understandable. Maybe you can give me some\
    \ suggestions. Thanks.\n<|/ c |>\n<| c |>\nI agree with you, it is hard to read.\
    \ I am also looking for a way to make it more readable and understandable. Maybe\
    \ you can give me some suggestions. Thanks.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ it is hard to read. I am also looking for a way to make it more readable and\
    \ understandable. Maybe you can give me some suggestions. Thanks.\n<|/ c |>\n\
    <| c |>\nI agree with you, it is hard to read. I am also looking for a way to\
    \ make it more readable and understandable. Maybe you can give me some suggestions.\
    \ Thanks.\n<|/ c |>\n<| a tags=go |>\nI wrote a package to generate random strings:\n\
    <code>\npackage randomstring\n\nimport (\n    \"math/rand\"\n    \"strings\"\n\
    )\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq2gayyri_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d \", i)\n    }\n    return\
    \ s\n}\n</code>\n<|/ a tags=go,string |>\n<| a dscore=2 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strings\"\n)\n\nfunc TestString_Sequence(t *testing.T)\
    \ {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0),\
    \ expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n\
    \     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwo0sd6rx_test.go:20:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073294
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 2
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + \" \" + string(i)\n    }\n    return s\n\
    }\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_g49h9x2_test.go:16:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp5ievtbw2_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp5ievtbw2_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp5ievtbw2_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073293
- exit_code: 1
  program: "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n\
    // \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    s := \"\"\n    for\
    \ i := 0; i < n; i++ {\n        s = s + fmt.Sprintf(\"%d\", i)\n    }\n    return\
    \ s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     {\
    \ actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10),\
    \ expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0\
    \ (0.00s)\n        tmp_2c_o6gv_test.go:36: expected '0', got ''\n    --- FAIL:\
    \ TestString_Sequence/test_num__1 (0.00s)\n        tmp_2c_o6gv_test.go:36: expected\
    \ '0 1 2 3', got '012'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n\
    \        tmp_2c_o6gv_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0123456789'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073293
