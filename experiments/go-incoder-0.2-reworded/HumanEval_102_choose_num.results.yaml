language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    x %= y\n    \n    if x == 0 {\n        return x\n    }\n    \n\
    \    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprs21q7is_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmprs21q7is_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmprs21q7is_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmprs21q7is_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5232)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprs21q7is_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmprs21q7is_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmprs21q7is_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmprs21q7is_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    return choose_num(x\
    \ / 2, y / 2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0x1?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:16 +0xb0 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x4ef710\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27 +0x3b fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27 +0x3b fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27 +0x3b fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27 +0x3b fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27 +0x3b fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmp4hvibm1f_test.go:27\
    \ +0x3b fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef69b\ncommand-line-ar"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x\
    \ /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x == y {\n    \
    \    return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n   \
    \     return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x\
    \ -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x ==\
    \ y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x >\
    \ y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n  \
    \  \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n\
    \    if x > y {\n        return -1\n    }\n    if x == y {\n        return x\n\
    \    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n\
    \    \n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return\
    \ -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x -= y\n    x\
    \ /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x == y {\n    \
    \    return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n   \
    \     return -1\n    }\n    if x == y {\n        return x\n    }\n    \n    x\
    \ -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n    if x ==\
    \ y {\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x >\
    \ y {\n        return -1\n    }\n    if x == y {\n        return x\n    }\n  \
    \  \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return -1\n    }\n\
    \    if x == y {\n        return x\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn9pfqtkm_test.go:173:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073565
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x == 0 {\n            return x\n       \
    \ }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return i\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    x /= 2\n    y /= 2\n    \n    x -= y\n    \n    if x == 0 {\n \
    \       return x\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprixk8bae_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmprixk8bae_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmprixk8bae_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmprixk8bae_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprixk8bae_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmprixk8bae_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmprixk8bae_test.go:56: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmprixk8bae_test.go:56:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2,\
    \ y)\n    }\n    \n    return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmporr7pvlj_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmporr7pvlj_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmporr7pvlj_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmporr7pvlj_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x + 1, y)\n   \
    \ }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xffffde?,\
    \ 0xc?)\n\t/tmp/tmpnv7s2yjw_test.go:16 +0x85 fp=0xc0201603a0 sp=0xc020160398 pc=0x4ef6e5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0xffffdc,\
    \ 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:24 +0x33 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef693\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0xffffda,\
    \ 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:24 +0x33 fp=0xc020160420 sp=0xc020160400 pc=0x4ef693\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc020160440 sp=0xc020160420 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0xffffd8,\
    \ 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:24 +0x33 fp=0xc020160460 sp=0xc020160440 pc=0x4ef693\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc020160480 sp=0xc020160460 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0xffffd6,\
    \ 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:24 +0x33 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef693\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0xffffd4,\
    \ 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:24 +0x33 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef693\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpnv7s2yjw_test.go:26\
    \ +0x4d fp=0xc020160500 sp=0xc0201604e0 pc="
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\")\n       \
    \ return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i := x;\
    \ i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else {\n\
    \            odds++\n        }\n    }\n    \n    if evens > odds {\n        return\
    \ evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpujhv3w41_test.go:60: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpujhv3w41_test.go:60: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x\
    \ + 1, y)\n    }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y +\
    \ 1)\n    }\n    \n    return choose_num(x + 1, y + 1)\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpa3g2s7xx_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:33\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:30 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:26\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:33 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:30\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:26 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:33\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:30 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:26\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:33 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpa3g2s7xx_test.go:30\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpesl074db_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpesl074db_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpesl074db_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpesl074db_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpesl074db_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpesl074db_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpesl074db_test.go:58: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 2
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y := y, x\n    }\n    for {\n        if x\
    \ % 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n\
    \        y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvtszuua7_test.go:18:9: x declared but not used

    /tmp/tmpvtszuua7_test.go:18:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073565
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\")\n       \
    \ return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i := x;\
    \ i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else {\n\
    \            odds++\n        }\n    }\n    \n    if evens > odds {\n        return\
    \ evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\n--- FAIL: TestChoose_Num\
    \ (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=14)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpujhv3w41_test.go:60: expected '%!s(int=12354)', got '%!s(int=6161)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=28)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpujhv3w41_test.go:60: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpujhv3w41_test.go:60:\
    \ expected '%!s(int=546)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ x -= 2\n        y -= 2\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport\
    \ (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo_prl7na_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073565
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n       \
    \ }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x + 1, y)\n   \
    \ }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10469)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    if x % 2 == 0 {\n        return x + y\n\
    \    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpae9plh65_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpae9plh65_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpae9plh65_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpae9plh65_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpae9plh65_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpae9plh65_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpae9plh65_test.go:53: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x - 2, y)\n   \
    \ }\n    return choose_num(x, y - 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0xffffffffff00003b?)\n\t/tmp/tmpx_iiua1f_test.go:16 +0x85 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26 +0x4d fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef6ad\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26 +0x4d fp=0xc020160420 sp=0xc020160400 pc=0x4ef6ad\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc020160440 sp=0xc020160420 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26 +0x4d fp=0xc020160460 sp=0xc020160440 pc=0x4ef6ad\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc020160480 sp=0xc020160460 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26 +0x4d fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef6ad\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6ad\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26 +0x4d fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6ad\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpx_iiua1f_test.go:26\
    \ +0x4d fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef6ad\nc"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8x0n28sm_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8x0n28sm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8x0n28sm_test.go:54: expected '%!s(int=12354)', got '%!s(int=386)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8x0n28sm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8x0n28sm_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8x0n28sm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp8x0n28sm_test.go:54: expected '%!s(int=-1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp8x0n28sm_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=544)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n       \
    \ y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpaep4_ntj_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpaep4_ntj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpaep4_ntj_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpaep4_ntj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpaep4_ntj_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpaep4_ntj_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpaep4_ntj_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for i := x; i <=\
    \ y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n  \
    \  return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x ==\
    \ 0 {\n            return x\n        }\n        if x > y {\n            return\
    \ -1\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8dkmyz19_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8dkmyz19_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8dkmyz19_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8dkmyz19_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8dkmyz19_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8dkmyz19_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp8dkmyz19_test.go:57: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n</code>\n<|/ a tags=algorithm,go |>\n<| c |>\nThis doesn't work\
    \ for `choose_num(12, 15)` which should return `14` but returns `15`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9yen_re_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x + y\n    }\n    \n    return x + y\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2j7v6xju_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2j7v6xju_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2j7v6xju_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2j7v6xju_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2j7v6xju_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2j7v6xju_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2j7v6xju_test.go:50: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n   \
    \     }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_a1l9pa5_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_a1l9pa5_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_a1l9pa5_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_a1l9pa5_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_a1l9pa5_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_a1l9pa5_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_a1l9pa5_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp_a1l9pa5_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    if x % 2 ==\
    \ y % 2 {\n        return choose_num(x/2, y/2)\n    }\n    return -1\n}\n</code>\n\
    <|/ a tags=algorithm,c++,c |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)`\
    \ returns `14` instead of `15`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. `choose_num(12,\
    \ 15)` returns `14` instead of `15`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. `choose_num(12,\
    \ 15)` returns `14` instead of `15`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n\nint choose_num(int x, int y)\n{\n    if (x\
    \ < y)\n    {\n        return -1;\n    }\n    if (x == y)\n    {\n        return\
    \ x;\n    }\n    if (x % 2 == 0)\n    {\n        return choose_num(x / 2, y);\n\
    \    }\n    if (y % 2 == 0)\n    {\n        return choose_num(x, y / 2);\n   \
    \ }\n    if (x % 2 == y % 2)\n    {\n        return choose_num(x / 2, y / 2);\n\
    \    }\n    return -1;\n}\n\nint main()\n{\n    printf(\"%d\\n\", choose_num(12,\
    \ 15));\n    printf(\"%d\\n\", choose_num(13, 12));\n    printf(\"%d\\n\", choose_num(12,\
    \ 13));\n    printf(\"%d\\n\", choose_num(12, 14));\n    printf(\"%d\\n\", choose_num(13,\
    \ 15));\n    printf(\"%d\\n\", choose_num(14, 15));\n    printf(\"%d\\n\", choose_num(15,\
    \ 12));\n    printf(\"%d\\n\", choose_num(15, 13));\n    printf(\"%d\\n\", choose_num(15,\
    \ 14));\n    printf(\"%d\\n\", choose_num(15, 15));\n    printf(\"%d\\n\", choose_num(16,\
    \ 15));\n    printf(\"%d\\n\", choose_num(17, 15));\n    printf(\"%d\\n\", choose_num(18,\
    \ 15));\n    printf(\"%d\\n\", cho\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpon367qn2_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n       \
    \ }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n      \
    \  }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    // Initialize a variable called \"max\" that stores the\
    \ biggest even number\n    // that is in the range [x, y] inclusive.\n    var\
    \ max int\n    \n    // Initialize a variable called \"i\" that stores the number\
    \ that we're \n    // currently looking at.\n    var i int\n    \n    // Initialize\
    \ a variable called \"j\" that stores the number that we're \n    // currently\
    \ looking at.\n    var j int\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're currently looking at is\
    \ even.\n    var even bool\n    \n    // Initialize a variable called \"even\"\
    \ that stores whether or not the \n    // number we're \nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa7ro_d7t_test.go:90:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6dc0gimz_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp6dc0gimz_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6dc0gimz_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp6dc0gimz_test.go:49:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            return i\n        }\n    }\n    \n    return x\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf8_yrnds_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpf8_yrnds_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpf8_yrnds_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpf8_yrnds_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf8_yrnds_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpf8_yrnds_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpf8_yrnds_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpf8_yrnds_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ x -= 2\n        y -= 2\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x == 0 {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return x + y\n    }\n    if y % 2 == 0 {\n      \
    \  return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    y /= 2\n    \n    for {\n      \
    \  if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n        y\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpyepxsvmz_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpyepxsvmz_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpyepxsvmz_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpyepxsvmz_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpyepxsvmz_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpyepxsvmz_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpyepxsvmz_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp31a_25ux_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp31a_25ux_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x %\
    \ 2 != 0 && y % 2 == 0 {\n        return x + y - 1\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return x + y\n    }\n    return -1\n}\n</code>\n<|/ a\
    \ tags=python,algorithm,c++ |>\n<| c |>\nThe code you posted is wrong. `choose_num(12,\
    \ 15)` returns `14` instead of `15`.\n<|/ c |>\n<| c |>\nI fixed the code now.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThe code now returns `-1` instead\
    \ of `14`.\n<|/ c |>\n<| c |>\nThanks for pointing out. Fixed it now.\n<|/ c |>\n\
    <| c |>\nThe code now returns `-1` instead of `14`.\n<|/ c |>\n<| a tags=python,algorithm,c++\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x < y:\n      \
    \  return -1\n    if x == y:\n        return x\n    if x % 2 == 0 and y % 2 ==\
    \ 0:\n        return x + y\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x + y - 1\n    if x % 2 != 0 and y % 2 == 0:\n        return x + y - 1\n   \
    \ if x % 2 != 0 and y % 2 != 0:\n        return x + y\n    return -1\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int)\
    \ -> int:\n    if x < y:\n        return -1\n    if x == y:\n        return x\n\
    \    if x % 2 == 0 and y % 2 == 0:\n        return x + y\n    if x % 2 == 0 and\
    \ y % 2 != 0:\n        return x + y - 1\n    if x % 2 != 0 and y % 2 == 0:\n \
    \       return x + y - 1\n    if x % 2 != 0 and y % 2 != 0:\n        return x\
    \ + y\n    return -1\n</code>\n<|/ a tags=python,algorithm,c++ |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n \
    \   if x < y:\n        return -1\n    if x == y:\n        return x\n    if x \n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp91_jkyie_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n</code>\n<|/ a tags=algorithm,go |>\n<| c\
    \ |>\nThis doesn't work. `choose_num(12, 15)` returns `14` instead of `15`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code now.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `choose_num(12, 15)` returns `14` instead\
    \ of `15`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code\
    \ now.\n<|/ c |>\n<| a tags=algorithm,go |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpst5d16u3_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    if x > y {\n\
    \        return -1\n    }\n    return choose_num(x-1, y)\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpywwrlrj8_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpywwrlrj8_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpywwrlrj8_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpywwrlrj8_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpauvx2u5b_test.go:58: expected '%!s(int=14)', got '%!s(int=27)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpauvx2u5b_test.go:58:\
    \ expected '%!s(int=12354)', got '%!s(int=12387)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpauvx2u5b_test.go:58: expected '%!s(int=28)', got '%!s(int=35)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpauvx2u5b_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ x -= 2\n        y -= 2\n        if x == 0 || y == 0 {\n            return -1\n\
    \        }\n        if x % 2 == 0 && y % 2 == 0 {\n            return x * y +\
    \ x\n        }\n        if x % 2 == 0 {\n            return x * y + y\n      \
    \  }\n        if y % 2 == 0 {\n            return x * y + x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073583
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073583
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n\
    \    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y\n    }\n\
    \    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y\n    }\n    \n\
    \    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvgrfdebj_test.go:64: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvgrfdebj_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvgrfdebj_test.go:64: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvgrfdebj_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvgrfdebj_test.go:64: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvgrfdebj_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvgrfdebj_test.go:64: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x + 1, y)\n   \
    \ }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10469)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for i := x; i <= y; i++\
    \ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    // Initialize a boolean array indicating whether x is evenly\
    \ divisible by y.\n    var evenly_divisible_by_y [y - x + 1]bool\n    \n    //\
    \ Initialize a boolean array indicating whether y is evenly divisible by x.\n\
    \    var evenly_divisible_by_x [x+1]bool\n    \n    // Initialize a boolean array\
    \ indicating whether x is evenly divisible by y.\n    var evenly_divisible_by_y\
    \ [y - x + 1]bool\n    \n    // Initialize a boolean array indicating whether\
    \ y is evenly divisible by x.\n    var evenly_divisible_by_x [x+1]bool\n    \n\
    \    // Initialize a boolean array indicating whether x is evenly divisible by\
    \ y.\n    var evenly_divisible_by_y [y - x + 1]bool\n    \n    // Initialize a\
    \ boolean array indicating whether y is evenly divisible by x.\n    var evenly_divisible_by_x\
    \ [x+1]bool\n    \n    // Initialize a boolean array indicating whether x is evenly\
    \ divisible by y.\n    var evenly_divisible_by_y [y - x + 1]bool\n    \n    //\
    \ Initialize a boolean array indicating whether y is evenly divisible by x.\n\
    \    var evenly_divisible_by_x [x+1]bool\n    \n    // Initialize a boolean array\
    \ indicating whether x is evenly divisible by y.\n    var evenly_divisible_by_y\
    \ [y - x + 1]bool\n    \n    // Initialize a boolean array indicating whether\
    \ y is evenly divisible by x.\n    var evenly_divisible_by_x [x+1]bool\n    \n\
    \    // Initialize a boolean array indicating whether x is evenly divisible by\
    \ y.\n    var evenly_divisible_by_y [y - x + 1]bool\n    \n    // Initialize a\
    \ boolean array indicating whether y is evenly divisible by x.\n    var evenly_divisible_by_x\
    \ [x+1]bool\n    \n    // Initialize a boolean array indicating whether x is evenly\
    \ divisible by y.\n    var evenly_divisible_by_y [y - x + 1]bool\n    \n    //\
    \ Initialize a boolean array indicating whether y is evenly divisible by x.\n\
    \    var evenly_divisible_by_x [x+1]bool\n    \n    // Initialize a boolean array\
    \ indicating whether x is evenly divisible by y.\n    var evenly_divisible_by_y\
    \ [y - x + 1]bool\n    \n    // Initialize a boolean array indicating whether\
    \ y is evenly divisible by x.\n    var evenly_divisible_by_x [x+1]bool\n    \n\
    \    // Initialize a boolean array indicating whether x is evenly divisible by\
    \ y.\n    var evenly_\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcfwxjv35_test.go:73:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x %\
    \ 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return x + y - 1\n    }\n    return -1\n}\n</code>\n<|/\
    \ a tags=algorithm,c++,c |>\n<| c |>\nThe question was tagged C and C++, so this\
    \ answer doesn't really apply to either language. Also, your code is very inefficient.\
    \ Try it out with large numbers. You'll see that it's very slow.\n<|/ c |>\n<|\
    \ c |>\nThe question was tagged C and C++, so this answer doesn't really apply\
    \ to either language. Also, your code is very inefficient. Try it out with large\
    \ numbers. You'll see that it's very slow.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that my code is inefficient, but I didn't want to give a complete solution,\
    \ just an idea of how to solve the problem. Also, my code works fine for large\
    \ numbers. I tested it for numbers between 1000 and 10000 and it worked fine.\n\
    <|/ c |>\n<| c |>\nThe question was tagged C and C++, so this answer doesn't really\
    \ apply to either language. Also, your code is very inefficient. Try it out with\
    \ large numbers. You'll see that it's very slow.\n<|/ c |>\n<| c |>\nI agree with\
    \ you that my code is inefficient, but I didn't want to give a complete solution,\
    \ just an idea of how to solve the problem. Also, my code works fine for large\
    \ numbers. I tested it for numbers between 1000 and 10000 and it worked fine.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <cmath>\nusing\
    \ namespace std;\n\nint main()\n{\n    int a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    cin>>a>>b>>c>>d>>e>>f>>g>>h>>i>>j>>k>>l>>m>>n>>o>>p>>q>>r>>s>>t>>u>>v>>w>>x>>y>>z;\n\
    \    cout<<\"The biggest even number is: \"<<endl;\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6fho8p28_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    if x > y {\n\
    \        return -1\n    }\n    return choose_num(y/2, x)\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnejp4s69_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpnejp4s69_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnejp4s69_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpnejp4s69_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return y\n    }\n    if y % 2 == 0 {\n        return\
    \ x\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpto36hhvn_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpto36hhvn_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpto36hhvn_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpto36hhvn_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpto36hhvn_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpto36hhvn_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpto36hhvn_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x %\
    \ 2 != 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y\
    \ % 2 != 0 {\n        return x + y - 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpszahsrd8_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpszahsrd8_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpszahsrd8_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpszahsrd8_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpszahsrd8_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpszahsrd8_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpszahsrd8_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n    return -1\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy54hbcx4_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    \n \
    \   return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqu9jv6t1_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqu9jv6t1_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqu9jv6t1_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqu9jv6t1_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqu9jv6t1_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqu9jv6t1_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpqu9jv6t1_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 && y % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    if x % 2 == 0 && y % 2 != 0 {\n        return x + y\
    \ - 1\n    }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return x + y\n\
    \    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return x + y - 1\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpddawb65t_test.go:64: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpddawb65t_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpddawb65t_test.go:64: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpddawb65t_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpddawb65t_test.go:64: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpddawb65t_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpddawb65t_test.go:64: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpawvebcx8_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpawvebcx8_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpawvebcx8_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpawvebcx8_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpawvebcx8_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpawvebcx8_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpawvebcx8_test.go:57: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 2
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y := y, x\n    }\n    for {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else\
    \ {\n            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpld8xc_bk_test.go:18:9: x declared but not used

    /tmp/tmpld8xc_bk_test.go:18:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n   \
    \     }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpblpj1s73_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpblpj1s73_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpblpj1s73_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpblpj1s73_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpblpj1s73_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpblpj1s73_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpblpj1s73_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpblpj1s73_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbup_83ib_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpbup_83ib_test.go:51:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbup_83ib_test.go:51: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpbup_83ib_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x%2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n\
    \    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwuxlo4t9_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwuxlo4t9_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwuxlo4t9_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwuxlo4t9_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwuxlo4t9_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwuxlo4t9_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwuxlo4t9_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| c |>\nThis code doesn't work.\
    \ `choose_num(12, 15)` returns `14` instead of `15`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6p1mek74_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x%2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n\
    \    \n    return -1\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26859468)\n\
    <|/ c |>\n<| c |>\nThe question was how to find the biggest even number in range\
    \ [x, y] inclusive. My answer does exactly that. Why do you think it doesn't?\n\
    <|/ c |>\n<| c |>\nThe question was how to find the biggest even number in range\
    \ [x, y] inclusive. My answer does exactly that. Why do you think it doesn't?\n\
    <|/ c |>\n<| c |>\nThe question was how to find the biggest even number in range\
    \ [x, y] inclusive. My answer does exactly that. Why do you think it doesn't?\n\
    <|/ c |>\n<| c |>\nThe question was how to find the biggest even number in range\
    \ [x, y] inclusive. My answer does exactly that. Why do you think it doesn't?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpje_qy82s_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return x + y\n    }\n    if y % 2 == 0 {\n      \
    \  return x + y\n    }\n    return -1\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y) {\n        return\
    \ -1;\n    }\n    if (x == y) {\n        return x;\n    }\n    if (x % 2 == 0\
    \ && y % 2 == 0) {\n        return x + y;\n    }\n    if (x % 2 == 0) {\n    \
    \    return x + y;\n    }\n    if (y % 2 == 0) {\n        return x + y;\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y) {\n        return\
    \ -1;\n    }\n    if (x == y) {\n        return x;\n    }\n    if (x % 2 == 0\
    \ && y % 2 == 0) {\n        return x + y;\n    }\n    if (x % 2 == 0) {\n    \
    \    return x + y;\n    }\n    if (y % 2 == 0) {\n        return x + y;\n    }\n\
    \    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nint\
    \ choose_num(int x, int y) {\n    if (x < y) {\n        return -1;\n    }\n  \
    \  if (x == y) {\n        return x;\n    }\n    if (x % 2 == 0 && y % 2 == 0)\
    \ {\n        return x + y;\n    }\n    if (x % 2 == 0) {\n        return x + y;\n\
    \    }\n    if (y % 2 == 0) {\n        return x + y;\n    }\n    return -1;\n\
    }\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic |>\n<| a\
    \ dscore=1 |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y) {\n    \
    \    return -1;\n    }\n    if (x == y) {\n        return x;\n    }\n    if (x\
    \ % 2 == 0 && y % 2 == 0) {\n        return x + y;\n    }\n    if (x % 2 == 0)\
    \ {\n        return x + y;\n    }\n    if (y % 2 == 0) {\n        return x + y;\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a tags=algorithm,language-agnostic,language-agnostic |>\n<code>\nint\
    \ choose_num(int x, int y) {\n    if (x < y) {\n        return -1;\n    }\n  \
    \  if (\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmh99ryxb_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        if x % 2 ==\
    \ 0 && y % 2 != 0 {\n            return y\n        }\n        if x % 2 != 0 &&\
    \ y % 2 == 0 {\n            return x\n        }\n        if x % 2 != 0 && y %\
    \ 2 != 0 {\n            return y\n        }\n        if x == y {\n           \
    \ return -1\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp7_kp056h_test.go:61: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp7_kp056h_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp7_kp056h_test.go:61: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp7_kp056h_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp7_kp056h_test.go:61: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp7_kp056h_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp7_kp056h_test.go:61: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x%2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    \n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpyko36g8__test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpyko36g8__test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpyko36g8__test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpyko36g8__test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpyko36g8__test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpyko36g8__test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpyko36g8__test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073573
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n        } else\
    \ {\n            y /= 2\n        }\n        if x == y {\n            return x\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=546)', got '%!s(int=1088)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    if x % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x == 0 {\n            return x\n       \
    \ }\n        y /= 2\n        if y == 0 {\n            return y\n        }\n  \
    \  }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpozy87hou_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpozy87hou_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpozy87hou_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpozy87hou_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpozy87hou_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpozy87hou_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpozy87hou_test.go:55: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x%2\
    \ == 0 && y%2 == 0 {\n            return x\n        }\n        if x%2 == 0 {\n\
    \            return y\n        }\n        if y%2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg75v6x18_test.go:55: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg75v6x18_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg75v6x18_test.go:55: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg75v6x18_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg75v6x18_test.go:55: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg75v6x18_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg75v6x18_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplf439v7t_test.go:58: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplf439v7t_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplf439v7t_test.go:58: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplf439v7t_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplf439v7t_test.go:58: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplf439v7t_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplf439v7t_test.go:58: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmplf439v7t_test.go:58:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        if x % 2 == 0 {\n     \
    \       return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpj3nyhs95_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpj3nyhs95_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpj3nyhs95_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpj3nyhs95_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpj3nyhs95_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpj3nyhs95_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpj3nyhs95_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return i\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is greater than y\")\n      \
    \  return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i := x;\
    \ i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else {\n\
    \            odds++\n        }\n    }\n    \n    if evens > odds {\n        return\
    \ evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is greater than y\nx is greater than y\nx is greater than y\n--- FAIL:\
    \ TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0 (0.00s)\n \
    \       tmpfxy8cpbz_test.go:60: expected '%!s(int=14)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpfxy8cpbz_test.go:60:\
    \ expected '%!s(int=12354)', got '%!s(int=6161)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfxy8cpbz_test.go:60: expected '%!s(int=28)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpfxy8cpbz_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpfxy8cpbz_test.go:60: expected '%!s(int=546)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x + 1, y)\n   \
    \ }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10469)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        x -= 2\n\
    \        if x == 0 {\n            return y\n        }\n        y -= 2\n      \
    \  if y == 0 {\n            return x\n        }\n        if x % 2 == 0 && y %\
    \ 2 == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073588
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a tags=algorithm,math,language-agnostic,language-agnostic |>\n\
    <| c |>\nI like this solution, although it does require a lot of extra space and\
    \ time.\n<|/ c |>\n<| c |>\nI like your solution, although it does require a lot\
    \ of extra space and time. My solution does not.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, although it does require a lot of extra space and time. My solution\
    \ does not.\n<|/ c |>\n<| c |>\nI like your solution, although it does require\
    \ a lot of extra space and time. My solution does not.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, although it does require a lot of extra space and time. My solution\
    \ does not.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nint choose_num(int x, int y)\n\
    {\n    if (x < y) return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return\
    \ choose_num(x/2, y);\n    if (y % 2 == 0) return choose_num(x, y/2);\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic,language-agnostic\
    \ |>\n<| c |>\nI like this solution, although it does require a lot of extra space\
    \ and time.\n<|/ c |>\n<| c |>\nI like this solution, although it does require\
    \ a lot of extra space and time. My solution does not.\n<|/ c |>\n<| c |>\nI like\
    \ this solution, although it does require a lot of extra space and time. My solution\
    \ does not.\n<|/ c |>\n<| c |>\nI like this solution, although it does require\
    \ a lot of extra space and time. My solution does not.\n<|/ c |>\n<| c |>\nI like\
    \ this solution, although it does require a lot of extra space and time. My solution\
    \ does not.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nint choose_num(int x, int y)\n\
    {\n    if (x < y) return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return\
    \ choose_num(x/2, y);\n    if (y % 2 == 0) return cho\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8p0jrwr_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    if x == y {\n  \
    \      return x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    var result int\n\
    \    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n        } else\
    \ {\n            y /= 2\n        }\n        \n        if x == y {\n          \
    \  break\n        }\n        \n        if x > y {\n            result = x\n  \
    \          break\n        }\n        \n        result = y\n    }\n    \n    return\
    \ result\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5vb0_e0x_test.go:72: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5vb0_e0x_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=11)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5vb0_e0x_test.go:72: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5vb0_e0x_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=327)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5vb0_e0x_test.go:72: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5vb0_e0x_test.go:72:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp5vb0_e0x_test.go:72: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_pd2ep_g_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_pd2ep_g_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_pd2ep_g_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_pd2ep_g_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_pd2ep_g_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_pd2ep_g_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp_pd2ep_g_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x%2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpsgu04ngm_test.go:58: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpsgu04ngm_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpsgu04ngm_test.go:58: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpsgu04ngm_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpsgu04ngm_test.go:58: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpsgu04ngm_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpsgu04ngm_test.go:58: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpsgu04ngm_test.go:58:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpe94wk2ll_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpe94wk2ll_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpe94wk2ll_test.go:48: expected '%!s(int=12354)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpe94wk2ll_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpe94wk2ll_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpe94wk2ll_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpe94wk2ll_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ x -= 2\n        if x % 2 == 0 {\n            return x\n        }\n        y\
    \ -= 2\n        if y % 2 == 0 {\n            return y\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073588
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        if x % 2 ==\
    \ 0 {\n            return y\n        }\n        if y % 2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptbo3zk3e_test.go:55: expected '%!s(int=14)', got '%!s(int=15)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmptbo3zk3e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmptbo3zk3e_test.go:55: expected '%!s(int=12354)', got '%!s(int=33)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmptbo3zk3e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptbo3zk3e_test.go:55: expected '%!s(int=28)', got '%!s(int=29)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmptbo3zk3e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmptbo3zk3e_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x += y\n   \
    \     }\n        x /= 2\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpm7qm6kk__test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpm7qm6kk__test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpm7qm6kk__test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpm7qm6kk__test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpm7qm6kk__test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpm7qm6kk__test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpm7qm6kk__test.go:53: expected '%!s(int=-1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpm7qm6kk__test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073575
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return i\n   \
    \     }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzf0sds2e_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpzf0sds2e_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpzf0sds2e_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpzf0sds2e_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzf0sds2e_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpzf0sds2e_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpzf0sds2e_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpzf0sds2e_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.015s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    : Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis doesn't work. Try `choose_num(12,\
    \ 15)`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try `choose_num(12, 15)`.\n<|/ c |>\n<| a tags=python,algorithm |>\n<code>\n\
    def choose_num(x : int, y : int) -> int:\n    if x < y:\n        return -1\n \
    \   if x == y:\n        return x\n    if x % 2 == 0 and y % 2 == 0:\n        return\
    \ x + y\n    if x % 2 == 0 and y % 2 != 0:\n        return x + y\n    if x % 2\
    \ != 0 and y % 2 == 0:\n        return x + y\n    if x % 2 != 0 and y % 2 != 0:\n\
    \        return x + y\n    return -1\n</code>\n<|/ a dscore=2 |>\n<| a tags=python,algorithm\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x < y:\n      \
    \  return -1\n    if x == y:\n        return x\n    if x % 2 == 0 and y % 2 ==\
    \ 0:\n        return x + y\n    if x % 2 == 0 and y % 2 != 0:\n        return\
    \ x + y\n    if x % 2 != 0 and y % 2 == 0:\n        return x + y\n    if x % 2\
    \ != 0 and y % 2 != 0:\n        return x + y\n    return -1\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n   \
    \ if x < y:\n        return -1\n    if x == y:\n        return x\n    if x % 2\
    \ == 0 and y % 2 == 0:\n        return x + y\n    if x % 2 == 0 and y % 2 != 0:\n\
    \        return x + y\n    if x % 2 != 0 and y % 2 == 0:\n        return x + y\n\
    \    if x % 2 != 0 and y % 2 != 0:\n        return x + y\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg72hlp1o_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \      y /= 2\n        if x == y {\n            return -1\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp63mnc5gm_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp63mnc5gm_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp63mnc5gm_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp63mnc5gm_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n\
    \    return choose_num(x, y / 2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0390\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.choose_num(0xd?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:16 +0x85 fp=0xc0201e03a0 sp=0xc0201e0398 pc=0x4ef6e5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e03c0 sp=0xc0201e03a0 pc=0x4ef6b0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26 +0x50 fp=0xc0201e03e0 sp=0xc0201e03c0 pc=0x4ef6b0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e0400 sp=0xc0201e03e0 pc=0x4ef6b0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26 +0x50 fp=0xc0201e0420 sp=0xc0201e0400 pc=0x4ef6b0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e0440 sp=0xc0201e0420 pc=0x4ef6b0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26 +0x50 fp=0xc0201e0460 sp=0xc0201e0440 pc=0x4ef6b0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e0480 sp=0xc0201e0460 pc=0x4ef6b0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26 +0x50 fp=0xc0201e04a0 sp=0xc0201e0480 pc=0x4ef6b0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e04c0 sp=0xc0201e04a0 pc=0x4ef6b0\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26 +0x50 fp=0xc0201e04e0 sp=0xc0201e04c0 pc=0x4ef6b0\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmph4ij1f68_test.go:26\
    \ +0x50 fp=0xc0201e0500 sp=0xc0201e04e0 pc=0x4ef6b0\ncommand-line-ar"
  timestamp: 1660073577
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpfll1a5xy_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpfll1a5xy_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfll1a5xy_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfll1a5xy_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfll1a5xy_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfll1a5xy_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpfll1a5xy_test.go:57: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x%2\
    \ == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=5237)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4bwub9fx_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4bwub9fx_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg1lud2o7_test.go:54: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpg1lud2o7_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x += 2\n        }\n        if y % 2 == 0 {\n            y +=\
    \ 2\n        }\n        if x == y {\n            return x\n        }\n       \
    \ x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073589
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x == 0 {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvcsynx99_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvcsynx99_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvcsynx99_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvcsynx99_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvcsynx99_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvcsynx99_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvcsynx99_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvcsynx99_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073576
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    // The first even number greater than or equal to x and\
    \ less than or equal to y.\n    x -= 2\n    y -= 2\n    \n    for {\n        if\
    \ x % 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n   \
    \     }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073590
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n</code>\n<|/ a tags=python,algorithm,language-agnostic,java,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\ndef choose_num(x\
    \ : int, y : int) -> int:\n    if x < y:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return choose_num(x/2, y)\n   \
    \ return choose_num(x/2, y)\n</code>\n<|/ a tags=python,algorithm,language-agnostic,java,c++\
    \ |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| a tags=python,algorithm,language-agnostic,java,c++\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x < y:\n      \
    \  return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ choose_num(x/2, y)\n    return choose_num(x/2, y)\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`.\n<|/ c |>\n<| c\
    \ |>\nIt \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3wyre1q4_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073575
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n        } else\
    \ {\n            y /= 2\n        }\n        \n        if x == y {\n          \
    \  return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073590
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x > y {\n        return\
    \ -1\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpuqbtuu74_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpuqbtuu74_test.go:59:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpuqbtuu74_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpuqbtuu74_test.go:59:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073576
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnbcq48n7_test.go:53: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpnbcq48n7_test.go:53:\
    \ expected '%!s(int=12354)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnbcq48n7_test.go:53: expected '%!s(int=28)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpnbcq48n7_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073576
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x%2\
    \ == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpjxwahduj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpjxwahduj_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n"
  timestamp: 1660073575
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n</code>\n<|/ a tags=python,algorithm |>\n<| c\
    \ |>\nThis doesn't work if x is negative and y is positive.\n<|/ c |>\n<| c |>\n\
    This doesn't work if x is negative and y is positive.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if x is negative and y is positive.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if x is negative and y is positive.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if x is negative and y is positive.\n<|/ c |>\n<| a |>\n<code>\ndef choose_num(x\
    \ : int, y : int) -> int:\n    if x < y:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return choose_num(x/2, y)\n   \
    \ return choose_num(x/2, y)\n</code>\n<|/ a tags=python,algorithm dscore=2 |>\n\
    <| c |>\nThis doesn't work if x is negative and y is positive.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if x is negative and y is positive.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x < y:\n      \
    \  return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n        return\
    \ choose_num(x/2, y)\n    return choose_num(x/2, y)\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\nThis doesn't work if x is negative and y is positive.\n<|/ c |>\n\
    <| a tags=python,algorithm |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n\
    \    if x < y:\n        return -1\n    if x == y:\n        return x\n    if x\
    \ % 2 == 0:\n        return choose_num(x/2, y)\n    return choose_num(x/2, y)\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=python,algorithm |>\n<code>\ndef choose_num(x\
    \ : int, y : int) -> int:\n    if x < y:\n        return -1\n    if x == y:\n\
    \        return x\n    if x % 2 == 0:\n        return choose_num(x/2, y)\n   \
    \ return choose_num(x/2, y)\n</code>\n<|/ a dscore=2 |>\n<| a \nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp29__2my5_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073576
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            x = x / 2\n        } else {\n          \
    \  x = x * 3 + 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp877slscn_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp877slscn_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp877slscn_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp877slscn_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp877slscn_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp877slscn_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp877slscn_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073576
