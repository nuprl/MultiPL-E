name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount\
    \ := 0\n    for _, v := range vowels {\n        if word == v {\n            vowelsCount++\n\
    \        }\n    }\n    if vowelsCount > 0 {\n        return word\n    }\n    vowelsCount\
    \ = 0\n    for i := len(word) - 1; i >= 0; i-- {\n        if word[i] == word[len(word)-1]\
    \ {\n            vowelsCount++\n        }\n    }\n    if vowelsCount > 0 {\n \
    \       return word\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n\
    \    for _, v := range vowels {\n        if strings.Contains(word, v) {\n    \
    \        vowelsCount++\n        }\n    }\n    if vowelsCount < 2 {\n        return\
    \ \"\"\n    }\n    vowelsCount -= 2\n    for i := len(word) - 2; i >= 0; i-- {\n\
    \        if strings.Contains(word[i], \"a\") {\n            vowelsCount++\n  \
    \      }\n        if strings.Contains(word[i], \"e\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"i\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"o\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"u\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"A\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"E\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"I\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"O\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"U\") {\n            vowelsCount++\n\
    \        }\n    }\n    if vowelsCount < 2 {\n        return \"\"\n    }\n    vowelsCount\
    \ -= 2\n    for i := len(word) - 3; i >= 0; i-- {\n        if strings.Contains(word[i],\
    \ \"a\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"e\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"i\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"o\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"u\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"A\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"E\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"I\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"O\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"U\") {\n            vowelsCount++\n        }\n    }\n    if vowelsCount <\
    \ 2 {\n        return \"\"\n    }\n    vowelsCount -= 2\n    for i := len(word)\
    \ - ", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen\
    \ := len(vowels)\n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 2\n\
    \    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen +=\
    \ 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen\
    \ += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen ", "    // Write\
    \ your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen += 2\n    for\
    \ i := 0; i < len(word); i++ {\n        if word[i] == 'a' || word[i] == 'e' ||\
    \ word[i] == 'i' || word[i] == 'o' || word[i] == 'u' {\n            vowels--\n\
    \        } else {\n            vowels++\n        }\n        if vowels < 0 {\n\
    \            vowelsLen = 0\n        }\n        if vowels > vowelsLen {\n     \
    \       vowelsLen = vowels\n        }\n    }\n    return vowels[vowelsLen]\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n\
    \    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen +=\
    \ 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen\
    \ += 2\n    vowelsLen -= 2\n    vowelsLen ", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n\
    \    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n   \
    \ vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen\
    \ += 1\n    \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n   \
    \ \n    vowelsLen -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen\
    \ -= 1\n    vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n   \
    \ vowelsLen /= 2\n    vowelsLen += 1\n    \n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 1\n    \n    vowels", "    vowels := []rune(\"aeiou\"\
    )\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowel",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n\
    \    vowelsCount += len(vowels)\n    for _, v := range vowels {\n        if word\
    \ == v {\n            return v\n        }\n    }\n    for i := len(word) - 2;\
    \ i >= 0; i-- {\n        if word[i] == word[i+1] {\n            vowelsCount++\n\
    \            if vowelsCount > len(vowels)-1 {\n                return \"\"\n \
    \           }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen -= 2\n    vowelsLen\
    \ -= 2\n    vowelsLen ", "    vowels := []rune(\"aeiouAEIOU\")\n    vowelsLen\
    \ := len(vowels)\n    vowelsLen -= 1\n    vowelsLen += 2\n    i := len(word) -\
    \ 1\n    j := len(word) - 2\n    k := len(word) - 3\n    l := len(word) - 4\n\
    \    m := len(word) - 5\n    n := len(word) - 6\n    o := len(word) - 7\n    p\
    \ := len(word) - 8\n    q := len(word) - 9\n    r := len(word) - 10\n    s :=\
    \ len(word) - 11\n    t := len(word) - 12\n    u := len(word) - 13\n    v := len(word)\
    \ - 14\n    w := len(word) - 15\n    x := len(word) - 16\n    y := len(word) -\
    \ 17\n    z := len(word) - 18\n    switch {\n    case word[i] == vowels[j]:\n\
    \        return word[i]\n    case word[i] == vowels[k]:\n        return word[i]\n\
    \    case word[i] == vowels[l]:\n        return word[i]\n    case word[i] == vowels[m]:\n\
    \        return word[i]\n    case word[i] == vowels[n]:\n        return word[i]\n\
    \    case word[i] == vowels[o]:\n        return word[i]\n    case word[i] == vowels[p]:\n\
    \        return word[i]\n    case word[i] == vowels[q]:\n        return word[i]\n\
    \    case word[i] == vowels[r]:\n        return word[i]\n    case word[i] == vowels[s]:\n\
    \        return word[i]\n    case word[i] == vowels[t]:\n        return word[i]\n\
    \    case word[i] == vowels[u]:\n        return word[i]\n    case word[i] == vowels[v]:\n\
    \        return word[i]\n    case word[i] == vowels[w]:\n        return word[i]\n\
    \    case word[i] == vowels[x]:\n        return word[i]\n    case word[i] == vowels[y]:\n\
    \        return word[i]\n    case word[i] == vowels[z]:\n        return word[i]\n\
    \    default:\n        return \"\"\n    }\n}\n", "    // Your code here\n    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    for\
    \ _, v := range vowels {\n        if word == v {\n            vowelsCount++\n\
    \        }\n    }\n    if vowelsCount > 0 {\n        for _, v := range vowels\
    \ {\n            if word == v {\n                return v\n            }\n   \
    \     }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen -= 1\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen\
    \ /= 2\n    vowelsLen += 2\n    vowelsLen /= 2\n    vowelsLen += 2\n    vowelsLen ",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n\
    \    vowelsCount += len(vowels)\n    for _, v := range vowels {\n        if strings.Contains(word,\
    \ v) {\n            vowelsCount++\n        }\n    }\n    if vowelsCount < 2 {\n\
    \        return \"\"\n    }\n    vowelsCount -= 2\n    for i := len(word) - 2;\
    \ i >= 0; i-- {\n        if strings.Contains(word[i], \"a\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"e\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"i\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"o\") {\n            vowelsCount++\n\
    \        }\n        if strings.Contains(word[i], \"u\") {\n            vowelsCount++\n\
    \        }\n    }\n    if vowelsCount < 2 {\n        return \"\"\n    }\n    vowelsCount\
    \ -= 2\n    for i := len(word) - 2; i >= 0; i-- {\n        if strings.Contains(word[i],\
    \ \"a\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"e\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"i\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"o\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"u\") {\n            vowelsCount++\n        }\n    }\n    if vowelsCount <\
    \ 2 {\n        return \"\"\n    }\n    vowelsCount -= 2\n    for i := len(word)\
    \ - 2; i >= 0; i-- {\n        if strings.Contains(word[i], \"a\") {\n        \
    \    vowelsCount++\n        }\n        if strings.Contains(word[i], \"e\") {\n\
    \            vowelsCount++\n        }\n        if strings.Contains(word[i], \"\
    i\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"o\") {\n            vowelsCount++\n        }\n        if strings.Contains(word[i],\
    \ \"u\") {\n            vowelsCount++\n        }\n    }\n    if vowelsCount <\
    \ 2 {\n        return \"\"\n    }\n    vowelsCount -= 2\n    for i := len(word)\
    \ - 2; i >= 0; i-- {\n        if strings.Contains(word[i], \"a\") {\n        \
    \    vowelsCount++\n        }\n        if strings.Contains(word[i], \"e\") {\n\
    \            vowelsCount++\n        }\n        if strings.Contains(word[i], \"\
    i\") {\n            ", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n    vowelsCount +=\
    \ len(vowels)/2\n    vowelsCount += len(vowels)/3\n    vowelsCount += len(vowels)/4\n\
    \    vowelsCount += len(vowels)/5\n    vowelsCount += len(vowels)/6\n    vowelsCount\
    \ += len(vowels)/7\n    vowelsCount += len(vowels)/8\n    vowelsCount += len(vowels)/9\n\
    \    vowelsCount += len(vowels)/10\n    vowelsCount += len(vowels)/11\n    vowelsCount\
    \ += len(vowels)/12\n    vowelsCount += len(vowels)/13\n    vowelsCount += len(vowels)/14\n\
    \    vowelsCount += len(vowels)/15\n    vowelsCount += len(vowels)/16\n    vowelsCount\
    \ += len(vowels)/17\n    vowelsCount += len(vowels)/18\n    vowelsCount += len(vowels)/19\n\
    \    vowelsCount += len(vowels)/20\n    vowelsCount += len(vowels)/21\n    vowelsCount\
    \ += len(vowels)/22\n    vowelsCount += len(vowels)/23\n    vowelsCount += len(vowels)/24\n\
    \    vowelsCount += len(vowels)/25\n    vowelsCount += len(vowels)/26\n    vowelsCount\
    \ += len(vowels)/27\n    vowelsCount += len(vowels)/28\n    vowelsCount += len(vowels)/29\n\
    \    vowelsCount += len(vowels)/30\n    vowelsCount += len(vowels)/31\n    vowelsCount\
    \ += len(vowels)/32\n    vowelsCount += len(vowels)/33\n    vowelsCount += len(vowels)/34\n\
    \    vowelsCount += len(vowels)/35\n    vowelsCount += len(vowels)/36\n    vowelsCount\
    \ += len(vowels)/37\n    vowelsCount += len(vowels)/38\n    vowelsCount += len(vowels)/39\n\
    \    vowelsCount += len(vowels)/40\n    vowelsCount += len(vowels)/41\n    vowelsCount\
    \ += len(vowels)/42\n    vowelsCount += len(vowels)/43\n    vowelsCount += len(vowels)/44\n\
    \    vowelsCount += len(vowels)/45\n    vowelsCount += len(vowels)/46\n    vowelsCount\
    \ += len(vowels)/47\n    vowelsCount += len(vowels)/48\n    vowelsCount += len(vowels)/49\n\
    \    vowels", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    vowelsCount\
    \ := 0\n    vowelsCount += len(word) - len(word[:len(word)-1])\n    for _, v :=\
    \ range vowels {\n        if word[len(word)-1-v-1] == v {\n            return\
    \ string(v)\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsLen := len(vowels)\n    vowelsLen\
    \ -= 1\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen += 2\n    vowelsLen -= 2\n    vowelsLen += 2\n    vowelsLen\
    \ -= 2\n    vowelsLen ", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    vowelsCount := 0\n    for _, v := range vowels {\n        if word ==\
    \ v {\n            vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    vowelsCount -= 1\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount\
    \ /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= 2\n   \
    \ vowelsCount /= 2\n    vowelsCount /= 2\n    vowelsCount /= ", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount\
    \ += len(vowels)\n    for _, v := range vowels {\n        if strings.Contains(word,\
    \ v) {\n            vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    vowelsCount -= 1\n    vowelsCount /= 2\n    vowelsCount\
    \ %= len(vowels)\n    lastConsonant := strings.LastIndex(word, \"\")\n    if lastConsonant\
    \ == -1 {\n        return \"\"\n    }\n    lastConsonant += 1 // +1 because we\
    \ already checked the length above\n    lastConsonant /= 2\n    lastConsonant\
    \ %= len(word)\n    if lastConsonant == 0 {\n        return \"\"\n    }\n    lastConsonant\
    \ += 1 // +1 because we already checked the length above\n    lastConsonant /=\
    \ 2\n    lastConsonant %= len(word)\n    if lastConsonant == 0 {\n        return\
    \ \"\"\n    }\n    lastConsonant += 1 // +1 because we already checked the length\
    \ above\n    lastConsonant /= 2\n    lastConsonant %= len(word)\n    if lastConsonant\
    \ == 0 {\n        return \"\"\n    }\n    lastConsonant += 1 // +1 because we\
    \ already checked the length above\n    lastConsonant /= 2\n    lastConsonant\
    \ %= len(word)\n    if lastConsonant == 0 {\n        return \"\"\n    }\n    lastConsonant\
    \ += 1 // +1 because we already checked the length above\n    lastConsonant /=\
    \ 2\n    lastConsonant %= len(word)\n    if lastConsonant == 0 {\n        return\
    \ \"\"\n    }\n    lastConsonant += 1 // +1 because we already checked the length\
    \ above\n    lastConsonant /= 2\n    lastConsonant %= len(word)\n    if lastConsonant\
    \ == 0 {\n        return \"\"\n    }\n    lastConsonant += 1 // +1 because we\
    \ already checked the length above\n    lastConsonant /= 2\n    lastConsonant\
    \ %= len(word)\n    if lastConsonant == 0 {\n        return \"\"\n    }\n    lastConsonant\
    \ += 1 // +1 because we already checked the length above\n    lastConsonant /=\
    \ 2\n    lastConsonant %= len(word)\n    if lastConsonant == 0 {\n        return\
    \ \"\"\n    }\n    lastConsonant += 1 // +1 because we ", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n\
    \    for _, v := range vowels {\n        if strings.Contains(word, v) {\n    \
    \        vowelsCount++\n        }\n    }\n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    vowelsCount -= len(vowels)\n    vowelsCount /= 2\n    vowelsCount\
    \ %= len(vowels)\n    if vowelsCount < 0 {\n        vowelsCount += len(vowels)\n\
    \    }\n    return vowels[vowelsCount]\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    vowelsCount := 0\n    vowelsCount += len(vowels)\n\
    \    for _, v := range vowels {\n        if word == v {\n            return v\n\
    \        }\n    }\n    for i := len(word) - 2; i >= 0; i-- {\n        if word[i]\
    \ == word[i+1] && word[i] == word[i+2] {\n            vowelsCount++\n        }\n\
    \    }\n    if vowelsCount > 0 {\n        return word[len(vowels)-1]\n    }\n\
    \    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
