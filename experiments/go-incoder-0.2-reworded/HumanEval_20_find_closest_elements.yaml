name: HumanEval_20_find_closest_elements
language: go_test.go
prompt: "package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers\
  \ []float64) []interface{} {\n"
tests: "func TestFind_Closest_Elements(t *testing.T) {\n  candidate := find_closest_elements\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2}), expected: []interface{}{3.9, 4.0} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 5.9, 4.0, 5.0}), expected: []interface{}{5.0, 5.9} },\n     { actual: candidate([]float64{1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), expected: []interface{}{2.0, 2.2} },\n     { actual:\
  \ candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), expected: []interface{}{2.0,\
  \ 2.0} },\n     { actual: candidate([]float64{1.1, 2.2, 3.1, 4.1, 5.1}), expected:\
  \ []interface{}{2.2, 3.1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    result := []interface{}{}\n    for\
    \ _, number := range numbers {\n        if number == smallest {\n            result\
    \ = append(result, smallest)\n        }\n        if number == largest {\n    \
    \        result = append(result, largest)\n        }\n    }\n\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n        i++\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    index := 0\n\n  \
    \  for _, number := range numbers {\n        if number < smallest {\n        \
    \    smallest = number\n        }\n        if number > largest {\n           \
    \ largest = number\n        }\n        if number == smallest {\n            return\
    \ append([]interface{}{smallest}, numbers[index:]...)\n        }\n        if number\
    \ == largest {\n            return append([]interface{}{largest}, numbers[index:]...)\n\
    \        }\n        index++\n    }\n\n    return nil\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    result := []interface{}{smallest, largest}\n    return result\n}\n", "  \
    \  if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    i := 0\n    j\
    \ := len(numbers) - 1\n\n    smallest := numbers[i]\n    largest := numbers[j]\n\
    \n    for i < j {\n        if numbers[i] < smallest {\n            smallest =\
    \ numbers[i]\n        }\n\n        if numbers[j] > largest {\n            largest\
    \ = numbers[j]\n        }\n\n        i++\n        j--\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    i := 0\n    for i < len(numbers) {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n        }\n    \
    \    if numbers[i] > largest {\n            largest = numbers[i]\n        }\n\
    \        i++\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "  \
    \  if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            index = i\n        }\n\n        if numbers[i] > largest {\n     \
    \       largest = numbers[i]\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest_index := 0\n    largest_index := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallest_index = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largest_index = i\n        }\n\
    \    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    result := []interface{}{}\n    for\
    \ _, number := range numbers {\n        if number == smallest {\n            result\
    \ = append(result, smallest)\n        }\n        if number == largest {\n    \
    \        result = append(result, largest)\n        }\n    }\n\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    for _, number := range numbers {\n        if number == smallest\
    \ {\n            return result\n        }\n        if number == largest {\n  \
    \          return result\n        }\n        if number < smallest {\n        \
    \    smallest = number\n        }\n        if number > largest {\n           \
    \ largest = number\n        }\n    }\n\n    return nil\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{numbers[smallestIndex],\
    \ numbers[largestIndex]}\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    i :=\
    \ 0\n    j := len(numbers) - 1\n    closest := numbers[i]\n    closestIndex :=\
    \ i\n    closestDistance := float64(math.Abs(numbers[i] - numbers[j]))\n    for\
    \ i < j {\n        if numbers[i] > numbers[j] {\n            i++\n        } else\
    \ if numbers[i] < numbers[j] {\n            j--\n        } else {\n          \
    \  i++\n            j--\n        }\n        closestDistance = math.Min(closestDistance,\
    \ math.Abs(numbers[i] - numbers[j]))\n        if closestDistance < math.Abs(numbers[i]\
    \ - closest) {\n            closest = numbers[i]\n            closestIndex = i\n\
    \        }\n        if closestDistance < math.Abs(numbers[j] - closest) {\n  \
    \          closest = numbers[j]\n            closestIndex = j\n        }\n   \
    \ }\n    return []interface{}{numbers[closestIndex], numbers[closestIndex+1]}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    result := []interface{}{smallest, largest}\n\
    \    return result\n}\n", "    if len(numbers) < 2 {\n        return nil\n   \
    \ }\n\n    numbers := numbers[:len(numbers)-1]\n    numbers := append(numbers,\
    \ numbers[len(numbers)-1])\n\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[len(numbers)-1]\n\n    smallestIndex := -1\n    largestIndex := -1\n\
    \n    for i, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n            smallestIndex = i\n        }\n\
    \n        if number > largestNumber {\n            largestNumber = number\n  \
    \          largestIndex = i\n        }\n    }\n\n    if smallestIndex == -1 {\n\
    \        return nil\n    }\n\n    return []interface{}{smallestNumber, largestNumber}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    result := []interface{}{}\n    for\
    \ _, number := range numbers {\n        if number == smallest {\n            result\
    \ = append(result, smallest)\n        }\n        if number == largest {\n    \
    \        result = append(result, largest)\n        }\n    }\n\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallestIndex := 0\n    largestIndex := 0\n\n    for i := 1; i < len(numbers);\
    \ i++ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n\
    \            smallestIndex = i\n        }\n        if numbers[i] > largest {\n\
    \            largest = numbers[i]\n            largestIndex = i\n        }\n \
    \   }\n\n    return []interface{}{numbers[smallestIndex], numbers[largestIndex]}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    sort.Float64s(numbers)\n\
    \    numbers := numbers[:len(numbers)-1]\n    numbers := append(numbers, numbers[0])\n\
    \    numbers := append(numbers, numbers[1])\n    numbers := append(numbers, numbers[len(numbers)-1])\n\
    \    numbers := append(numbers, numbers[len(numbers)-2])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-3])\n    numbers := append(numbers, numbers[len(numbers)-4])\n\
    \    numbers := append(numbers, numbers[len(numbers)-5])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-6])\n    numbers := append(numbers, numbers[len(numbers)-7])\n\
    \    numbers := append(numbers, numbers[len(numbers)-8])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-9])\n    numbers := append(numbers, numbers[len(numbers)-10])\n\
    \    numbers := append(numbers, numbers[len(numbers)-11])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-12])\n    numbers := append(numbers, numbers[len(numbers)-13])\n\
    \    numbers := append(numbers, numbers[len(numbers)-14])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-15])\n    numbers := append(numbers, numbers[len(numbers)-16])\n\
    \    numbers := append(numbers, numbers[len(numbers)-17])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-18])\n    numbers := append(numbers, numbers[len(numbers)-19])\n\
    \    numbers := append(numbers, numbers[len(numbers)-20])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-21])\n    numbers := append(numbers, numbers[len(numbers)-22])\n\
    \    numbers := append(numbers, numbers[len(numbers)-23])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-24])\n    numbers := append(numbers, numbers[len(numbers)-25])\n\
    \    numbers := append(numbers, numbers[len(numbers)-26])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-27])\n    numbers := append(numbers, numbers[len(numbers)-28])\n\
    \    numbers := append(numbers, numbers[len(numbers)-29])\n    numbers := append(numbers,\
    \ numbers[len(numbers)-30])\n    numbers := append(numbers, numbers[len(numbers)-31])\n\
    \    numbers := append(numbers, numbers[len(numbers)-32])\n    numbers := append(numbers,\
    \ numbers[len(", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n        if number == smallest {\n  \
    \          index = index + 1\n        }\n    }\n\n    result := make([]interface{},\
    \ 2)\n    result[0] = smallest\n    result[1] = largest\n    return result\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    for _, number := range numbers {\n        if number == smallest\
    \ {\n            return append(result, number)\n        }\n        if number ==\
    \ largest {\n            return append(result, number)\n        }\n    }\n   \
    \ return append(result, numbers[0])\n}\n", "    if len(numbers) < 2 {\n      \
    \  return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{}\n\
    \    if smallest != largest {\n        result = append(result, smallest)\n   \
    \     result = append(result, largest)\n    }\n    return result\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n\n    for i < len(numbers) {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        i++\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \n    result := []interface{}{smallest, largest}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            return result\n        }\n \
    \       if number == largest {\n            return result\n        }\n       \
    \ if number < smallest {\n            return result\n        }\n        if number\
    \ > largest {\n            return result\n        }\n    }\n    return nil\n}\n",
  "    sort.Float64s(numbers)\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallestNumber\
    \ := numbers[0]\n    largestNumber := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallestNumber {\n            smallestNumber = number\n\
    \        }\n        if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallestNumber {\n\
    \            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n    diff := numbers[1] - numbers[0]\n    diff /= 2\n\
    \    diff -= numbers[0]\n    diff /= 2\n\n    result := []interface{}{}\n    for\
    \ _, number := range numbers {\n        if number < numbers[0] {\n           \
    \ result = append(result, number)\n        } else if number > numbers[0] {\n \
    \           result = append(result, numbers[0])\n        } else {\n          \
    \  result = append(result, number)\n        }\n    }\n\n    return result\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers[1:] {\n        if number < smallest {\n     \
    \       smallest = number\n        }\n        if number > largest {\n        \
    \    largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers[1:] {\n        if number < smallest {\n   \
    \         smallest = number\n        }\n        if number > largest {\n      \
    \      largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2\
    \ {\n        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        } else if number > largest {\n            largest = number\n\
    \        }\n\n        if number == smallest {\n            numbers[i] = number\n\
    \            i++\n        }\n    }\n\n    return numbers[:i]\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    sort.Float64s(numbers)\n\
    \    i := 0\n    j := len(numbers) - 1\n    closest := numbers[i]\n    result\
    \ := []interface{}{}\n    for {\n        if i == j {\n            break\n    \
    \    }\n        if numbers[i] < numbers[j] {\n            i++\n        } else\
    \ {\n            j--\n        }\n        result = append(result, numbers[i])\n\
    \    }\n    return result\n}\n", "    if len(numbers) < 2 {\n        return nil\n\
    \    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    i := 0\n    j := len(numbers) - 1\n    closestNumbers := []interface{}{}\n\
    \    for i < j {\n        if numbers[i] < numbers[j] {\n            closestNumbers\
    \ = append(closestNumbers, numbers[i])\n            i++\n        } else {\n  \
    \          closestNumbers = append(closestNumbers, numbers[j])\n            j--\n\
    \        }\n    }\n    return closestNumbers\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    diff := numbers[len(numbers)-1] - numbers[0]\n    result := []interface{}{}\n\
    \    for i := 0; i < len(numbers); i++ {\n        if diff > 0 {\n            diff\
    \ *= -1\n            result += []interface{}{numbers[i], numbers[i+1]}\n     \
    \   } else {\n            result += []interface{}{numbers[i], numbers[0]}\n  \
    \      }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    sort.Float64s(numbers)\n\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        } else if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    smallest_index := 0\n    largest_index := 0\n\n    for i\
    \ := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest {\n        \
    \    smallest = numbers[i]\n            smallest_index = i\n        }\n      \
    \  if numbers[i] > largest {\n            largest = numbers[i]\n            largest_index\
    \ = i\n        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n\
    \    largestIndex := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallestIndex\
    \ = i\n        }\n\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n \
    \   smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    result := []interface{}{smallest,\
    \ largest}\n    for _, number := range numbers {\n        if number == smallest\
    \ {\n            return result\n        }\n        if number == largest {\n  \
    \          return result\n        }\n        if number < smallest {\n        \
    \    result = append(result, number)\n        }\n        if number > largest {\n\
    \            result = append(result, number)\n        }\n    }\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    sort.Float64s(numbers)\n    i :=\
    \ 0\n    j := len(numbers) - 1\n    result := make([]interface{}, 2)\n    for\
    \ i < j {\n        diff := numbers[i] - numbers[j]\n        if diff < 0 {\n  \
    \          j = i\n        } else {\n            i = j\n        }\n        if i\
    \ == j {\n            result[0] = numbers[i]\n            result[1] = numbers[j]\n\
    \            break\n        }\n        if diff == 0 {\n            result[0] =\
    \ numbers[i]\n            result[1] = numbers[j]\n            break\n        }\n\
    \        if diff < 0 {\n            j = i\n        } else {\n            i = j\n\
    \        }\n    }\n    return result\n}\n", "    if len(numbers) < 2 {\n     \
    \   return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n\n    for i < len(numbers) {\n        if numbers[i] < smallest {\n\
    \            smallest = numbers[i]\n        }\n        if numbers[i] > largest\
    \ {\n            largest = numbers[i]\n        }\n        i++\n    }\n\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallestIndex := 0\n    largestIndex\
    \ := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallest\
    \ {\n            smallest = numbers[i]\n            smallestIndex = i\n      \
    \  }\n        if numbers[i] > largest {\n            largest = numbers[i]\n  \
    \          largestIndex = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n\n    result := []interface{}{smallest, largest}\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n\n    i := 0\n    j := 0\n    closestIndex := 0\n \
    \   closestDistance := math.MaxFloat64\n    for i < len(numbers) {\n        if\
    \ numbers[i] < numbers[j] {\n            closestDistance = numbers[i]\n      \
    \      closestIndex = i\n            i++\n        } else {\n            closestDistance\
    \ = numbers[j]\n            closestIndex = j\n            j++\n        }\n\n \
    \       if closestDistance < math.MaxFloat64 {\n            break\n        }\n\
    \    }\n\n    return []interface{}{numbers[closestIndex], numbers[closestIndex+1]}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    smallestNumber := numbers[0]\n\
    \    largestNumber := numbers[0]\n    for _, number := range numbers[1:] {\n \
    \       if number < smallestNumber {\n            smallestNumber = number\n  \
    \      } else if number > largestNumber {\n            largestNumber = number\n\
    \        }\n    }\n    return []interface{}{smallestNumber, largestNumber}\n}\n",
  "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n \
    \   for _, number := range numbers {\n        if number < smallest {\n       \
    \     smallest = number\n        }\n        if number > largest {\n          \
    \  largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    sort.Float64s(numbers)\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    i := 0\n\n    for i < len(numbers)\
    \ {\n        if numbers[i] < smallest {\n            smallest = numbers[i]\n \
    \       }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n        i++\n    }\n\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers[1:] {\n       \
    \ if number < smallest {\n            smallest = number\n        }\n        if\
    \ number > largest {\n            largest = number\n        }\n    }\n    return\
    \ []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n       \
    \ return nil\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  numbers := numbers[:len(numbers)-1]\n    numbers := append(numbers, numbers[0])\n\
    \n    smallestNumber := numbers[0]\n    largestNumber := numbers[len(numbers)-1]\n\
    \n    for i := 1; i < len(numbers); i++ {\n        if numbers[i] < smallestNumber\
    \ {\n            smallestNumber = numbers[i]\n        }\n        if numbers[i]\
    \ > largestNumber {\n            largestNumber = numbers[i]\n        }\n    }\n\
    \n    return []interface{}{smallestNumber, largestNumber}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    result := []interface{}{}\n\
    \    for _, number := range numbers {\n        if number == smallest {\n     \
    \       result = append(result, smallest)\n        }\n        if number == largest\
    \ {\n            result = append(result, largest)\n        }\n    }\n    return\
    \ result\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    i := 1\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n        i++\n    }\n\n    result := []interface{}{smallest, largest}\n\
    \    for i := 1; i < len(numbers); i++ {\n        if numbers[i-1] > numbers[i]\
    \ {\n            result[i-1] = numbers[i-1]\n            result[i] = numbers[i]\n\
    \        } else {\n            result[i-1] = numbers[i]\n            result[i]\
    \ = numbers[i-1]\n        }\n    }\n\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \n    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number :=\
    \ range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    result := []interface{}{}\n    for _, number := range numbers\
    \ {\n        if number == smallest {\n            result = append(result, smallest)\n\
    \        }\n        if number == largest {\n            result = append(result,\
    \ largest)\n        }\n    }\n\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers[1:] {\n        if number <\
    \ smallest {\n            smallest = number\n        }\n        if number > largest\
    \ {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers[1:] {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if\
    \ len(numbers) < 2 {\n        return nil\n    }\n\n    numbers := make([]float64,\
    \ len(numbers))\n    copy(numbers, numbers)\n\n    sort.Float64s(numbers)\n\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n\n    for\
    \ i < len(numbers) {\n        if numbers[i] < smallest {\n            smallest\
    \ = numbers[i]\n        }\n\n        if numbers[i] > largest {\n            largest\
    \ = numbers[i]\n        }\n\n        i++\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallestNumber := numbers[0]\n    largestNumber\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallestNumber\
    \ {\n            smallestNumber = number\n        }\n        if number > largestNumber\
    \ {\n            largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    sort.Float64s(numbers)\n    diff := numbers[1]\
    \ - numbers[0]\n    diff /= 2\n    diff *= diff\n    diff /= 2\n    diff *= diff\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n\
    \    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n \
    \   diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n  \
    \  diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n   \
    \ diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff\
    \ /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /=\
    \ 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2\n    diff /= 2",
  "    sort.Float64s(numbers)\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    i := 0\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n        i++\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n\n    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallest_index := 0\n\
    \    largest_index := 0\n\n    for i := 1; i < len(numbers); i++ {\n        if\
    \ numbers[i] < smallest {\n            smallest = numbers[i]\n            smallest_index\
    \ = i\n        }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \            largest_index = i\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    sort.Float64s(numbers)\n    i := 0\n    j := len(numbers)\
    \ - 1\n    diff := numbers[i] - numbers[j]\n    result := []interface{}{}\n  \
    \  for {\n        if i > j {\n            break\n        }\n        if diff <\
    \ 0 {\n            i++\n            diff = numbers[i] - numbers[j]\n         \
    \   continue\n        }\n        if diff > 0 {\n            j--\n            diff\
    \ = numbers[i] - numbers[j]\n            continue\n        }\n        result =\
    \ append(result, numbers[i])\n        i++\n        j--\n    }\n    return result\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    index := 0\n\n    for index := 1;\
    \ index < len(numbers); index++ {\n        if numbers[index] < smallest {\n  \
    \          smallest = numbers[index]\n        }\n        if numbers[index] > largest\
    \ {\n            largest = numbers[index]\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  sort.Float64s(numbers)\n\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    index := 0\n    for i := 1; i < len(numbers); i++ {\n        if numbers[i]\
    \ < smallest {\n            smallest = numbers[i]\n            index = i\n   \
    \     }\n        if numbers[i] > largest {\n            largest = numbers[i]\n\
    \        }\n    }\n\n    return []interface{}{smallest, largest}\n}\n", "    sort.Sort(sort.Reverse(sort.Float64Slice(numbers)))\n\
    \    smallestNumber := numbers[0]\n    largestNumber := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallestNumber {\n          \
    \  smallestNumber = number\n        }\n        if number > largestNumber {\n \
    \           largestNumber = number\n        }\n    }\n    return []interface{}{smallestNumber,\
    \ largestNumber}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\
    \    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers[1:] {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    return []interface{}{smallest, largest}\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n\n    for _, number := range numbers {\n        if\
    \ number < smallest {\n            smallest = number\n        }\n        if number\
    \ > largest {\n            largest = number\n        }\n    }\n\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers[1:] {\n        if number < smallest {\n  \
    \          smallest = number\n        }\n        if number > largest {\n     \
    \       largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n\n  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    i := 0\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n        i++\n    }\n\n    result := make([]interface{}, 2)\n    result[0]\
    \ = smallest\n    result[1] = largest\n\n    return result\n}\n", "    if len(numbers)\
    \ < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers[1:] {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers[1:]\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    return []interface{}{smallest, largest}\n}\n", "    if len(numbers) < 2 {\n\
    \        return nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(numbers) < 2 {\n        return nil\n    }\n    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    result := []interface{}{smallest,\
    \ largest}\n    return result\n}\n", "    if len(numbers) < 2 {\n        return\
    \ nil\n    }\n    smallest := numbers[0]\n    largest := numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    return []interface{}{smallest, largest}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
