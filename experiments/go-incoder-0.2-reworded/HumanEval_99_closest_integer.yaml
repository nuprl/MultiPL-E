name: HumanEval_99_closest_integer
language: go_test.go
prompt: "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunc closest_integer(value string) int {\n"
tests: "func TestClosest_Integer(t *testing.T) {\n  candidate := closest_integer\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"10\"), expected: 10 },\n     {\
  \ actual: candidate(\"14.5\"), expected: 15 },\n     { actual: candidate(\"-15.5\"\
  ), expected: -16 },\n     { actual: candidate(\"15.3\"), expected: 15 },\n     {\
  \ actual: candidate(\"0\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    value := strings.TrimSpace(value)\n    if value == \"\" {\n   \
    \     return 0\n    }\n    digits, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        fmt.Printf(\"Error converting string to int: %s\", err)\n       \
    \ return 0\n    }\n    diff := digits - math.Floor(digits)\n    if diff == 0 {\n\
    \        return digits\n    }\n    if diff > 0 {\n        return digits + 1\n\
    \    }\n    return digits - 1\n}\n", "    num, err := strconv.Atoi(value)\n  \
    \  if err != nil {\n        panic(err)\n    }\n    diff := num - closest_integer(value)\n\
    \    if diff < 0 {\n        diff *= -1\n    }\n    return num + diff\n}\n", " \
    \   num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := num - closest_integer(value)\n    if diff < 0 {\n        diff\
    \ *= -1\n    }\n    return num + diff\n}\n", "    value := strings.TrimSpace(value)\n\
    \    if value == \"\" {\n        return 0\n    }\n    value := strings.Replace(value,\
    \ \".\", \"\", -1)\n    value := strings.Replace(value, \"-\", \"\", -1)\n   \
    \ value, err := strconv.Atoi(value)\n    if err != nil {\n        fmt.Println(\"\
    Error converting string to int:\", err)\n        return 0\n    }\n    diff :=\
    \ value - int(value)\n    if diff < 0 {\n        diff *= -1\n    }\n    return\
    \ int(value) + diff\n}\n", "    i, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        panic(err)\n    }\n    if i == 0 {\n        return 0\n    }\n   \
    \ diff := i - 1\n    if diff < 0 {\n        diff = -diff\n    }\n    diff /= 2\n\
    \    if diff < 1 {\n        return i\n    }\n    return i - diff\n}\n", "    //\
    \ TODO: Write the code here\n    return 0\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    diff := num - math.Floor(num)\n\
    \    if diff < 0 {\n        diff *= -1\n    }\n    return int(math.Floor(num)\
    \ + diff)\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil {\n \
    \       panic(err)\n    }\n    if num == 0 {\n        return num\n    }\n    diff\
    \ := num - int(num)\n    if diff < 0 {\n        diff *= -1\n    }\n    return\
    \ int(num) + diff\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        panic(err)\n    }\n    diff := num - closest_integer(value)\n   \
    \ if diff < 0 {\n        return num + diff\n    }\n    return num - diff\n}\n",
  "    num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := num - closest_integer(value)\n    if diff > 0 {\n        return\
    \ num\n    }\n    return 0\n}\n", "    num, err := strconv.Atoi(value)\n    if\
    \ err != nil {\n        panic(err)\n    }\n    diff := num - closest_integer(value)\n\
    \    if diff < 0 {\n        return num - diff\n    }\n    return num + diff\n\
    }\n", "    value := strings.TrimSpace(value)\n    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    if num < 0 {\n        panic(\"\
    negative number\")\n    }\n    if num == 0 {\n        return 0\n    }\n    diff\
    \ := num - int(num)\n    if diff < 0 {\n        diff *= -1\n    }\n    return\
    \ int(num) + diff\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        panic(err)\n    }\n    if num < 0 {\n        panic(\"negative number\"\
    )\n    }\n    if num == 0 {\n        return 0\n    }\n    diff := num - int(num)\n\
    \    if diff < 0 {\n        diff += num\n    }\n    return int(num) + diff\n}\n",
  "    num := 0\n    sign := 1\n    if value[0] == '-' {\n        sign = -1\n    \
    \    value = value[1:]\n    }\n    for _, c := range value {\n        if c < '0'\
    \ || c > '9' {\n            continue\n        }\n        digit, err := strconv.Atoi(value)\n\
    \        if err != nil {\n            continue\n        }\n        num = num *\
    \ 10 + digit\n    }\n    if num == 0 {\n        return 0\n    }\n    if num <\
    \ 0 {\n        num = -num\n    }\n    if num > 0 {\n        return sign * (num\
    \ + 1)\n    }\n    return sign * (num - 1)\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    if num == 0 {\n        return\
    \ num\n    }\n    diff := num - int(num)\n    if diff < 0 {\n        diff *= -1\n\
    \    }\n    if diff > 0 {\n        return int(num) + int(diff)\n    }\n    return\
    \ int(num)\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil {\n\
    \        panic(err)\n    }\n    if num < 0 {\n        panic(\"The given number\
    \ must be positive\")\n    }\n    diff := num - closest_integer(string(num))\n\
    \    if diff > 0 {\n        return num\n    }\n    return num - diff\n}\n", " \
    \   num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := num - closest_integer(value)\n    if diff < 0 {\n        diff\
    \ *= -1\n    }\n    return num + diff\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    diff := num - closest_integer(value)\n\
    \    if diff > 0 {\n        return num\n    }\n    return num + diff\n}\n", " \
    \   num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := num - closest_integer(value)\n    if diff < 0 {\n        diff\
    \ *= -1\n    }\n    return int(num + diff)\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    diff := num - int(num)\n\
    \    if diff < 0 {\n        diff *= -1\n    }\n    if diff == 0 {\n        return\
    \ num\n    }\n    if diff > 0 {\n        return int(num) + diff\n    }\n    return\
    \ int(num) - diff\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
